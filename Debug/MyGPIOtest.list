
MyGPIOtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000083c  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004eec  08004eec  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004eec  08004eec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ef4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  2000000c  08004f00  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08004f00  00006630  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bb7  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002825  00000000  00000000  00017beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b82  00000000  00000000  0001b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001979f  00000000  00000000  0001be32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013882  00000000  00000000  000355d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9f9  00000000  00000000  00048e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e784c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003438  00000000  00000000  000e7890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eacc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004698 	.word	0x08004698

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004698 	.word	0x08004698

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <IO_Init>:

/**
 * @brief  初始化与AX5689和电源级相关的GPIO引脚.
 * @note   根据PDF Step 2: Initialize I/O.
 */
void IO_Init(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    SEGGER_RTT_Init();
 8000400:	f003 fd74 	bl	8003eec <SEGGER_RTT_Init>
    SEGGER_RTT_WriteString(0, "RTT initialized\r\n");
 8000404:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <IO_Init+0x44>)
 8000406:	0019      	movs	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f003 fd59 	bl	8003ec0 <SEGGER_RTT_WriteString>
    
    // 根据 IO_Init示例，初始化Mute引脚为低电平
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <IO_Init+0x48>)
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f001 f861 	bl	80014dc <HAL_GPIO_WritePin>

    // 将电源级置于高阻态 (Hi-Z), 假设您有一个PS_RESET_N引脚, 这里用一个通用输出来示意
    //HAL_GPIO_WritePin(PS_RESET_N_GPIO_Port, PS_RESET_N_Pin, GPIO_PIN_RESET);

    HAL_Delay(20); // 等待信号稳定
 800041a:	2014      	movs	r0, #20
 800041c:	f000 fe04 	bl	8001028 <HAL_Delay>

    // 禁用Axign控制器 (AX_Reset_N_Pin -> PA8)
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_RESET);
 8000420:	23a0      	movs	r3, #160	@ 0xa0
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2200      	movs	r2, #0
 8000426:	2101      	movs	r1, #1
 8000428:	0018      	movs	r0, r3
 800042a:	f001 f857 	bl	80014dc <HAL_GPIO_WritePin>
    RTT_printf("IO Initialized.\r\n");
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <IO_Init+0x4c>)
 8000430:	0019      	movs	r1, r3
 8000432:	2000      	movs	r0, #0
 8000434:	f004 f8ea 	bl	800460c <SEGGER_RTT_printf>
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	080046b0 	.word	0x080046b0
 8000444:	50000800 	.word	0x50000800
 8000448:	080046c4 	.word	0x080046c4

0800044c <AX5689_Read>:
 * @brief  从AX5689寄存器读取16位数据.
 * @param  regAddr: 寄存器地址.
 * @param  data: 指向存储读取数据的16位变量的指针.
 * @retval HAL status.
 */
HAL_StatusTypeDef AX5689_Read(uint16_t regAddr, uint16_t *data) {
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	b087      	sub	sp, #28
 8000450:	af02      	add	r7, sp, #8
 8000452:	0002      	movs	r2, r0
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	1dbb      	adds	r3, r7, #6
 8000458:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_ERROR;
 800045a:	210f      	movs	r1, #15
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2];

    // 将16位寄存器地址转换为两个8位字节
    buffer[0] = (regAddr >> 8) & 0xFF;
 8000462:	1dbb      	adds	r3, r7, #6
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	0a1b      	lsrs	r3, r3, #8
 8000468:	b29b      	uxth	r3, r3
 800046a:	b2da      	uxtb	r2, r3
 800046c:	250c      	movs	r5, #12
 800046e:	197b      	adds	r3, r7, r5
 8000470:	701a      	strb	r2, [r3, #0]
    buffer[1] = regAddr & 0xFF;
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	b2da      	uxtb	r2, r3
 8000478:	197b      	adds	r3, r7, r5
 800047a:	705a      	strb	r2, [r3, #1]

    // 发送寄存器地址
    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 800047c:	000e      	movs	r6, r1
 800047e:	19bc      	adds	r4, r7, r6
 8000480:	197a      	adds	r2, r7, r5
 8000482:	4819      	ldr	r0, [pc, #100]	@ (80004e8 <AX5689_Read+0x9c>)
 8000484:	2301      	movs	r3, #1
 8000486:	425b      	negs	r3, r3
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2302      	movs	r3, #2
 800048c:	2172      	movs	r1, #114	@ 0x72
 800048e:	f001 f8e9 	bl	8001664 <HAL_I2C_Master_Transmit>
 8000492:	0003      	movs	r3, r0
 8000494:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 8000496:	19bb      	adds	r3, r7, r6
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d11c      	bne.n	80004d8 <AX5689_Read+0x8c>
        // 接收数据
        status = HAL_I2C_Master_Receive(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 800049e:	19bc      	adds	r4, r7, r6
 80004a0:	197a      	adds	r2, r7, r5
 80004a2:	4811      	ldr	r0, [pc, #68]	@ (80004e8 <AX5689_Read+0x9c>)
 80004a4:	2301      	movs	r3, #1
 80004a6:	425b      	negs	r3, r3
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2302      	movs	r3, #2
 80004ac:	2172      	movs	r1, #114	@ 0x72
 80004ae:	f001 fa03 	bl	80018b8 <HAL_I2C_Master_Receive>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 80004b6:	19bb      	adds	r3, r7, r6
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10c      	bne.n	80004d8 <AX5689_Read+0x8c>
            *data = ((uint16_t)buffer[0] << 8) | (uint16_t)buffer[1];
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b21b      	sxth	r3, r3
 80004c4:	021b      	lsls	r3, r3, #8
 80004c6:	b21a      	sxth	r2, r3
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	785b      	ldrb	r3, [r3, #1]
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b21b      	sxth	r3, r3
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	801a      	strh	r2, [r3, #0]
        }
    }
    return status;
 80004d8:	230f      	movs	r3, #15
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	781b      	ldrb	r3, [r3, #0]
}
 80004de:	0018      	movs	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b005      	add	sp, #20
 80004e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	20000028 	.word	0x20000028

080004ec <AX5689_Write>:
 * @brief  向AX5689寄存器写入16位数据.
 * @param  regAddr: 寄存器地址.
 * @param  regVal: 要写入的16位数据.
 * @retval HAL status.
 */
HAL_StatusTypeDef AX5689_Write(uint16_t regAddr, uint16_t regVal) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	801a      	strh	r2, [r3, #0]
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status;
    uint8_t data[4];

    // 格式化数据: [RegAddr_MSB, RegAddr_LSB, Data_MSB, Data_LSB]
    data[0] = (regAddr >> 8) & 0xFF;
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	b29b      	uxth	r3, r3
 8000506:	b2da      	uxtb	r2, r3
 8000508:	2108      	movs	r1, #8
 800050a:	187b      	adds	r3, r7, r1
 800050c:	701a      	strb	r2, [r3, #0]
    data[1] = regAddr & 0xFF;
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b2da      	uxtb	r2, r3
 8000514:	187b      	adds	r3, r7, r1
 8000516:	705a      	strb	r2, [r3, #1]
    data[2] = (regVal >> 8) & 0xFF;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	b29b      	uxth	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	187b      	adds	r3, r7, r1
 8000524:	709a      	strb	r2, [r3, #2]
    data[3] = regVal & 0xFF;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	187b      	adds	r3, r7, r1
 800052e:	70da      	strb	r2, [r3, #3]

    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, data, 4, HAL_MAX_DELAY);
 8000530:	250f      	movs	r5, #15
 8000532:	197c      	adds	r4, r7, r5
 8000534:	187a      	adds	r2, r7, r1
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <AX5689_Write+0x6c>)
 8000538:	2301      	movs	r3, #1
 800053a:	425b      	negs	r3, r3
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2304      	movs	r3, #4
 8000540:	2172      	movs	r1, #114	@ 0x72
 8000542:	f001 f88f 	bl	8001664 <HAL_I2C_Master_Transmit>
 8000546:	0003      	movs	r3, r0
 8000548:	7023      	strb	r3, [r4, #0]
    return status;
 800054a:	197b      	adds	r3, r7, r5
 800054c:	781b      	ldrb	r3, [r3, #0]
}
 800054e:	0018      	movs	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	b004      	add	sp, #16
 8000554:	bdb0      	pop	{r4, r5, r7, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	20000028 	.word	0x20000028

0800055c <AX5689_WriteRegisterSet>:

/**
 * @brief  将寄存器配置数组写入AX5689.
 * @param  ptrConfigArray: 指向配置数组的指针.
 */
void AX5689_WriteRegisterSet(const uint16_t *ptrConfigArray) {
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    // 循环直到遇到数组结束命令0xFFFF
    while (*ptrConfigArray != 0xFFFF) {
 8000564:	e01f      	b.n	80005a6 <AX5689_WriteRegisterSet+0x4a>
        uint16_t regAddr = ptrConfigArray[0];
 8000566:	210e      	movs	r1, #14
 8000568:	187b      	adds	r3, r7, r1
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	8812      	ldrh	r2, [r2, #0]
 800056e:	801a      	strh	r2, [r3, #0]
        uint16_t regVal = ptrConfigArray[1];
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	1c9a      	adds	r2, r3, #2
 8000574:	200c      	movs	r0, #12
 8000576:	183b      	adds	r3, r7, r0
 8000578:	8812      	ldrh	r2, [r2, #0]
 800057a:	801a      	strh	r2, [r3, #0]
        if (AX5689_Write(regAddr, regVal) != HAL_OK) {
 800057c:	183b      	adds	r3, r7, r0
 800057e:	881a      	ldrh	r2, [r3, #0]
 8000580:	000c      	movs	r4, r1
 8000582:	187b      	adds	r3, r7, r1
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f7ff ffaf 	bl	80004ec <AX5689_Write>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d006      	beq.n	80005a0 <AX5689_WriteRegisterSet+0x44>
            RTT_printf("Error writing register 0x%04X\r\n", regAddr);
 8000592:	193b      	adds	r3, r7, r4
 8000594:	881a      	ldrh	r2, [r3, #0]
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <AX5689_WriteRegisterSet+0x60>)
 8000598:	0019      	movs	r1, r3
 800059a:	2000      	movs	r0, #0
 800059c:	f004 f836 	bl	800460c <SEGGER_RTT_printf>
            // 可以加入错误处理
        }
        ptrConfigArray += 2; // 移动到数组中的下一个地址/数据对
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3304      	adds	r3, #4
 80005a4:	607b      	str	r3, [r7, #4]
    while (*ptrConfigArray != 0xFFFF) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <AX5689_WriteRegisterSet+0x64>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d1da      	bne.n	8000566 <AX5689_WriteRegisterSet+0xa>
    }
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b005      	add	sp, #20
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	080046d8 	.word	0x080046d8
 80005c0:	0000ffff 	.word	0x0000ffff

080005c4 <AX5689_Setup>:

/**
 * @brief  设置AX5689控制器.
 * @note   根据PDF Step 4: Setup the AX5688/AX5689.
 */
void AX5689_Setup(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    // 使能AX5689控制器 (AX_Reset_N_Pin -> PA8)
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_SET);
 80005c8:	23a0      	movs	r3, #160	@ 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 ff83 	bl	80014dc <HAL_GPIO_WritePin>
    RTT_printf("AX5689 Enabled (Reset pin HIGH).\r\n");
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <AX5689_Setup+0x54>)
 80005d8:	0019      	movs	r1, r3
 80005da:	2000      	movs	r0, #0
 80005dc:	f004 f816 	bl	800460c <SEGGER_RTT_printf>

    // 等待芯片稳定
    HAL_Delay(500);
 80005e0:	23fa      	movs	r3, #250	@ 0xfa
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fd1f 	bl	8001028 <HAL_Delay>

    // 从您的头文件写入寄存器设置
    RTT_printf("Writing register settings...\r\n");
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <AX5689_Setup+0x58>)
 80005ec:	0019      	movs	r1, r3
 80005ee:	2000      	movs	r0, #0
 80005f0:	f004 f80c 	bl	800460c <SEGGER_RTT_printf>
    AX5689_WriteRegisterSet(&amplifierCommands[0]);
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <AX5689_Setup+0x5c>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ffb0 	bl	800055c <AX5689_WriteRegisterSet>
    RTT_printf("Register settings written.\r\n");
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <AX5689_Setup+0x60>)
 80005fe:	0019      	movs	r1, r3
 8000600:	2000      	movs	r0, #0
 8000602:	f004 f803 	bl	800460c <SEGGER_RTT_printf>

    // 系统稳定时间
    HAL_Delay(500);
 8000606:	23fa      	movs	r3, #250	@ 0xfa
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fd0c 	bl	8001028 <HAL_Delay>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	080046f8 	.word	0x080046f8
 800061c:	0800471c 	.word	0x0800471c
 8000620:	080048bc 	.word	0x080048bc
 8000624:	0800473c 	.word	0x0800473c

08000628 <StartControlLoop>:

void StartControlLoop(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    RTT_printf("Starting control loop...\r\n");
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <StartControlLoop+0x7c>)
 800062e:	0019      	movs	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f003 ffeb 	bl	800460c <SEGGER_RTT_printf>

    // 禁用所有环路滤波器和PWM调制器
    AX5689_Write(0x0001, REG01_VALUE_DEFAULT);
 8000636:	23ff      	movs	r3, #255	@ 0xff
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	0019      	movs	r1, r3
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff ff55 	bl	80004ec <AX5689_Write>
    // 设置音量斜坡时间为快速
    AX5689_Write(0x0007, REG07_VALUE);
 8000642:	2101      	movs	r1, #1
 8000644:	2007      	movs	r0, #7
 8000646:	f7ff ff51 	bl	80004ec <AX5689_Write>
    // 设置PSTART为高电平以使能电源级
    AX5689_Write(0x0002, REG02_PSTART_ENABLE);
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <StartControlLoop+0x80>)
 800064c:	0019      	movs	r1, r3
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff4c 	bl	80004ec <AX5689_Write>
    // 使能所有环路滤波器和PWM调制器
    AX5689_Write(0x0001, REG01_VALUE);
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <StartControlLoop+0x84>)
 8000656:	0019      	movs	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff47 	bl	80004ec <AX5689_Write>
    // 使能外部ADC反馈
    AX5689_Write(0x0003, REG03_VALUE);
 800065e:	23aa      	movs	r3, #170	@ 0xaa
 8000660:	01db      	lsls	r3, r3, #7
 8000662:	0019      	movs	r1, r3
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff ff41 	bl	80004ec <AX5689_Write>

    HAL_Delay(1);
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fcdc 	bl	8001028 <HAL_Delay>

    // 取消静音 (AX_Mute_N_Pin -> PC6)
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_SET);
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <StartControlLoop+0x88>)
 8000672:	2201      	movs	r2, #1
 8000674:	2101      	movs	r1, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f000 ff30 	bl	80014dc <HAL_GPIO_WritePin>
    RTT_printf("Amplifier Unmuted.\r\n");
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <StartControlLoop+0x8c>)
 800067e:	0019      	movs	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f003 ffc3 	bl	800460c <SEGGER_RTT_printf>

    // 等待音量斜坡上升
    HAL_Delay(20);
 8000686:	2014      	movs	r0, #20
 8000688:	f000 fcce 	bl	8001028 <HAL_Delay>

    // 将音量斜坡时间设回默认值
    AX5689_Write(0x0007, REG07_VALUE_DEFAULT);
 800068c:	2164      	movs	r1, #100	@ 0x64
 800068e:	2007      	movs	r0, #7
 8000690:	f7ff ff2c 	bl	80004ec <AX5689_Write>
    RTT_printf("Control loop started.\r\n");
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <StartControlLoop+0x90>)
 8000696:	0019      	movs	r1, r3
 8000698:	2000      	movs	r0, #0
 800069a:	f003 ffb7 	bl	800460c <SEGGER_RTT_printf>
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800475c 	.word	0x0800475c
 80006a8:	00001fff 	.word	0x00001fff
 80006ac:	0000ffff 	.word	0x0000ffff
 80006b0:	50000800 	.word	0x50000800
 80006b4:	08004778 	.word	0x08004778
 80006b8:	08004790 	.word	0x08004790

080006bc <StopControlLoop>:

/**
 * @brief  停止Axign控制循环.
 * @note   严格遵循PDF P16的流程以最小化关机pop噪音.
 */
void StopControlLoop(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    RTT_printf("Stopping control loop...\r\n");
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <StopControlLoop+0x74>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f003 ffa1 	bl	800460c <SEGGER_RTT_printf>

    // 设置音量斜坡时间为快速
    AX5689_Write(0x0007, REG07_VALUE);
 80006ca:	2101      	movs	r1, #1
 80006cc:	2007      	movs	r0, #7
 80006ce:	f7ff ff0d 	bl	80004ec <AX5689_Write>
    // 功放静音 (AX_Mute_N_Pin -> PC6)
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <StopControlLoop+0x78>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 feff 	bl	80014dc <HAL_GPIO_WritePin>
    RTT_printf("Amplifier Muted.\r\n");
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <StopControlLoop+0x7c>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	2000      	movs	r0, #0
 80006e4:	f003 ff92 	bl	800460c <SEGGER_RTT_printf>

    // 等待音量斜坡下降
    HAL_Delay(20);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f000 fc9d 	bl	8001028 <HAL_Delay>

    // 设置PSTART为低电平以禁用电源级
    AX5689_Write(0x0002, REG02_PSTART_DISABLE);
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <StopControlLoop+0x80>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff fefa 	bl	80004ec <AX5689_Write>
    // 等待三态变为低电平
    HAL_Delay(20);
 80006f8:	2014      	movs	r0, #20
 80006fa:	f000 fc95 	bl	8001028 <HAL_Delay>

    // 禁用/复位所有环路滤波器和PWM调制器
    AX5689_Write(0x0001, REG01_VALUE_DEFAULT);
 80006fe:	23ff      	movs	r3, #255	@ 0xff
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	0019      	movs	r1, r3
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff fef1 	bl	80004ec <AX5689_Write>
    // 设置音量斜坡时间为默认值
    AX5689_Write(0x0007, REG07_VALUE_DEFAULT);
 800070a:	2164      	movs	r1, #100	@ 0x64
 800070c:	2007      	movs	r0, #7
 800070e:	f7ff feed 	bl	80004ec <AX5689_Write>
    // 将所有斜坡设回其值
    AX5689_Write(0x0003, REG03_VALUE_DEFAULT);
 8000712:	2100      	movs	r1, #0
 8000714:	2003      	movs	r0, #3
 8000716:	f7ff fee9 	bl	80004ec <AX5689_Write>

    // 清除状态寄存器
    clearStatusRegisters();
 800071a:	f000 f813 	bl	8000744 <clearStatusRegisters>
    RTT_printf("Control loop stopped.\r\n");
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <StopControlLoop+0x84>)
 8000720:	0019      	movs	r1, r3
 8000722:	2000      	movs	r0, #0
 8000724:	f003 ff72 	bl	800460c <SEGGER_RTT_printf>
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	080047a8 	.word	0x080047a8
 8000734:	50000800 	.word	0x50000800
 8000738:	080047c4 	.word	0x080047c4
 800073c:	000017ff 	.word	0x000017ff
 8000740:	080047d8 	.word	0x080047d8

08000744 <clearStatusRegisters>:

/**
 * @brief 
 */
void clearStatusRegisters(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    uint16_t temp;
    AX5689_Read(60, &temp);
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	0019      	movs	r1, r3
 800074e:	203c      	movs	r0, #60	@ 0x3c
 8000750:	f7ff fe7c 	bl	800044c <AX5689_Read>
    AX5689_Read(61, &temp);
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	0019      	movs	r1, r3
 8000758:	203d      	movs	r0, #61	@ 0x3d
 800075a:	f7ff fe77 	bl	800044c <AX5689_Read>
    AX5689_Read(62, &temp);
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	0019      	movs	r1, r3
 8000762:	203e      	movs	r0, #62	@ 0x3e
 8000764:	f7ff fe72 	bl	800044c <AX5689_Read>
    RTT_printf("Status registers cleared.\r\n");
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <clearStatusRegisters+0x38>)
 800076a:	0019      	movs	r1, r3
 800076c:	2000      	movs	r0, #0
 800076e:	f003 ff4d 	bl	800460c <SEGGER_RTT_printf>
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	080047f0 	.word	0x080047f0

08000780 <checkStatusRegister>:

/**
 * @brief 检查AX5689的状态寄存器并在发生故障时处理.
 * @note  此函数应在主循环中定期调用.
 */
void checkStatusRegister(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
    // 假设AX_STATUS连接到MCU的某个输入引脚 (例如 PA10)
    // if (HAL_GPIO_ReadPin(AX_STATUS_GPIO_Port, AX_STATUS_Pin) == GPIO_PIN_SET) {
    // 简单的轮询实现
    uint16_t reg62val;
    if (AX5689_Read(62, &reg62val) == HAL_OK) {
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	0019      	movs	r1, r3
 800078a:	203e      	movs	r0, #62	@ 0x3e
 800078c:	f7ff fe5e 	bl	800044c <AX5689_Read>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d134      	bne.n	80007fe <checkStatusRegister+0x7e>
        // 检查 sys_fault 位 (bit 5)
        if ((reg62val & (1 << 5)) > 0) {
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	2320      	movs	r3, #32
 800079c:	4013      	ands	r3, r2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dd2d      	ble.n	80007fe <checkStatusRegister+0x7e>
            RTT_printf("System fault detected! Restarting control loop.\r\n");
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <checkStatusRegister+0x88>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	2000      	movs	r0, #0
 80007a8:	f003 ff30 	bl	800460c <SEGGER_RTT_printf>

            // 停止控制循环
            StopControlLoop();
 80007ac:	f7ff ff86 	bl	80006bc <StopControlLoop>

            // 根据PDF P17, 复位PFAULT_N掩码以清除PSTART锁存
            AX5689_Write(56, REG56_RESET_VALUE);
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <checkStatusRegister+0x8c>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	2038      	movs	r0, #56	@ 0x38
 80007b6:	f7ff fe99 	bl	80004ec <AX5689_Write>
            // 将PFAULT_N掩码设置回粘滞模式
            AX5689_Write(56, REG56_VALUE);
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <checkStatusRegister+0x90>)
 80007bc:	0019      	movs	r1, r3
 80007be:	2038      	movs	r0, #56	@ 0x38
 80007c0:	f7ff fe94 	bl	80004ec <AX5689_Write>

            // 清除状态寄存器
            clearStatusRegisters();
 80007c4:	f7ff ffbe 	bl	8000744 <clearStatusRegisters>

            // 等待电源级在故障后稳定
            HAL_Delay(100);
 80007c8:	2064      	movs	r0, #100	@ 0x64
 80007ca:	f000 fc2d 	bl	8001028 <HAL_Delay>

            // 重新检查故障位是否已清除
            AX5689_Read(62, &reg62val);
 80007ce:	1dbb      	adds	r3, r7, #6
 80007d0:	0019      	movs	r1, r3
 80007d2:	203e      	movs	r0, #62	@ 0x3e
 80007d4:	f7ff fe3a 	bl	800044c <AX5689_Read>
            if ((reg62val & (1 << 5)) == 0) {
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	001a      	movs	r2, r3
 80007de:	2320      	movs	r3, #32
 80007e0:	4013      	ands	r3, r2
 80007e2:	d107      	bne.n	80007f4 <checkStatusRegister+0x74>
                 RTT_printf("Fault cleared. Restarting...\r\n");
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <checkStatusRegister+0x94>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	2000      	movs	r0, #0
 80007ea:	f003 ff0f 	bl	800460c <SEGGER_RTT_printf>
                 StartControlLoop();
 80007ee:	f7ff ff1b 	bl	8000628 <StartControlLoop>
                 RTT_printf("Fault persists. System halted.\r\n");
                 // 在这里可以执行永久性关机或错误指示
            }
        }
    }
}
 80007f2:	e004      	b.n	80007fe <checkStatusRegister+0x7e>
                 RTT_printf("Fault persists. System halted.\r\n");
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <checkStatusRegister+0x98>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	2000      	movs	r0, #0
 80007fa:	f003 ff07 	bl	800460c <SEGGER_RTT_printf>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	0800480c 	.word	0x0800480c
 800080c:	00000435 	.word	0x00000435
 8000810:	00000c35 	.word	0x00000c35
 8000814:	08004840 	.word	0x08004840
 8000818:	08004860 	.word	0x08004860

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fb7c 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f81c 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f93e 	bl	8000aa8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800082c:	f000 f870 	bl	8000910 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000830:	f000 f8ae 	bl	8000990 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000834:	f000 f8ea 	bl	8000a0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // 初始化AX5689相关IO和RTT
  IO_Init();
 8000838:	f7ff fde0 	bl	80003fc <IO_Init>
  
  // 设置和启动AX5689
  AX5689_Setup();
 800083c:	f7ff fec2 	bl	80005c4 <AX5689_Setup>
  StartControlLoop();
 8000840:	f7ff fef2 	bl	8000628 <StartControlLoop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // 发送一个简单的RTT测试消息
  SEGGER_RTT_WriteString(0, "Main loop started - RTT working!\r\n");
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <main+0x40>)
 8000846:	0019      	movs	r1, r3
 8000848:	2000      	movs	r0, #0
 800084a:	f003 fb39 	bl	8003ec0 <SEGGER_RTT_WriteString>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // 在主循环中定期检查状态寄存器以处理故障
    checkStatusRegister();
 800084e:	f7ff ff97 	bl	8000780 <checkStatusRegister>
    
    HAL_Delay(100); // 轮询间隔
 8000852:	2064      	movs	r0, #100	@ 0x64
 8000854:	f000 fbe8 	bl	8001028 <HAL_Delay>
    checkStatusRegister();
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	e7f8      	b.n	800084e <main+0x32>
 800085c:	08004884 	.word	0x08004884

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b093      	sub	sp, #76	@ 0x4c
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	2410      	movs	r4, #16
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2338      	movs	r3, #56	@ 0x38
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f003 fee4 	bl	800463e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	2310      	movs	r3, #16
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f003 fedd 	bl	800463e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fc89 	bl	80021a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	0252      	lsls	r2, r2, #9
 800089a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2203      	movs	r2, #3
 80008a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2210      	movs	r2, #16
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	0292      	lsls	r2, r2, #10
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	0492      	lsls	r2, r2, #18
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	0592      	lsls	r2, r2, #22
 80008cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fcb1 	bl	8002238 <HAL_RCC_OscConfig>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008da:	f000 f999 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	003b      	movs	r3, r7
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2202      	movs	r2, #2
 80008e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f6:	003b      	movs	r3, r7
 80008f8:	2102      	movs	r1, #2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 ffb6 	bl	800286c <HAL_RCC_ClockConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000904:	f000 f984 	bl	8000c10 <Error_Handler>
  }
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b013      	add	sp, #76	@ 0x4c
 800090e:	bd90      	pop	{r4, r7, pc}

08000910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <MX_I2C2_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <MX_I2C2_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <MX_I2C2_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C2_Init+0x74>)
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fde3 	bl	8001518 <HAL_I2C_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 f95b 	bl	8000c10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C2_Init+0x74>)
 800095c:	2100      	movs	r1, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fb86 	bl	8002070 <HAL_I2CEx_ConfigAnalogFilter>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 f952 	bl	8000c10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <MX_I2C2_Init+0x74>)
 800096e:	2100      	movs	r1, #0
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fbc9 	bl	8002108 <HAL_I2CEx_ConfigDigitalFilter>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f949 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000028 	.word	0x20000028
 8000988:	40005800 	.word	0x40005800
 800098c:	00503d58 	.word	0x00503d58

08000990 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_SPI2_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_SPI2_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_SPI2_Init+0x74>)
 800099c:	2282      	movs	r2, #130	@ 0x82
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009aa:	22c0      	movs	r2, #192	@ 0xc0
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009be:	2280      	movs	r2, #128	@ 0x80
 80009c0:	02d2      	lsls	r2, r2, #11
 80009c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <MX_SPI2_Init+0x74>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fa6d 	bl	8002ed0 <HAL_SPI_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f909 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000007c 	.word	0x2000007c
 8000a08:	40003800 	.word	0x40003800

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a12:	4a24      	ldr	r2, [pc, #144]	@ (8000aa4 <MX_USART1_UART_Init+0x98>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a18:	22e1      	movs	r2, #225	@ 0xe1
 8000a1a:	0252      	lsls	r2, r2, #9
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 faf2 	bl	8003040 <HAL_UART_Init>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f8d6 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 ff8f 	bl	800398c <HAL_UARTEx_SetTxFifoThreshold>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f8cd 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a78:	2100      	movs	r1, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 ffc6 	bl	8003a0c <HAL_UARTEx_SetRxFifoThreshold>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f8c4 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <MX_USART1_UART_Init+0x94>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 ff44 	bl	8003918 <HAL_UARTEx_DisableFifoMode>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f8bc 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	200000e0 	.word	0x200000e0
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	@ 0x2c
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	2414      	movs	r4, #20
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2314      	movs	r3, #20
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f003 fdc0 	bl	800463e <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b51      	ldr	r3, [pc, #324]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac2:	4b50      	ldr	r3, [pc, #320]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aca:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ace:	2204      	movs	r2, #4
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ada:	4b4a      	ldr	r3, [pc, #296]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000adc:	2120      	movs	r1, #32
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae2:	4b48      	ldr	r3, [pc, #288]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b45      	ldr	r3, [pc, #276]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000af2:	4b44      	ldr	r3, [pc, #272]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afa:	4b42      	ldr	r3, [pc, #264]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b3f      	ldr	r3, [pc, #252]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b12:	4b3c      	ldr	r3, [pc, #240]	@ (8000c04 <MX_GPIO_Init+0x15c>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b16:	2202      	movs	r2, #2
 8000b18:	4013      	ands	r3, r2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000b1e:	493a      	ldr	r1, [pc, #232]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000b20:	4b3a      	ldr	r3, [pc, #232]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 fcd9 	bl	80014dc <HAL_GPIO_WritePin>
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AX_Reset_N_Pin|AX_State_Pin|PVDD_EN_Pin|LED_Display_CS_Pin
 8000b2a:	2398      	movs	r3, #152	@ 0x98
 8000b2c:	33ff      	adds	r3, #255	@ 0xff
 8000b2e:	0019      	movs	r1, r3
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	2200      	movs	r2, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f000 fcd0 	bl	80014dc <HAL_GPIO_WritePin>
                          |LED_Display_Data_Pin|MCU_Pstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D1V2_EN_Pin AX_3V3_Pin AX_5V_Pin D5V2_EN_Pin
                           AX_Mute_N_Pin LED_ON_OFF_Pin */
  GPIO_InitStruct.Pin = D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <MX_GPIO_Init+0x160>)
 8000b40:	601a      	str	r2, [r3, #0]
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2201      	movs	r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	4a2d      	ldr	r2, [pc, #180]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0010      	movs	r0, r2
 8000b5c:	f000 fb52 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : AX_Reset_N_Pin AX_State_Pin */
  GPIO_InitStruct.Pin = AX_Reset_N_Pin|AX_State_Pin;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2203      	movs	r2, #3
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2211      	movs	r2, #17
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	193a      	adds	r2, r7, r4
 8000b7a:	23a0      	movs	r3, #160	@ 0xa0
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 fb3f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PVDD_EN_Pin LED_Display_CS_Pin LED_Display_Data_Pin MCU_Pstart_Pin */
  GPIO_InitStruct.Pin = PVDD_EN_Pin|LED_Display_CS_Pin|LED_Display_Data_Pin|MCU_Pstart_Pin;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	22ca      	movs	r2, #202	@ 0xca
 8000b8c:	0052      	lsls	r2, r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	000c      	movs	r4, r1
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2201      	movs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	193a      	adds	r2, r7, r4
 8000ba6:	23a0      	movs	r3, #160	@ 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fb29 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Display_CLK_Pin */
  GPIO_InitStruct.Pin = LED_Display_CLK_Pin;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2220      	movs	r2, #32
 8000bb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_Display_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	193a      	adds	r2, r7, r4
 8000bc6:	23a0      	movs	r3, #160	@ 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	0011      	movs	r1, r2
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fb19 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = GPIO_PIN_8; // 选择要配置的引脚
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // 设置为推挽输出模式
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2201      	movs	r2, #1
 8000be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 推挽模式下不需要内部上下拉
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // 设置为低速，因为我们只是输出一个静态电平
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); // 应用以上配置到GPIOC端口
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <MX_GPIO_Init+0x164>)
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	0010      	movs	r0, r2
 8000bf6:	f000 fb05 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b00b      	add	sp, #44	@ 0x2c
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	40021000 	.word	0x40021000
 8000c08:	00007901 	.word	0x00007901
 8000c0c:	50000800 	.word	0x50000800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	e7fd      	b.n	8000c18 <Error_Handler+0x8>

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	0549      	lsls	r1, r1, #21
 8000c44:	430a      	orrs	r2, r1
 8000c46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_MspInit+0x4c>)
 8000c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	055b      	lsls	r3, r3, #21
 8000c50:	4013      	ands	r3, r2
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c56:	23c0      	movs	r3, #192	@ 0xc0
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fa08 	bl	8001070 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b095      	sub	sp, #84	@ 0x54
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	233c      	movs	r3, #60	@ 0x3c
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f003 fcdd 	bl	800463e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	2410      	movs	r4, #16
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	232c      	movs	r3, #44	@ 0x2c
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f003 fcd5 	bl	800463e <memset>
  if(hi2c->Instance==I2C2)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <HAL_I2C_MspInit+0xb8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d13d      	bne.n	8000d1a <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2240      	movs	r2, #64	@ 0x40
 8000ca2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 ff87 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff ffab 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB3     ------> I2C2_SCL
    PB4     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000cd2:	213c      	movs	r1, #60	@ 0x3c
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2218      	movs	r2, #24
 8000cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2212      	movs	r2, #18
 8000cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2208      	movs	r2, #8
 8000cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <HAL_I2C_MspInit+0xc0>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	0010      	movs	r0, r2
 8000cfa:	f000 fa83 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	03c9      	lsls	r1, r1, #15
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_I2C_MspInit+0xbc>)
 8000d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	03db      	lsls	r3, r3, #15
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b015      	add	sp, #84	@ 0x54
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	40005800 	.word	0x40005800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	50000400 	.word	0x50000400

08000d30 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2414      	movs	r4, #20
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f003 fc7b 	bl	800463e <memset>
  if(hspi->Instance==SPI2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d130      	bne.n	8000db4 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d52:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d74:	2102      	movs	r1, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <HAL_SPI_MspInit+0x90>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	22f0      	movs	r2, #240	@ 0xf0
 8000d8a:	0212      	lsls	r2, r2, #8
 8000d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	0021      	movs	r1, r4
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_SPI_MspInit+0x94>)
 8000dac:	0019      	movs	r1, r3
 8000dae:	0010      	movs	r0, r2
 8000db0:	f000 fa28 	bl	8001204 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b00b      	add	sp, #44	@ 0x2c
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	40003800 	.word	0x40003800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	50000400 	.word	0x50000400

08000dc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b095      	sub	sp, #84	@ 0x54
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	233c      	movs	r3, #60	@ 0x3c
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f003 fc2f 	bl	800463e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	2410      	movs	r4, #16
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	232c      	movs	r3, #44	@ 0x2c
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fc27 	bl	800463e <memset>
  if(huart->Instance==USART1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <HAL_UART_MspInit+0xbc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13f      	bne.n	8000e7a <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f001 fed9 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	1e03      	subs	r3, r0, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff fefd 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	01c9      	lsls	r1, r1, #7
 8000e20:	430a      	orrs	r2, r1
 8000e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e24:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_UART_MspInit+0xc0>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4a:	213c      	movs	r1, #60	@ 0x3c
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	22c0      	movs	r2, #192	@ 0xc0
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2202      	movs	r2, #2
 8000e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2201      	movs	r2, #1
 8000e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	187a      	adds	r2, r7, r1
 8000e6e:	23a0      	movs	r3, #160	@ 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 f9c5 	bl	8001204 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b015      	add	sp, #84	@ 0x54
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40013800 	.word	0x40013800
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f89c 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ecc:	f7ff fff7 	bl	8000ebe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed2:	490d      	ldr	r1, [pc, #52]	@ (8000f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <LoopForever+0xe>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f14 <LoopForever+0x16>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef6:	f003 fbab 	bl	8004650 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000efa:	f7ff fc8f 	bl	800081c <main>

08000efe <LoopForever>:

LoopForever:
  b LoopForever
 8000efe:	e7fe      	b.n	8000efe <LoopForever>
  ldr   r0, =_estack
 8000f00:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f0c:	08004ef4 	.word	0x08004ef4
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f14:	20000630 	.word	0x20000630

08000f18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_Init+0x3c>)
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	0049      	lsls	r1, r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f810 	bl	8000f5c <HAL_InitTick>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e001      	b.n	8000f4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe68 	bl	8000c1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <HAL_InitTick+0x88>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d02b      	beq.n	8000fcc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f74:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_InitTick+0x8c>)
 8000f76:	681c      	ldr	r4, [r3, #0]
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_InitTick+0x88>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	23fa      	movs	r3, #250	@ 0xfa
 8000f80:	0098      	lsls	r0, r3, #2
 8000f82:	f7ff f8c5 	bl	8000110 <__udivsi3>
 8000f86:	0003      	movs	r3, r0
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0020      	movs	r0, r4
 8000f8c:	f7ff f8c0 	bl	8000110 <__udivsi3>
 8000f90:	0003      	movs	r3, r0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f929 	bl	80011ea <HAL_SYSTICK_Config>
 8000f98:	1e03      	subs	r3, r0, #0
 8000f9a:	d112      	bne.n	8000fc2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d80a      	bhi.n	8000fb8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	425b      	negs	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 f908 	bl	80011c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_InitTick+0x90>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00d      	b.n	8000fd4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e008      	b.n	8000fd4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e003      	b.n	8000fd4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	230f      	movs	r3, #15
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
}
 8000fda:	0018      	movs	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b005      	add	sp, #20
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	18d2      	adds	r2, r2, r3
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_IncTick+0x20>)
 8001002:	601a      	str	r2, [r3, #0]
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000008 	.word	0x20000008
 8001010:	20000174 	.word	0x20000174

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	20000174 	.word	0x20000174

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3301      	adds	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	001a      	movs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	189b      	adds	r3, r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	46c0      	nop			@ (mov r8, r8)
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800107e:	4013      	ands	r3, r2
 8001080:	0019      	movs	r1, r3
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	40010000 	.word	0x40010000
 8001098:	fffff9ff 	.word	0xfffff9ff

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	0002      	movs	r2, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80010b0:	d828      	bhi.n	8001104 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001170 <__NVIC_SetPriority+0xd4>)
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	33c0      	adds	r3, #192	@ 0xc0
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	589b      	ldr	r3, [r3, r2]
 80010c2:	1dfa      	adds	r2, r7, #7
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	0011      	movs	r1, r2
 80010c8:	2203      	movs	r2, #3
 80010ca:	400a      	ands	r2, r1
 80010cc:	00d2      	lsls	r2, r2, #3
 80010ce:	21ff      	movs	r1, #255	@ 0xff
 80010d0:	4091      	lsls	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	43d2      	mvns	r2, r2
 80010d6:	401a      	ands	r2, r3
 80010d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	019b      	lsls	r3, r3, #6
 80010de:	22ff      	movs	r2, #255	@ 0xff
 80010e0:	401a      	ands	r2, r3
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0018      	movs	r0, r3
 80010e8:	2303      	movs	r3, #3
 80010ea:	4003      	ands	r3, r0
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f0:	481f      	ldr	r0, [pc, #124]	@ (8001170 <__NVIC_SetPriority+0xd4>)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	430a      	orrs	r2, r1
 80010fc:	33c0      	adds	r3, #192	@ 0xc0
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001102:	e031      	b.n	8001168 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <__NVIC_SetPriority+0xd8>)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	0019      	movs	r1, r3
 800110c:	230f      	movs	r3, #15
 800110e:	400b      	ands	r3, r1
 8001110:	3b08      	subs	r3, #8
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3306      	adds	r3, #6
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	3304      	adds	r3, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1dfa      	adds	r2, r7, #7
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	0011      	movs	r1, r2
 8001124:	2203      	movs	r2, #3
 8001126:	400a      	ands	r2, r1
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	21ff      	movs	r1, #255	@ 0xff
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	43d2      	mvns	r2, r2
 8001132:	401a      	ands	r2, r3
 8001134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	22ff      	movs	r2, #255	@ 0xff
 800113c:	401a      	ands	r2, r3
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	0018      	movs	r0, r3
 8001144:	2303      	movs	r3, #3
 8001146:	4003      	ands	r3, r0
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	4809      	ldr	r0, [pc, #36]	@ (8001174 <__NVIC_SetPriority+0xd8>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	001c      	movs	r4, r3
 8001154:	230f      	movs	r3, #15
 8001156:	4023      	ands	r3, r4
 8001158:	3b08      	subs	r3, #8
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	430a      	orrs	r2, r1
 800115e:	3306      	adds	r3, #6
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	18c3      	adds	r3, r0, r3
 8001164:	3304      	adds	r3, #4
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b003      	add	sp, #12
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	045b      	lsls	r3, r3, #17
 8001188:	429a      	cmp	r2, r3
 800118a:	d301      	bcc.n	8001190 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118c:	2301      	movs	r3, #1
 800118e:	e010      	b.n	80011b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <SysTick_Config+0x44>)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	3a01      	subs	r2, #1
 8001196:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001198:	2301      	movs	r3, #1
 800119a:	425b      	negs	r3, r3
 800119c:	2103      	movs	r1, #3
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff ff7c 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <SysTick_Config+0x44>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <SysTick_Config+0x44>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	210f      	movs	r1, #15
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	1c02      	adds	r2, r0, #0
 80011d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ffbf 	bl	8001178 <SysTick_Config>
 80011fa:	0003      	movs	r3, r0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e14d      	b.n	80014b0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x28>
 800122a:	e13e      	b.n	80014aa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	2b01      	cmp	r3, #1
 8001236:	d005      	beq.n	8001244 <HAL_GPIO_Init+0x40>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d130      	bne.n	80012a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	409a      	lsls	r2, r3
 8001266:	0013      	movs	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	2201      	movs	r2, #1
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d017      	beq.n	80012e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2203      	movs	r2, #3
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	58d3      	ldr	r3, [r2, r3]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2207      	movs	r2, #7
 8001300:	4013      	ands	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2107      	movs	r1, #7
 800131a:	400b      	ands	r3, r1
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	6939      	ldr	r1, [r7, #16]
 8001334:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	401a      	ands	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	23c0      	movs	r3, #192	@ 0xc0
 8001370:	029b      	lsls	r3, r3, #10
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0x174>
 8001376:	e098      	b.n	80014aa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001378:	4a53      	ldr	r2, [pc, #332]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3318      	adds	r3, #24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	589b      	ldr	r3, [r3, r2]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	220f      	movs	r2, #15
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	23a0      	movs	r3, #160	@ 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x1d6>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <HAL_GPIO_Init+0x2c8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1d2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1ce>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1ca>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	@ (80014d8 <HAL_GPIO_Init+0x2d4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1c6>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013ec:	4936      	ldr	r1, [pc, #216]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3318      	adds	r3, #24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144e:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001450:	2384      	movs	r3, #132	@ 0x84
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001476:	2284      	movs	r2, #132	@ 0x84
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800147c:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	58d3      	ldr	r3, [r2, r3]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4909      	ldr	r1, [pc, #36]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ba>
 80014bc:	e6aa      	b.n	8001214 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021800 	.word	0x40021800
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50000c00 	.word	0x50000c00
 80014d8:	50001000 	.word	0x50001000

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	0008      	movs	r0, r1
 80014e6:	0011      	movs	r1, r2
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	1c02      	adds	r2, r0, #0
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	1c7b      	adds	r3, r7, #1
 80014f0:	1c0a      	adds	r2, r1, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f4:	1c7b      	adds	r3, r7, #1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fc:	1cbb      	adds	r3, r7, #2
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	881a      	ldrh	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e08f      	b.n	800164a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	@ 0x41
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2240      	movs	r2, #64	@ 0x40
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	0018      	movs	r0, r3
 8001542:	f7ff fb93 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2241      	movs	r2, #65	@ 0x41
 800154a:	2124      	movs	r1, #36	@ 0x24
 800154c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	438a      	bics	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	493b      	ldr	r1, [pc, #236]	@ (8001654 <HAL_I2C_Init+0x13c>)
 8001568:	400a      	ands	r2, r1
 800156a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4938      	ldr	r1, [pc, #224]	@ (8001658 <HAL_I2C_Init+0x140>)
 8001578:	400a      	ands	r2, r1
 800157a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d108      	bne.n	8001596 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2180      	movs	r1, #128	@ 0x80
 800158e:	0209      	lsls	r1, r1, #8
 8001590:	430a      	orrs	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e007      	b.n	80015a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2184      	movs	r1, #132	@ 0x84
 80015a0:	0209      	lsls	r1, r1, #8
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d109      	bne.n	80015c2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	0109      	lsls	r1, r1, #4
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	e007      	b.n	80015d2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4923      	ldr	r1, [pc, #140]	@ (800165c <HAL_I2C_Init+0x144>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4920      	ldr	r1, [pc, #128]	@ (8001660 <HAL_I2C_Init+0x148>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	491a      	ldr	r1, [pc, #104]	@ (8001658 <HAL_I2C_Init+0x140>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69d9      	ldr	r1, [r3, #28]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2101      	movs	r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2241      	movs	r2, #65	@ 0x41
 8001636:	2120      	movs	r1, #32
 8001638:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2242      	movs	r2, #66	@ 0x42
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	f0ffffff 	.word	0xf0ffffff
 8001658:	ffff7fff 	.word	0xffff7fff
 800165c:	fffff7ff 	.word	0xfffff7ff
 8001660:	02008000 	.word	0x02008000

08001664 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	0008      	movs	r0, r1
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	0019      	movs	r1, r3
 8001672:	230a      	movs	r3, #10
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	1c02      	adds	r2, r0, #0
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	2308      	movs	r3, #8
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	1c0a      	adds	r2, r1, #0
 8001680:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2241      	movs	r2, #65	@ 0x41
 8001686:	5c9b      	ldrb	r3, [r3, r2]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b20      	cmp	r3, #32
 800168c:	d000      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x2c>
 800168e:	e10a      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2240      	movs	r2, #64	@ 0x40
 8001694:	5c9b      	ldrb	r3, [r3, r2]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_I2C_Master_Transmit+0x3a>
 800169a:	2302      	movs	r3, #2
 800169c:	e104      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2240      	movs	r2, #64	@ 0x40
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a6:	f7ff fcb5 	bl	8001014 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	0219      	lsls	r1, r3, #8
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2319      	movs	r3, #25
 80016ba:	2201      	movs	r2, #1
 80016bc:	f000 fa26 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0ef      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2241      	movs	r2, #65	@ 0x41
 80016cc:	2121      	movs	r1, #33	@ 0x21
 80016ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2242      	movs	r2, #66	@ 0x42
 80016d4:	2110      	movs	r1, #16
 80016d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2208      	movs	r2, #8
 80016e8:	18ba      	adds	r2, r7, r2
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2bff      	cmp	r3, #255	@ 0xff
 80016fc:	d906      	bls.n	800170c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	22ff      	movs	r2, #255	@ 0xff
 8001702:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	045b      	lsls	r3, r3, #17
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e007      	b.n	800171c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	049b      	lsls	r3, r3, #18
 800171a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	d027      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	b2db      	uxtb	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	697c      	ldr	r4, [r7, #20]
 8001760:	230a      	movs	r3, #10
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <HAL_I2C_Master_Transmit+0x24c>)
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	0023      	movs	r3, r4
 800176e:	f000 fc45 	bl	8001ffc <I2C_TransferConfig>
 8001772:	e06f      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001778:	b2da      	uxtb	r2, r3
 800177a:	697c      	ldr	r4, [r7, #20]
 800177c:	230a      	movs	r3, #10
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	8819      	ldrh	r1, [r3, #0]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <HAL_I2C_Master_Transmit+0x24c>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	0023      	movs	r3, r4
 800178a:	f000 fc37 	bl	8001ffc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800178e:	e061      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fa10 	bl	8001bbc <I2C_WaitOnTXISFlagUntilTimeout>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e081      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03a      	beq.n	8001854 <HAL_I2C_Master_Transmit+0x1f0>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d136      	bne.n	8001854 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	0013      	movs	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	f000 f98a 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e053      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2bff      	cmp	r3, #255	@ 0xff
 8001808:	d911      	bls.n	800182e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	22ff      	movs	r2, #255	@ 0xff
 800180e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001814:	b2da      	uxtb	r2, r3
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	045c      	lsls	r4, r3, #17
 800181a:	230a      	movs	r3, #10
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	8819      	ldrh	r1, [r3, #0]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	0023      	movs	r3, r4
 8001828:	f000 fbe8 	bl	8001ffc <I2C_TransferConfig>
 800182c:	e012      	b.n	8001854 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183c:	b2da      	uxtb	r2, r3
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	049c      	lsls	r4, r3, #18
 8001842:	230a      	movs	r3, #10
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	8819      	ldrh	r1, [r3, #0]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	0023      	movs	r3, r4
 8001850:	f000 fbd4 	bl	8001ffc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d198      	bne.n	8001790 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 f9ef 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e01a      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	490b      	ldr	r1, [pc, #44]	@ (80018b4 <HAL_I2C_Master_Transmit+0x250>)
 8001886:	400a      	ands	r2, r1
 8001888:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2241      	movs	r2, #65	@ 0x41
 800188e:	2120      	movs	r1, #32
 8001890:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2242      	movs	r2, #66	@ 0x42
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2240      	movs	r2, #64	@ 0x40
 800189e:	2100      	movs	r1, #0
 80018a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
  }
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b007      	add	sp, #28
 80018ae:	bd90      	pop	{r4, r7, pc}
 80018b0:	80002000 	.word	0x80002000
 80018b4:	fe00e800 	.word	0xfe00e800

080018b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	0008      	movs	r0, r1
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	0019      	movs	r1, r3
 80018c6:	230a      	movs	r3, #10
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	2308      	movs	r3, #8
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	1c0a      	adds	r2, r1, #0
 80018d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2241      	movs	r2, #65	@ 0x41
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b20      	cmp	r3, #32
 80018e0:	d000      	beq.n	80018e4 <HAL_I2C_Master_Receive+0x2c>
 80018e2:	e0e8      	b.n	8001ab6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2240      	movs	r2, #64	@ 0x40
 80018e8:	5c9b      	ldrb	r3, [r3, r2]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_Master_Receive+0x3a>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0e2      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2240      	movs	r2, #64	@ 0x40
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018fa:	f7ff fb8b 	bl	8001014 <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	0219      	lsls	r1, r3, #8
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2319      	movs	r3, #25
 800190e:	2201      	movs	r2, #1
 8001910:	f000 f8fc 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0cd      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2241      	movs	r2, #65	@ 0x41
 8001920:	2122      	movs	r1, #34	@ 0x22
 8001922:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2242      	movs	r2, #66	@ 0x42
 8001928:	2110      	movs	r1, #16
 800192a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2208      	movs	r2, #8
 800193c:	18ba      	adds	r2, r7, r2
 800193e:	8812      	ldrh	r2, [r2, #0]
 8001940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	2bff      	cmp	r3, #255	@ 0xff
 8001950:	d911      	bls.n	8001976 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	22ff      	movs	r2, #255	@ 0xff
 8001956:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	b2da      	uxtb	r2, r3
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	045c      	lsls	r4, r3, #17
 8001962:	230a      	movs	r3, #10
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	8819      	ldrh	r1, [r3, #0]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <HAL_I2C_Master_Receive+0x208>)
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	0023      	movs	r3, r4
 8001970:	f000 fb44 	bl	8001ffc <I2C_TransferConfig>
 8001974:	e076      	b.n	8001a64 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	b2da      	uxtb	r2, r3
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	049c      	lsls	r4, r3, #18
 800198a:	230a      	movs	r3, #10
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	8819      	ldrh	r1, [r3, #0]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <HAL_I2C_Master_Receive+0x208>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	0023      	movs	r3, r4
 8001998:	f000 fb30 	bl	8001ffc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800199c:	e062      	b.n	8001a64 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f993 	bl	8001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e082      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03a      	beq.n	8001a64 <HAL_I2C_Master_Receive+0x1ac>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d136      	bne.n	8001a64 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	0013      	movs	r3, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	f000 f882 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001a08:	1e03      	subs	r3, r0, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e053      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2bff      	cmp	r3, #255	@ 0xff
 8001a18:	d911      	bls.n	8001a3e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	22ff      	movs	r2, #255	@ 0xff
 8001a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	2380      	movs	r3, #128	@ 0x80
 8001a28:	045c      	lsls	r4, r3, #17
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	8819      	ldrh	r1, [r3, #0]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	0023      	movs	r3, r4
 8001a38:	f000 fae0 	bl	8001ffc <I2C_TransferConfig>
 8001a3c:	e012      	b.n	8001a64 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	049c      	lsls	r4, r3, #18
 8001a52:	230a      	movs	r3, #10
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	8819      	ldrh	r1, [r3, #0]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	0023      	movs	r3, r4
 8001a60:	f000 facc 	bl	8001ffc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d197      	bne.n	800199e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 f8e7 	bl	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e01a      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2220      	movs	r2, #32
 8001a88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	490b      	ldr	r1, [pc, #44]	@ (8001ac4 <HAL_I2C_Master_Receive+0x20c>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2241      	movs	r2, #65	@ 0x41
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2242      	movs	r2, #66	@ 0x42
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
  }
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b007      	add	sp, #28
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	80002400 	.word	0x80002400
 8001ac4:	fe00e800 	.word	0xfe00e800

08001ac8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d103      	bne.n	8001ae6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d007      	beq.n	8001b04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2101      	movs	r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	619a      	str	r2, [r3, #24]
  }
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1c:	e03a      	b.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f971 	bl	8001e0c <I2C_IsErrorOccurred>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e040      	b.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	d02d      	beq.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b38:	f7ff fa6c 	bl	8001014 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d302      	bcc.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d122      	bne.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	4013      	ands	r3, r2
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	425a      	negs	r2, r3
 8001b5e:	4153      	adcs	r3, r2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	001a      	movs	r2, r3
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d113      	bne.n	8001b94 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	2220      	movs	r2, #32
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2241      	movs	r2, #65	@ 0x41
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2242      	movs	r2, #66	@ 0x42
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2240      	movs	r2, #64	@ 0x40
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e00f      	b.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	425a      	negs	r2, r3
 8001ba4:	4153      	adcs	r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	001a      	movs	r2, r3
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d0b5      	beq.n	8001b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bc8:	e032      	b.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 f91b 	bl	8001e0c <I2C_IsErrorOccurred>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e030      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	d025      	beq.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff fa16 	bl	8001014 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11a      	bne.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d013      	beq.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2241      	movs	r2, #65	@ 0x41
 8001c18:	2120      	movs	r1, #32
 8001c1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2242      	movs	r2, #66	@ 0x42
 8001c20:	2100      	movs	r1, #0
 8001c22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2240      	movs	r2, #64	@ 0x40
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e007      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d1c5      	bne.n	8001bca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c54:	e02f      	b.n	8001cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 f8d5 	bl	8001e0c <I2C_IsErrorOccurred>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e02d      	b.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7ff f9d3 	bl	8001014 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11a      	bne.n	8001cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2220      	movs	r2, #32
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d013      	beq.n	8001cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	2220      	movs	r2, #32
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2241      	movs	r2, #65	@ 0x41
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2242      	movs	r2, #66	@ 0x42
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	2100      	movs	r1, #0
 8001cb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e007      	b.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	d1c8      	bne.n	8001c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2317      	movs	r3, #23
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001ce4:	e07b      	b.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 f88d 	bl	8001e0c <I2C_IsErrorOccurred>
 8001cf2:	1e03      	subs	r3, r0, #0
 8001cf4:	d003      	beq.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8001cf6:	2317      	movs	r3, #23
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d140      	bne.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001d0c:	2117      	movs	r1, #23
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d13b      	bne.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d106      	bne.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d123      	bne.n	8001d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4929      	ldr	r1, [pc, #164]	@ (8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2241      	movs	r2, #65	@ 0x41
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2242      	movs	r2, #66	@ 0x42
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2240      	movs	r2, #64	@ 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001d7e:	2317      	movs	r3, #23
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e002      	b.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001d8e:	f7ff f941 	bl	8001014 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d302      	bcc.n	8001da4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11c      	bne.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8001da4:	2017      	movs	r0, #23
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d117      	bne.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d010      	beq.n	8001dde <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2241      	movs	r2, #65	@ 0x41
 8001dcc:	2120      	movs	r1, #32
 8001dce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2204      	movs	r2, #4
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d005      	beq.n	8001df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001dec:	2317      	movs	r3, #23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d100      	bne.n	8001df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001df6:	e776      	b.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8001df8:	2317      	movs	r3, #23
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
}
 8001dfe:	0018      	movs	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b006      	add	sp, #24
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2327      	movs	r3, #39	@ 0x27
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2210      	movs	r2, #16
 8001e34:	4013      	ands	r3, r2
 8001e36:	d100      	bne.n	8001e3a <I2C_IsErrorOccurred+0x2e>
 8001e38:	e079      	b.n	8001f2e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e42:	e057      	b.n	8001ef4 <I2C_IsErrorOccurred+0xe8>
 8001e44:	2227      	movs	r2, #39	@ 0x27
 8001e46:	18bb      	adds	r3, r7, r2
 8001e48:	18ba      	adds	r2, r7, r2
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	d04f      	beq.n	8001ef4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e54:	f7ff f8de 	bl	8001014 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d302      	bcc.n	8001e6a <I2C_IsErrorOccurred+0x5e>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d144      	bne.n	8001ef4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	01db      	lsls	r3, r3, #7
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e78:	2013      	movs	r0, #19
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	2142      	movs	r1, #66	@ 0x42
 8001e80:	5c52      	ldrb	r2, [r2, r1]
 8001e82:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	401a      	ands	r2, r3
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d126      	bne.n	8001ee6 <I2C_IsErrorOccurred+0xda>
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	01db      	lsls	r3, r3, #7
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d021      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d01d      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	01c9      	lsls	r1, r1, #7
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ebc:	f7ff f8aa 	bl	8001014 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec4:	e00f      	b.n	8001ee6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ec6:	f7ff f8a5 	bl	8001014 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b19      	cmp	r3, #25
 8001ed2:	d908      	bls.n	8001ee6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001edc:	2327      	movs	r3, #39	@ 0x27
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]

              break;
 8001ee4:	e006      	b.n	8001ef4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2220      	movs	r2, #32
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d1e8      	bne.n	8001ec6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d004      	beq.n	8001f0c <I2C_IsErrorOccurred+0x100>
 8001f02:	2327      	movs	r3, #39	@ 0x27
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d09b      	beq.n	8001e44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f0c:	2327      	movs	r3, #39	@ 0x27
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2204      	movs	r2, #4
 8001f22:	4313      	orrs	r3, r2
 8001f24:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f26:	2327      	movs	r3, #39	@ 0x27
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00c      	beq.n	8001f5a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4313      	orrs	r3, r2
 8001f46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	0052      	lsls	r2, r2, #1
 8001f50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f52:	2327      	movs	r3, #39	@ 0x27
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	d00c      	beq.n	8001f7e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	2208      	movs	r2, #8
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f76:	2327      	movs	r3, #39	@ 0x27
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4013      	ands	r3, r2
 8001f86:	d00c      	beq.n	8001fa2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f9a:	2327      	movs	r3, #39	@ 0x27
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fa2:	2327      	movs	r3, #39	@ 0x27
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01d      	beq.n	8001fe8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fd8a 	bl	8001ac8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	490e      	ldr	r1, [pc, #56]	@ (8001ff8 <I2C_IsErrorOccurred+0x1ec>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2241      	movs	r2, #65	@ 0x41
 8001fd4:	2120      	movs	r1, #32
 8001fd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2242      	movs	r2, #66	@ 0x42
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2240      	movs	r2, #64	@ 0x40
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001fe8:	2327      	movs	r3, #39	@ 0x27
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b00a      	add	sp, #40	@ 0x28
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	fe00e800 	.word	0xfe00e800

08001ffc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	0008      	movs	r0, r1
 8002006:	0011      	movs	r1, r2
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	240a      	movs	r4, #10
 800200c:	193b      	adds	r3, r7, r4
 800200e:	1c02      	adds	r2, r0, #0
 8002010:	801a      	strh	r2, [r3, #0]
 8002012:	2009      	movs	r0, #9
 8002014:	183b      	adds	r3, r7, r0
 8002016:	1c0a      	adds	r2, r1, #0
 8002018:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800201a:	193b      	adds	r3, r7, r4
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	059b      	lsls	r3, r3, #22
 8002020:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002022:	183b      	adds	r3, r7, r0
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	0419      	lsls	r1, r3, #16
 8002028:	23ff      	movs	r3, #255	@ 0xff
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800202e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002036:	4313      	orrs	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002046:	0d51      	lsrs	r1, r2, #21
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	00d2      	lsls	r2, r2, #3
 800204c:	400a      	ands	r2, r1
 800204e:	4907      	ldr	r1, [pc, #28]	@ (800206c <I2C_TransferConfig+0x70>)
 8002050:	430a      	orrs	r2, r1
 8002052:	43d2      	mvns	r2, r2
 8002054:	401a      	ands	r2, r3
 8002056:	0011      	movs	r1, r2
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b007      	add	sp, #28
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	03ff63ff 	.word	0x03ff63ff

08002070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2241      	movs	r2, #65	@ 0x41
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	d138      	bne.n	80020f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2240      	movs	r2, #64	@ 0x40
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002090:	2302      	movs	r3, #2
 8002092:	e032      	b.n	80020fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	2101      	movs	r1, #1
 800209a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2241      	movs	r2, #65	@ 0x41
 80020a0:	2124      	movs	r1, #36	@ 0x24
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2101      	movs	r1, #1
 80020b0:	438a      	bics	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4911      	ldr	r1, [pc, #68]	@ (8002104 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2241      	movs	r2, #65	@ 0x41
 80020e8:	2120      	movs	r1, #32
 80020ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b002      	add	sp, #8
 8002100:	bd80      	pop	{r7, pc}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	ffffefff 	.word	0xffffefff

08002108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2241      	movs	r2, #65	@ 0x41
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d139      	bne.n	8002192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2240      	movs	r2, #64	@ 0x40
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002128:	2302      	movs	r3, #2
 800212a:	e033      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	2101      	movs	r1, #1
 8002132:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2241      	movs	r2, #65	@ 0x41
 8002138:	2124      	movs	r1, #36	@ 0x24
 800213a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2241      	movs	r2, #65	@ 0x41
 8002182:	2120      	movs	r1, #32
 8002184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	fffff0ff 	.word	0xfffff0ff

080021a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d11f      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	0013      	movs	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fd ff9c 	bl	8000110 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021de:	e008      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e001      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e009      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	401a      	ands	r2, r3
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	429a      	cmp	r2, r3
 8002202:	d0ed      	beq.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	40007000 	.word	0x40007000
 8002214:	fffff9ff 	.word	0xfffff9ff
 8002218:	20000000 	.word	0x20000000
 800221c:	000f4240 	.word	0x000f4240

08002220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	23e0      	movs	r3, #224	@ 0xe0
 800222a:	01db      	lsls	r3, r3, #7
 800222c:	4013      	ands	r3, r2
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e2fe      	b.n	8002848 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x1e>
 8002254:	e07c      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4bc3      	ldr	r3, [pc, #780]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2238      	movs	r2, #56	@ 0x38
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4bc0      	ldr	r3, [pc, #768]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2203      	movs	r2, #3
 8002266:	4013      	ands	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x3e>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4bb9      	ldr	r3, [pc, #740]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d062      	beq.n	800234e <HAL_RCC_OscConfig+0x116>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d15e      	bne.n	800234e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2d9      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x78>
 80022a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4baf      	ldr	r3, [pc, #700]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e020      	b.n	80022f2 <HAL_RCC_OscConfig+0xba>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	23a0      	movs	r3, #160	@ 0xa0
 80022b6:	02db      	lsls	r3, r3, #11
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d10e      	bne.n	80022da <HAL_RCC_OscConfig+0xa2>
 80022bc:	4ba9      	ldr	r3, [pc, #676]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	02c9      	lsls	r1, r1, #11
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4ba5      	ldr	r3, [pc, #660]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0xba>
 80022da:	4ba2      	ldr	r3, [pc, #648]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4ba1      	ldr	r3, [pc, #644]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	49a1      	ldr	r1, [pc, #644]	@ (8002568 <HAL_RCC_OscConfig+0x330>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	499f      	ldr	r1, [pc, #636]	@ (800256c <HAL_RCC_OscConfig+0x334>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d014      	beq.n	8002324 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fe8b 	bl	8001014 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fe86 	bl	8001014 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e298      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b93      	ldr	r3, [pc, #588]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xcc>
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fe76 	bl	8001014 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232e:	f7fe fe71 	bl	8001014 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	@ 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e283      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002340:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0xf6>
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d100      	bne.n	800235c <HAL_RCC_OscConfig+0x124>
 800235a:	e099      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2238      	movs	r2, #56	@ 0x38
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002366:	4b7f      	ldr	r3, [pc, #508]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2203      	movs	r2, #3
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x144>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d002      	beq.n	8002382 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d135      	bne.n	80023ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002382:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4013      	ands	r3, r2
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x162>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e256      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b72      	ldr	r3, [pc, #456]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a74      	ldr	r2, [pc, #464]	@ (8002570 <HAL_RCC_OscConfig+0x338>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002574 <HAL_RCC_OscConfig+0x33c>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	4b67      	ldr	r3, [pc, #412]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023ca:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a68      	ldr	r2, [pc, #416]	@ (8002578 <HAL_RCC_OscConfig+0x340>)
 80023d6:	40da      	lsrs	r2, r3
 80023d8:	4b68      	ldr	r3, [pc, #416]	@ (800257c <HAL_RCC_OscConfig+0x344>)
 80023da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023dc:	4b68      	ldr	r3, [pc, #416]	@ (8002580 <HAL_RCC_OscConfig+0x348>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fdbb 	bl	8000f5c <HAL_InitTick>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d051      	beq.n	800248e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e22c      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d030      	beq.n	8002458 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002574 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800240a:	4b56      	ldr	r3, [pc, #344]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b55      	ldr	r3, [pc, #340]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002410:	2180      	movs	r1, #128	@ 0x80
 8002412:	0049      	lsls	r1, r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fdfc 	bl	8001014 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fdf7 	bl	8001014 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e209      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b48      	ldr	r3, [pc, #288]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <HAL_RCC_OscConfig+0x338>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	4b44      	ldr	r3, [pc, #272]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	e01b      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002458:	4b42      	ldr	r3, [pc, #264]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800245e:	4949      	ldr	r1, [pc, #292]	@ (8002584 <HAL_RCC_OscConfig+0x34c>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fdd6 	bl	8001014 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fdd1 	bl	8001014 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1e3      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002480:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x236>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	4013      	ands	r3, r2
 8002498:	d047      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800249a:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2238      	movs	r2, #56	@ 0x38
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b18      	cmp	r3, #24
 80024a4:	d10a      	bne.n	80024bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d03c      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d138      	bne.n	800252a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e1c5      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d019      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024c4:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fda0 	bl	8001014 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fd9b 	bl	8001014 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1ad      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_OscConfig+0x2a2>
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe fd86 	bl	8001014 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fd81 	bl	8001014 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e193      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2204      	movs	r2, #4
 8002530:	4013      	ands	r3, r2
 8002532:	d100      	bne.n	8002536 <HAL_RCC_OscConfig+0x2fe>
 8002534:	e0c6      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	231f      	movs	r3, #31
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2238      	movs	r2, #56	@ 0x38
 8002544:	4013      	ands	r3, r2
 8002546:	2b20      	cmp	r3, #32
 8002548:	d11e      	bne.n	8002588 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_RCC_OscConfig+0x32c>)
 800254c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d100      	bne.n	8002556 <HAL_RCC_OscConfig+0x31e>
 8002554:	e0b6      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d000      	beq.n	8002560 <HAL_RCC_OscConfig+0x328>
 800255e:	e0b1      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e171      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
 8002564:	40021000 	.word	0x40021000
 8002568:	fffeffff 	.word	0xfffeffff
 800256c:	fffbffff 	.word	0xfffbffff
 8002570:	ffff80ff 	.word	0xffff80ff
 8002574:	ffffc7ff 	.word	0xffffc7ff
 8002578:	00f42400 	.word	0x00f42400
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004
 8002584:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002588:	4bb1      	ldr	r3, [pc, #708]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800258a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	055b      	lsls	r3, r3, #21
 8002590:	4013      	ands	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x360>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x362>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d011      	beq.n	80025c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4bac      	ldr	r3, [pc, #688]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a2:	4bab      	ldr	r3, [pc, #684]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80025a4:	2180      	movs	r1, #128	@ 0x80
 80025a6:	0549      	lsls	r1, r1, #21
 80025a8:	430a      	orrs	r2, r1
 80025aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80025ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025ba:	231f      	movs	r3, #31
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c2:	4ba4      	ldr	r3, [pc, #656]	@ (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ce:	4ba1      	ldr	r3, [pc, #644]	@ (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4ba0      	ldr	r3, [pc, #640]	@ (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025d4:	2180      	movs	r1, #128	@ 0x80
 80025d6:	0049      	lsls	r1, r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fd1a 	bl	8001014 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fd15 	bl	8001014 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e127      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f8:	4b96      	ldr	r3, [pc, #600]	@ (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x3e2>
 800260c:	4b90      	ldr	r3, [pc, #576]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800260e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002610:	4b8f      	ldr	r3, [pc, #572]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x41c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x404>
 8002622:	4b8b      	ldr	r3, [pc, #556]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002626:	4b8a      	ldr	r3, [pc, #552]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002628:	2104      	movs	r1, #4
 800262a:	430a      	orrs	r2, r1
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800262e:	4b88      	ldr	r3, [pc, #544]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002632:	4b87      	ldr	r3, [pc, #540]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x41c>
 800263c:	4b84      	ldr	r3, [pc, #528]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800263e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002640:	4b83      	ldr	r3, [pc, #524]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002642:	2101      	movs	r1, #1
 8002644:	438a      	bics	r2, r1
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002648:	4b81      	ldr	r3, [pc, #516]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800264a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800264c:	4b80      	ldr	r3, [pc, #512]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800264e:	2104      	movs	r1, #4
 8002650:	438a      	bics	r2, r1
 8002652:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d014      	beq.n	8002686 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fcda 	bl	8001014 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002664:	e009      	b.n	800267a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7fe fcd5 	bl	8001014 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a79      	ldr	r2, [pc, #484]	@ (8002858 <HAL_RCC_OscConfig+0x620>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0e6      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b75      	ldr	r3, [pc, #468]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x42e>
 8002684:	e013      	b.n	80026ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fcc5 	bl	8001014 <HAL_GetTick>
 800268a:	0003      	movs	r3, r0
 800268c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800268e:	e009      	b.n	80026a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe fcc0 	bl	8001014 <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	4a6f      	ldr	r2, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x620>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0d1      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b65      	ldr	r3, [pc, #404]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026bc:	4b64      	ldr	r3, [pc, #400]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026be:	4967      	ldr	r1, [pc, #412]	@ (800285c <HAL_RCC_OscConfig+0x624>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d100      	bne.n	80026ce <HAL_RCC_OscConfig+0x496>
 80026cc:	e0bb      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ce:	4b60      	ldr	r3, [pc, #384]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	@ 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d100      	bne.n	80026dc <HAL_RCC_OscConfig+0x4a4>
 80026da:	e07b      	b.n	80027d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d156      	bne.n	8002792 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b59      	ldr	r3, [pc, #356]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80026ea:	495d      	ldr	r1, [pc, #372]	@ (8002860 <HAL_RCC_OscConfig+0x628>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc90 	bl	8001014 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fc8b 	bl	8001014 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e09d      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	049b      	lsls	r3, r3, #18
 8002714:	4013      	ands	r3, r2
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a51      	ldr	r2, [pc, #324]	@ (8002864 <HAL_RCC_OscConfig+0x62c>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	431a      	orrs	r2, r3
 8002746:	4b42      	ldr	r3, [pc, #264]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002752:	2180      	movs	r1, #128	@ 0x80
 8002754:	0449      	lsls	r1, r1, #17
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800275a:	4b3d      	ldr	r3, [pc, #244]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b3c      	ldr	r3, [pc, #240]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0549      	lsls	r1, r1, #21
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fc54 	bl	8001014 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fc4f 	bl	8001014 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e061      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	049b      	lsls	r3, r3, #18
 800278c:	4013      	ands	r3, r2
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x53a>
 8002790:	e059      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b2e      	ldr	r3, [pc, #184]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 8002798:	4931      	ldr	r1, [pc, #196]	@ (8002860 <HAL_RCC_OscConfig+0x628>)
 800279a:	400a      	ands	r2, r1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7fe fc39 	bl	8001014 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fc34 	bl	8001014 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e046      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ba:	4b25      	ldr	r3, [pc, #148]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	049b      	lsls	r3, r3, #18
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027c6:	4b22      	ldr	r3, [pc, #136]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80027cc:	4926      	ldr	r1, [pc, #152]	@ (8002868 <HAL_RCC_OscConfig+0x630>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e033      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_RCC_OscConfig+0x618>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2203      	movs	r2, #3
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d126      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2270      	movs	r2, #112	@ 0x70
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11f      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	23fe      	movs	r3, #254	@ 0xfe
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	23f8      	movs	r3, #248	@ 0xf8
 8002818:	039b      	lsls	r3, r3, #14
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d10e      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	23e0      	movs	r3, #224	@ 0xe0
 8002828:	051b      	lsls	r3, r3, #20
 800282a:	401a      	ands	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	0f5b      	lsrs	r3, r3, #29
 8002838:	075a      	lsls	r2, r3, #29
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b008      	add	sp, #32
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	00001388 	.word	0x00001388
 800285c:	efffffff 	.word	0xefffffff
 8002860:	feffffff 	.word	0xfeffffff
 8002864:	11c1808c 	.word	0x11c1808c
 8002868:	eefefffc 	.word	0xeefefffc

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0e9      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b76      	ldr	r3, [pc, #472]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d91e      	bls.n	80028cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2207      	movs	r2, #7
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	4b70      	ldr	r3, [pc, #448]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a0:	f7fe fbb8 	bl	8001014 <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028a8:	e009      	b.n	80028be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7fe fbb3 	bl	8001014 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0ca      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028be:	4b67      	ldr	r3, [pc, #412]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2207      	movs	r2, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d006      	beq.n	80028ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028e0:	4b60      	ldr	r3, [pc, #384]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	21e0      	movs	r1, #224	@ 0xe0
 80028e8:	01c9      	lsls	r1, r1, #7
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a68 <HAL_RCC_ClockConfig+0x1fc>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	4013      	ands	r3, r2
 800290a:	d057      	beq.n	80029bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002914:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	4013      	ands	r3, r2
 800291e:	d12b      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e097      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d107      	bne.n	800293c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	049b      	lsls	r3, r3, #18
 8002934:	4013      	ands	r3, r2
 8002936:	d11f      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e08b      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d113      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e07f      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d106      	bne.n	800296a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295c:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002960:	2202      	movs	r2, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d108      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e074      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800296c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002978:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2207      	movs	r2, #7
 800297e:	4393      	bics	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe fb42 	bl	8001014 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002994:	e009      	b.n	80029aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002996:	f7fe fb3d 	bl	8001014 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e054      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2238      	movs	r2, #56	@ 0x38
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1ec      	bne.n	8002996 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2207      	movs	r2, #7
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d21e      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4393      	bics	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	4b21      	ldr	r3, [pc, #132]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fb1a 	bl	8001014 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe fb15 	bl	8001014 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e02c      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029fa:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <HAL_RCC_ClockConfig+0x200>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a26:	f000 f829 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a2a:	0001      	movs	r1, r0
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	220f      	movs	r2, #15
 8002a34:	401a      	ands	r2, r3
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <HAL_RCC_ClockConfig+0x204>)
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	58d3      	ldr	r3, [r2, r3]
 8002a3c:	221f      	movs	r2, #31
 8002a3e:	4013      	ands	r3, r2
 8002a40:	000a      	movs	r2, r1
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCC_ClockConfig+0x208>)
 8002a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCC_ClockConfig+0x20c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe fa85 	bl	8000f5c <HAL_InitTick>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	00001388 	.word	0x00001388
 8002a64:	40021000 	.word	0x40021000
 8002a68:	fffff0ff 	.word	0xfffff0ff
 8002a6c:	ffff8fff 	.word	0xffff8fff
 8002a70:	08004dbc 	.word	0x08004dbc
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b3c      	ldr	r3, [pc, #240]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2238      	movs	r2, #56	@ 0x38
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d10f      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a8c:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0adb      	lsrs	r3, r3, #11
 8002a92:	2207      	movs	r2, #7
 8002a94:	4013      	ands	r3, r2
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	4835      	ldr	r0, [pc, #212]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aa2:	f7fd fb35 	bl	8000110 <__udivsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e05d      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2238      	movs	r2, #56	@ 0x38
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abe:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2238      	movs	r2, #56	@ 0x38
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d138      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	2207      	movs	r2, #7
 8002adc:	4013      	ands	r3, r2
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	4824      	ldr	r0, [pc, #144]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002aec:	f7fd fb10 	bl	8000110 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0019      	movs	r1, r3
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	227f      	movs	r2, #127	@ 0x7f
 8002afc:	4013      	ands	r3, r2
 8002afe:	434b      	muls	r3, r1
 8002b00:	617b      	str	r3, [r7, #20]
        break;
 8002b02:	e00d      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	481c      	ldr	r0, [pc, #112]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b08:	f7fd fb02 	bl	8000110 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	227f      	movs	r2, #127	@ 0x7f
 8002b18:	4013      	ands	r3, r2
 8002b1a:	434b      	muls	r3, r1
 8002b1c:	617b      	str	r3, [r7, #20]
        break;
 8002b1e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0f5b      	lsrs	r3, r3, #29
 8002b26:	2207      	movs	r2, #7
 8002b28:	4013      	ands	r3, r2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7fd faed 	bl	8000110 <__udivsi3>
 8002b36:	0003      	movs	r3, r0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e015      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2238      	movs	r2, #56	@ 0x38
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d103      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2238      	movs	r2, #56	@ 0x38
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b18      	cmp	r3, #24
 8002b5a:	d103      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b5c:	23fa      	movs	r3, #250	@ 0xfa
 8002b5e:	01db      	lsls	r3, r3, #7
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e001      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b68:	693b      	ldr	r3, [r7, #16]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b006      	add	sp, #24
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b98:	f7ff fff2 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002b9c:	0004      	movs	r4, r0
 8002b9e:	f7ff fb3f 	bl	8002220 <LL_RCC_GetAPB1Prescaler>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	0b1a      	lsrs	r2, r3, #12
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	58d3      	ldr	r3, [r2, r3]
 8002bac:	221f      	movs	r2, #31
 8002bae:	4013      	ands	r3, r2
 8002bb0:	40dc      	lsrs	r4, r3
 8002bb2:	0023      	movs	r3, r4
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	08004dfc 	.word	0x08004dfc

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bc8:	2313      	movs	r3, #19
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd0:	2312      	movs	r3, #18
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	d100      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002be4:	e0a3      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2011      	movs	r0, #17
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bee:	4bb0      	ldr	r3, [pc, #704]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	055b      	lsls	r3, r3, #21
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d110      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4bad      	ldr	r3, [pc, #692]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bfe:	4bac      	ldr	r3, [pc, #688]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c00:	2180      	movs	r1, #128	@ 0x80
 8002c02:	0549      	lsls	r1, r1, #21
 8002c04:	430a      	orrs	r2, r1
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c08:	4ba9      	ldr	r3, [pc, #676]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	055b      	lsls	r3, r3, #21
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1c:	4ba5      	ldr	r3, [pc, #660]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4ba4      	ldr	r3, [pc, #656]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c22:	2180      	movs	r1, #128	@ 0x80
 8002c24:	0049      	lsls	r1, r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2a:	f7fe f9f3 	bl	8001014 <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fe f9ee 	bl	8001014 <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d904      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c42:	2313      	movs	r3, #19
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2203      	movs	r2, #3
 8002c48:	701a      	strb	r2, [r3, #0]
        break;
 8002c4a:	e005      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4c:	4b99      	ldr	r3, [pc, #612]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0ed      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c58:	2313      	movs	r3, #19
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d154      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c62:	4b93      	ldr	r3, [pc, #588]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c66:	23c0      	movs	r3, #192	@ 0xc0
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d014      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	4a8d      	ldr	r2, [pc, #564]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c88:	4b89      	ldr	r3, [pc, #548]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c8c:	4b88      	ldr	r3, [pc, #544]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	0249      	lsls	r1, r1, #9
 8002c92:	430a      	orrs	r2, r1
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	4b86      	ldr	r3, [pc, #536]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c9a:	4b85      	ldr	r3, [pc, #532]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c9c:	4987      	ldr	r1, [pc, #540]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca2:	4b83      	ldr	r3, [pc, #524]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	d016      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f9b0 	bl	8001014 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	e00c      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe f9ab 	bl	8001014 <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d904      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cca:	2313      	movs	r3, #19
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
            break;
 8002cd2:	e004      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd4:	4b76      	ldr	r3, [pc, #472]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d0ed      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cde:	2313      	movs	r3, #19
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce8:	4b71      	ldr	r3, [pc, #452]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cec:	4a72      	ldr	r2, [pc, #456]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cfc:	e00c      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cfe:	2312      	movs	r3, #18
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2213      	movs	r2, #19
 8002d04:	18ba      	adds	r2, r7, r2
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2213      	movs	r2, #19
 8002d12:	18ba      	adds	r2, r7, r2
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d18:	2311      	movs	r3, #17
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b63      	ldr	r3, [pc, #396]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d26:	4b62      	ldr	r3, [pc, #392]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d28:	4966      	ldr	r1, [pc, #408]	@ (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4393      	bics	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d56:	4b56      	ldr	r3, [pc, #344]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b52      	ldr	r3, [pc, #328]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d74:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	2230      	movs	r2, #48	@ 0x30
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d92:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	4b43      	ldr	r3, [pc, #268]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002da2:	430a      	orrs	r2, r1
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2240      	movs	r2, #64	@ 0x40
 8002dac:	4013      	ands	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002db0:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	4a45      	ldr	r2, [pc, #276]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	01db      	lsls	r3, r3, #7
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d015      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd0:	4b37      	ldr	r3, [pc, #220]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	0899      	lsrs	r1, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dde:	430a      	orrs	r2, r1
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	05db      	lsls	r3, r3, #23
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d106      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dee:	4b30      	ldr	r3, [pc, #192]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	0249      	lsls	r1, r1, #9
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	d014      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e08:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	4393      	bics	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	4b26      	ldr	r3, [pc, #152]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e24:	4b22      	ldr	r3, [pc, #136]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	0249      	lsls	r1, r1, #9
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d014      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	220c      	movs	r2, #12
 8002e44:	4393      	bics	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d106      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	0249      	lsls	r1, r1, #9
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	045b      	lsls	r3, r3, #17
 8002e70:	4013      	ands	r3, r2
 8002e72:	d016      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	019b      	lsls	r3, r3, #6
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e9a:	2180      	movs	r1, #128	@ 0x80
 8002e9c:	0449      	lsls	r1, r1, #17
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b006      	add	sp, #24
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	fffffcff 	.word	0xfffffcff
 8002ebc:	fffeffff 	.word	0xfffeffff
 8002ec0:	00001388 	.word	0x00001388
 8002ec4:	efffffff 	.word	0xefffffff
 8002ec8:	ffffcfff 	.word	0xffffcfff
 8002ecc:	ffff3fff 	.word	0xffff3fff

08002ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e0a8      	b.n	8003034 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	2382      	movs	r3, #130	@ 0x82
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d009      	beq.n	8002f0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
 8002efc:	e005      	b.n	8002f0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	225d      	movs	r2, #93	@ 0x5d
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	225c      	movs	r2, #92	@ 0x5c
 8002f20:	2100      	movs	r1, #0
 8002f22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7fd ff02 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	225d      	movs	r2, #93	@ 0x5d
 8002f30:	2102      	movs	r1, #2
 8002f32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	438a      	bics	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	23e0      	movs	r3, #224	@ 0xe0
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d902      	bls.n	8002f56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	e002      	b.n	8002f5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f56:	2380      	movs	r3, #128	@ 0x80
 8002f58:	015b      	lsls	r3, r3, #5
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	23f0      	movs	r3, #240	@ 0xf0
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d008      	beq.n	8002f7a <HAL_SPI_Init+0xaa>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	23e0      	movs	r3, #224	@ 0xe0
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d002      	beq.n	8002f7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	2382      	movs	r3, #130	@ 0x82
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6899      	ldr	r1, [r3, #8]
 8002f88:	2384      	movs	r3, #132	@ 0x84
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2102      	movs	r1, #2
 8002f96:	400b      	ands	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6999      	ldr	r1, [r3, #24]
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	400b      	ands	r3, r1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2138      	movs	r1, #56	@ 0x38
 8002fb6:	400b      	ands	r3, r1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	2180      	movs	r1, #128	@ 0x80
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	0011      	movs	r1, r2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	2204      	movs	r2, #4
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	400b      	ands	r3, r1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	23f0      	movs	r3, #240	@ 0xf0
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	400b      	ands	r3, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	0011      	movs	r1, r2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4907      	ldr	r1, [pc, #28]	@ (800303c <HAL_SPI_Init+0x16c>)
 8003020:	400a      	ands	r2, r1
 8003022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	225d      	movs	r2, #93	@ 0x5d
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}
 800303c:	fffff7ff 	.word	0xfffff7ff

08003040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e046      	b.n	80030e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2288      	movs	r2, #136	@ 0x88
 8003056:	589b      	ldr	r3, [r3, r2]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2284      	movs	r2, #132	@ 0x84
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f7fd feae 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2288      	movs	r2, #136	@ 0x88
 8003070:	2124      	movs	r1, #36	@ 0x24
 8003072:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	438a      	bics	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fa0e 	bl	80034b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f828 	bl	80030ec <UART_SetConfig>
 800309c:	0003      	movs	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e01c      	b.n	80030e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	490d      	ldr	r1, [pc, #52]	@ (80030e8 <HAL_UART_Init+0xa8>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	212a      	movs	r1, #42	@ 0x2a
 80030c2:	438a      	bics	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fa9d 	bl	8003618 <UART_CheckIdleState>
 80030de:	0003      	movs	r3, r0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	ffffb7ff 	.word	0xffffb7ff

080030ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030f4:	231b      	movs	r3, #27
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4313      	orrs	r3, r2
 8003112:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4ab4      	ldr	r2, [pc, #720]	@ (80033ec <UART_SetConfig+0x300>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4aaf      	ldr	r2, [pc, #700]	@ (80033f0 <UART_SetConfig+0x304>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	4313      	orrs	r3, r2
 8003150:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4aa6      	ldr	r2, [pc, #664]	@ (80033f4 <UART_SetConfig+0x308>)
 800315a:	4013      	ands	r3, r2
 800315c:	0019      	movs	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	220f      	movs	r2, #15
 8003170:	4393      	bics	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a9c      	ldr	r2, [pc, #624]	@ (80033f8 <UART_SetConfig+0x30c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d127      	bne.n	80031da <UART_SetConfig+0xee>
 800318a:	4b9c      	ldr	r3, [pc, #624]	@ (80033fc <UART_SetConfig+0x310>)
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	2203      	movs	r2, #3
 8003190:	4013      	ands	r3, r2
 8003192:	2b03      	cmp	r3, #3
 8003194:	d017      	beq.n	80031c6 <UART_SetConfig+0xda>
 8003196:	d81b      	bhi.n	80031d0 <UART_SetConfig+0xe4>
 8003198:	2b02      	cmp	r3, #2
 800319a:	d00a      	beq.n	80031b2 <UART_SetConfig+0xc6>
 800319c:	d818      	bhi.n	80031d0 <UART_SetConfig+0xe4>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <UART_SetConfig+0xbc>
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d00a      	beq.n	80031bc <UART_SetConfig+0xd0>
 80031a6:	e013      	b.n	80031d0 <UART_SetConfig+0xe4>
 80031a8:	231a      	movs	r3, #26
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e08f      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80031b2:	231a      	movs	r3, #26
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2202      	movs	r2, #2
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e08a      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80031bc:	231a      	movs	r3, #26
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2204      	movs	r2, #4
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e085      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80031c6:	231a      	movs	r3, #26
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2208      	movs	r2, #8
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e080      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80031d0:	231a      	movs	r3, #26
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2210      	movs	r2, #16
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e07b      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a88      	ldr	r2, [pc, #544]	@ (8003400 <UART_SetConfig+0x314>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d127      	bne.n	8003234 <UART_SetConfig+0x148>
 80031e4:	4b85      	ldr	r3, [pc, #532]	@ (80033fc <UART_SetConfig+0x310>)
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	220c      	movs	r2, #12
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d017      	beq.n	8003220 <UART_SetConfig+0x134>
 80031f0:	d81b      	bhi.n	800322a <UART_SetConfig+0x13e>
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d00a      	beq.n	800320c <UART_SetConfig+0x120>
 80031f6:	d818      	bhi.n	800322a <UART_SetConfig+0x13e>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <UART_SetConfig+0x116>
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d00a      	beq.n	8003216 <UART_SetConfig+0x12a>
 8003200:	e013      	b.n	800322a <UART_SetConfig+0x13e>
 8003202:	231a      	movs	r3, #26
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e062      	b.n	80032d2 <UART_SetConfig+0x1e6>
 800320c:	231a      	movs	r3, #26
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e05d      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003216:	231a      	movs	r3, #26
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2204      	movs	r2, #4
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e058      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003220:	231a      	movs	r3, #26
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2208      	movs	r2, #8
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e053      	b.n	80032d2 <UART_SetConfig+0x1e6>
 800322a:	231a      	movs	r3, #26
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2210      	movs	r2, #16
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e04e      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a72      	ldr	r2, [pc, #456]	@ (8003404 <UART_SetConfig+0x318>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d127      	bne.n	800328e <UART_SetConfig+0x1a2>
 800323e:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <UART_SetConfig+0x310>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	2230      	movs	r2, #48	@ 0x30
 8003244:	4013      	ands	r3, r2
 8003246:	2b30      	cmp	r3, #48	@ 0x30
 8003248:	d017      	beq.n	800327a <UART_SetConfig+0x18e>
 800324a:	d81b      	bhi.n	8003284 <UART_SetConfig+0x198>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d00a      	beq.n	8003266 <UART_SetConfig+0x17a>
 8003250:	d818      	bhi.n	8003284 <UART_SetConfig+0x198>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <UART_SetConfig+0x170>
 8003256:	2b10      	cmp	r3, #16
 8003258:	d00a      	beq.n	8003270 <UART_SetConfig+0x184>
 800325a:	e013      	b.n	8003284 <UART_SetConfig+0x198>
 800325c:	231a      	movs	r3, #26
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e035      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003266:	231a      	movs	r3, #26
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e030      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003270:	231a      	movs	r3, #26
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2204      	movs	r2, #4
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e02b      	b.n	80032d2 <UART_SetConfig+0x1e6>
 800327a:	231a      	movs	r3, #26
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2208      	movs	r2, #8
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e026      	b.n	80032d2 <UART_SetConfig+0x1e6>
 8003284:	231a      	movs	r3, #26
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2210      	movs	r2, #16
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e021      	b.n	80032d2 <UART_SetConfig+0x1e6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5d      	ldr	r2, [pc, #372]	@ (8003408 <UART_SetConfig+0x31c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d104      	bne.n	80032a2 <UART_SetConfig+0x1b6>
 8003298:	231a      	movs	r3, #26
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e017      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a59      	ldr	r2, [pc, #356]	@ (800340c <UART_SetConfig+0x320>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d104      	bne.n	80032b6 <UART_SetConfig+0x1ca>
 80032ac:	231a      	movs	r3, #26
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e00d      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a55      	ldr	r2, [pc, #340]	@ (8003410 <UART_SetConfig+0x324>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d104      	bne.n	80032ca <UART_SetConfig+0x1de>
 80032c0:	231a      	movs	r3, #26
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e003      	b.n	80032d2 <UART_SetConfig+0x1e6>
 80032ca:	231a      	movs	r3, #26
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	2210      	movs	r2, #16
 80032d0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	429a      	cmp	r2, r3
 80032dc:	d000      	beq.n	80032e0 <UART_SetConfig+0x1f4>
 80032de:	e065      	b.n	80033ac <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 80032e0:	231a      	movs	r3, #26
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d015      	beq.n	8003316 <UART_SetConfig+0x22a>
 80032ea:	dc18      	bgt.n	800331e <UART_SetConfig+0x232>
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00d      	beq.n	800330c <UART_SetConfig+0x220>
 80032f0:	dc15      	bgt.n	800331e <UART_SetConfig+0x232>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <UART_SetConfig+0x210>
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d005      	beq.n	8003306 <UART_SetConfig+0x21a>
 80032fa:	e010      	b.n	800331e <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7ff fc4a 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003300:	0003      	movs	r3, r0
 8003302:	617b      	str	r3, [r7, #20]
        break;
 8003304:	e012      	b.n	800332c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003306:	4b43      	ldr	r3, [pc, #268]	@ (8003414 <UART_SetConfig+0x328>)
 8003308:	617b      	str	r3, [r7, #20]
        break;
 800330a:	e00f      	b.n	800332c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330c:	f7ff fbb6 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8003310:	0003      	movs	r3, r0
 8003312:	617b      	str	r3, [r7, #20]
        break;
 8003314:	e00a      	b.n	800332c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	617b      	str	r3, [r7, #20]
        break;
 800331c:	e006      	b.n	800332c <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003322:	231b      	movs	r3, #27
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
        break;
 800332a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d100      	bne.n	8003334 <UART_SetConfig+0x248>
 8003332:	e0a6      	b.n	8003482 <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003338:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <UART_SetConfig+0x32c>)
 800333a:	0052      	lsls	r2, r2, #1
 800333c:	5ad3      	ldrh	r3, [r2, r3]
 800333e:	0019      	movs	r1, r3
 8003340:	6978      	ldr	r0, [r7, #20]
 8003342:	f7fc fee5 	bl	8000110 <__udivsi3>
 8003346:	0003      	movs	r3, r0
 8003348:	005a      	lsls	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	18d2      	adds	r2, r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0019      	movs	r1, r3
 8003358:	0010      	movs	r0, r2
 800335a:	f7fc fed9 	bl	8000110 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b0f      	cmp	r3, #15
 8003366:	d91c      	bls.n	80033a2 <UART_SetConfig+0x2b6>
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	429a      	cmp	r2, r3
 8003370:	d217      	bcs.n	80033a2 <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	b29a      	uxth	r2, r3
 8003376:	200e      	movs	r0, #14
 8003378:	183b      	adds	r3, r7, r0
 800337a:	210f      	movs	r1, #15
 800337c:	438a      	bics	r2, r1
 800337e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	b29b      	uxth	r3, r3
 8003386:	2207      	movs	r2, #7
 8003388:	4013      	ands	r3, r2
 800338a:	b299      	uxth	r1, r3
 800338c:	183b      	adds	r3, r7, r0
 800338e:	183a      	adds	r2, r7, r0
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	183a      	adds	r2, r7, r0
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e06f      	b.n	8003482 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80033a2:	231b      	movs	r3, #27
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e06a      	b.n	8003482 <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ac:	231a      	movs	r3, #26
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d015      	beq.n	80033e2 <UART_SetConfig+0x2f6>
 80033b6:	dc31      	bgt.n	800341c <UART_SetConfig+0x330>
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d00d      	beq.n	80033d8 <UART_SetConfig+0x2ec>
 80033bc:	dc2e      	bgt.n	800341c <UART_SetConfig+0x330>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <UART_SetConfig+0x2dc>
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d005      	beq.n	80033d2 <UART_SetConfig+0x2e6>
 80033c6:	e029      	b.n	800341c <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7ff fbe4 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80033cc:	0003      	movs	r3, r0
 80033ce:	617b      	str	r3, [r7, #20]
        break;
 80033d0:	e02b      	b.n	800342a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d2:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <UART_SetConfig+0x328>)
 80033d4:	617b      	str	r3, [r7, #20]
        break;
 80033d6:	e028      	b.n	800342a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d8:	f7ff fb50 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 80033dc:	0003      	movs	r3, r0
 80033de:	617b      	str	r3, [r7, #20]
        break;
 80033e0:	e023      	b.n	800342a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	617b      	str	r3, [r7, #20]
        break;
 80033e8:	e01f      	b.n	800342a <UART_SetConfig+0x33e>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	cfff69f3 	.word	0xcfff69f3
 80033f0:	ffffcfff 	.word	0xffffcfff
 80033f4:	11fff4ff 	.word	0x11fff4ff
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	40013c00 	.word	0x40013c00
 8003414:	00f42400 	.word	0x00f42400
 8003418:	08004e1c 	.word	0x08004e1c
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	231b      	movs	r3, #27
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
        break;
 8003428:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d028      	beq.n	8003482 <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003434:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <UART_SetConfig+0x3c0>)
 8003436:	0052      	lsls	r2, r2, #1
 8003438:	5ad3      	ldrh	r3, [r2, r3]
 800343a:	0019      	movs	r1, r3
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f7fc fe67 	bl	8000110 <__udivsi3>
 8003442:	0003      	movs	r3, r0
 8003444:	001a      	movs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	18d2      	adds	r2, r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0019      	movs	r1, r3
 8003454:	0010      	movs	r0, r2
 8003456:	f7fc fe5b 	bl	8000110 <__udivsi3>
 800345a:	0003      	movs	r3, r0
 800345c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d90a      	bls.n	800347a <UART_SetConfig+0x38e>
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	025b      	lsls	r3, r3, #9
 800346a:	429a      	cmp	r2, r3
 800346c:	d205      	bcs.n	800347a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	e003      	b.n	8003482 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800347a:	231b      	movs	r3, #27
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	226a      	movs	r2, #106	@ 0x6a
 8003486:	2101      	movs	r1, #1
 8003488:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2268      	movs	r2, #104	@ 0x68
 800348e:	2101      	movs	r1, #1
 8003490:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800349e:	231b      	movs	r3, #27
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	781b      	ldrb	r3, [r3, #0]
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b008      	add	sp, #32
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	08004e1c 	.word	0x08004e1c

080034b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034bc:	2208      	movs	r2, #8
 80034be:	4013      	ands	r3, r2
 80034c0:	d00b      	beq.n	80034da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4a4a      	ldr	r2, [pc, #296]	@ (80035f4 <UART_AdvFeatureConfig+0x144>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	2201      	movs	r2, #1
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00b      	beq.n	80034fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a43      	ldr	r2, [pc, #268]	@ (80035f8 <UART_AdvFeatureConfig+0x148>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d00b      	beq.n	800351e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a3b      	ldr	r2, [pc, #236]	@ (80035fc <UART_AdvFeatureConfig+0x14c>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d00b      	beq.n	8003540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4a34      	ldr	r2, [pc, #208]	@ (8003600 <UART_AdvFeatureConfig+0x150>)
 8003530:	4013      	ands	r3, r2
 8003532:	0019      	movs	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	2210      	movs	r2, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d00b      	beq.n	8003562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <UART_AdvFeatureConfig+0x154>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	2220      	movs	r2, #32
 8003568:	4013      	ands	r3, r2
 800356a:	d00b      	beq.n	8003584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4a25      	ldr	r2, [pc, #148]	@ (8003608 <UART_AdvFeatureConfig+0x158>)
 8003574:	4013      	ands	r3, r2
 8003576:	0019      	movs	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	2240      	movs	r2, #64	@ 0x40
 800358a:	4013      	ands	r3, r2
 800358c:	d01d      	beq.n	80035ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <UART_AdvFeatureConfig+0x15c>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	035b      	lsls	r3, r3, #13
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d10b      	bne.n	80035ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <UART_AdvFeatureConfig+0x160>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	4013      	ands	r3, r2
 80035d2:	d00b      	beq.n	80035ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a0e      	ldr	r2, [pc, #56]	@ (8003614 <UART_AdvFeatureConfig+0x164>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	ffff7fff 	.word	0xffff7fff
 80035f8:	fffdffff 	.word	0xfffdffff
 80035fc:	fffeffff 	.word	0xfffeffff
 8003600:	fffbffff 	.word	0xfffbffff
 8003604:	ffffefff 	.word	0xffffefff
 8003608:	ffffdfff 	.word	0xffffdfff
 800360c:	ffefffff 	.word	0xffefffff
 8003610:	ff9fffff 	.word	0xff9fffff
 8003614:	fff7ffff 	.word	0xfff7ffff

08003618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b092      	sub	sp, #72	@ 0x48
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2290      	movs	r2, #144	@ 0x90
 8003624:	2100      	movs	r1, #0
 8003626:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003628:	f7fd fcf4 	bl	8001014 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	4013      	ands	r3, r2
 800363a:	2b08      	cmp	r3, #8
 800363c:	d12d      	bne.n	800369a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003640:	2280      	movs	r2, #128	@ 0x80
 8003642:	0391      	lsls	r1, r2, #14
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	4a47      	ldr	r2, [pc, #284]	@ (8003764 <UART_CheckIdleState+0x14c>)
 8003648:	9200      	str	r2, [sp, #0]
 800364a:	2200      	movs	r2, #0
 800364c:	f000 f88e 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d022      	beq.n	800369a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365e:	2301      	movs	r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	438a      	bics	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2288      	movs	r2, #136	@ 0x88
 800368a:	2120      	movs	r1, #32
 800368c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2284      	movs	r2, #132	@ 0x84
 8003692:	2100      	movs	r1, #0
 8003694:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e060      	b.n	800375c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2204      	movs	r2, #4
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d146      	bne.n	8003736 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	2280      	movs	r2, #128	@ 0x80
 80036ac:	03d1      	lsls	r1, r2, #15
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <UART_CheckIdleState+0x14c>)
 80036b2:	9200      	str	r2, [sp, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f000 f859 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d03b      	beq.n	8003736 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80036c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c8:	2301      	movs	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4922      	ldr	r1, [pc, #136]	@ (8003768 <UART_CheckIdleState+0x150>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f0:	f3ef 8310 	mrs	r3, PRIMASK
 80036f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fa:	2301      	movs	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	438a      	bics	r2, r1
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	228c      	movs	r2, #140	@ 0x8c
 8003726:	2120      	movs	r1, #32
 8003728:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2284      	movs	r2, #132	@ 0x84
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e012      	b.n	800375c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2288      	movs	r2, #136	@ 0x88
 800373a:	2120      	movs	r1, #32
 800373c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	228c      	movs	r2, #140	@ 0x8c
 8003742:	2120      	movs	r1, #32
 8003744:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2284      	movs	r2, #132	@ 0x84
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b010      	add	sp, #64	@ 0x40
 8003762:	bd80      	pop	{r7, pc}
 8003764:	01ffffff 	.word	0x01ffffff
 8003768:	fffffedf 	.word	0xfffffedf

0800376c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	e051      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	3301      	adds	r3, #1
 8003782:	d04e      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fd fc46 	bl	8001014 <HAL_GetTick>
 8003788:	0002      	movs	r2, r0
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e051      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	d03b      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b80      	cmp	r3, #128	@ 0x80
 80037ae:	d038      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d035      	beq.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2208      	movs	r2, #8
 80037be:	4013      	ands	r3, r2
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d111      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2208      	movs	r2, #8
 80037ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 f83c 	bl	800384c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2290      	movs	r2, #144	@ 0x90
 80037d8:	2108      	movs	r1, #8
 80037da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2284      	movs	r2, #132	@ 0x84
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e02c      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	401a      	ands	r2, r3
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d112      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f81f 	bl	800384c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2290      	movs	r2, #144	@ 0x90
 8003812:	2120      	movs	r1, #32
 8003814:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2284      	movs	r2, #132	@ 0x84
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e00f      	b.n	8003842 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	425a      	negs	r2, r3
 8003832:	4153      	adcs	r3, r2
 8003834:	b2db      	uxtb	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d09e      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08e      	sub	sp, #56	@ 0x38
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003854:	f3ef 8310 	mrs	r3, PRIMASK
 8003858:	617b      	str	r3, [r7, #20]
  return(result);
 800385a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
 800385e:	2301      	movs	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4926      	ldr	r1, [pc, #152]	@ (8003910 <UART_EndRxTransfer+0xc4>)
 8003876:	400a      	ands	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003886:	f3ef 8310 	mrs	r3, PRIMASK
 800388a:	623b      	str	r3, [r7, #32]
  return(result);
 800388c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800388e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003890:	2301      	movs	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	491b      	ldr	r1, [pc, #108]	@ (8003914 <UART_EndRxTransfer+0xc8>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	f383 8810 	msr	PRIMASK, r3
}
 80038b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d118      	bne.n	80038f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c0:	f3ef 8310 	mrs	r3, PRIMASK
 80038c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	2301      	movs	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f383 8810 	msr	PRIMASK, r3
}
 80038d4:	46c0      	nop			@ (mov r8, r8)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2110      	movs	r1, #16
 80038e2:	438a      	bics	r2, r1
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	228c      	movs	r2, #140	@ 0x8c
 80038f6:	2120      	movs	r1, #32
 80038f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b00e      	add	sp, #56	@ 0x38
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	fffffedf 	.word	0xfffffedf
 8003914:	effffffe 	.word	0xeffffffe

08003918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2284      	movs	r2, #132	@ 0x84
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_UARTEx_DisableFifoMode+0x16>
 800392a:	2302      	movs	r3, #2
 800392c:	e027      	b.n	800397e <HAL_UARTEx_DisableFifoMode+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2284      	movs	r2, #132	@ 0x84
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2288      	movs	r2, #136	@ 0x88
 800393a:	2124      	movs	r1, #36	@ 0x24
 800393c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	438a      	bics	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <HAL_UARTEx_DisableFifoMode+0x70>)
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2288      	movs	r2, #136	@ 0x88
 8003970:	2120      	movs	r1, #32
 8003972:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2284      	movs	r2, #132	@ 0x84
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	dfffffff 	.word	0xdfffffff

0800398c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2284      	movs	r2, #132	@ 0x84
 800399a:	5c9b      	ldrb	r3, [r3, r2]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e02e      	b.n	8003a02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2284      	movs	r2, #132	@ 0x84
 80039a8:	2101      	movs	r1, #1
 80039aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2288      	movs	r2, #136	@ 0x88
 80039b0:	2124      	movs	r1, #36	@ 0x24
 80039b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	08d9      	lsrs	r1, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 f854 	bl	8003a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2288      	movs	r2, #136	@ 0x88
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2284      	movs	r2, #132	@ 0x84
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2284      	movs	r2, #132	@ 0x84
 8003a1a:	5c9b      	ldrb	r3, [r3, r2]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e02f      	b.n	8003a84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2284      	movs	r2, #132	@ 0x84
 8003a28:	2101      	movs	r1, #1
 8003a2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2288      	movs	r2, #136	@ 0x88
 8003a30:	2124      	movs	r1, #36	@ 0x24
 8003a32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	@ (8003a8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f813 	bl	8003a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2288      	movs	r2, #136	@ 0x88
 8003a76:	2120      	movs	r1, #32
 8003a78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2284      	movs	r2, #132	@ 0x84
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	f1ffffff 	.word	0xf1ffffff

08003a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	226a      	movs	r2, #106	@ 0x6a
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2268      	movs	r2, #104	@ 0x68
 8003aac:	2101      	movs	r1, #1
 8003aae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ab0:	e043      	b.n	8003b3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ab2:	260f      	movs	r6, #15
 8003ab4:	19bb      	adds	r3, r7, r6
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aba:	200e      	movs	r0, #14
 8003abc:	183b      	adds	r3, r7, r0
 8003abe:	2208      	movs	r2, #8
 8003ac0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	0e5b      	lsrs	r3, r3, #25
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	240d      	movs	r4, #13
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	2107      	movs	r1, #7
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	0f5b      	lsrs	r3, r3, #29
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	250c      	movs	r5, #12
 8003ae2:	197b      	adds	r3, r7, r5
 8003ae4:	2107      	movs	r1, #7
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	197a      	adds	r2, r7, r5
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	4914      	ldr	r1, [pc, #80]	@ (8003b44 <UARTEx_SetNbDataToProcess+0xb4>)
 8003af4:	5c8a      	ldrb	r2, [r1, r2]
 8003af6:	435a      	muls	r2, r3
 8003af8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003afa:	197b      	adds	r3, r7, r5
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b02:	0019      	movs	r1, r3
 8003b04:	f7fc fb8e 	bl	8000224 <__divsi3>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	b299      	uxth	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	226a      	movs	r2, #106	@ 0x6a
 8003b10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b12:	19bb      	adds	r3, r7, r6
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	193a      	adds	r2, r7, r4
 8003b18:	7812      	ldrb	r2, [r2, #0]
 8003b1a:	490a      	ldr	r1, [pc, #40]	@ (8003b44 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b1c:	5c8a      	ldrb	r2, [r1, r2]
 8003b1e:	435a      	muls	r2, r3
 8003b20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	4a08      	ldr	r2, [pc, #32]	@ (8003b48 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7fc fb7a 	bl	8000224 <__divsi3>
 8003b30:	0003      	movs	r3, r0
 8003b32:	b299      	uxth	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2268      	movs	r2, #104	@ 0x68
 8003b38:	5299      	strh	r1, [r3, r2]
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b005      	add	sp, #20
 8003b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	08004e34 	.word	0x08004e34
 8003b48:	08004e3c 	.word	0x08004e3c

08003b4c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b52:	4b25      	ldr	r3, [pc, #148]	@ (8003be8 <_DoInit+0x9c>)
 8003b54:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	22a8      	movs	r2, #168	@ 0xa8
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 fd6e 	bl	800463e <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2203      	movs	r2, #3
 8003b66:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <_DoInit+0xa0>)
 8003b72:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <_DoInit+0xa4>)
 8003b78:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	00d2      	lsls	r2, r2, #3
 8003b80:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4a15      	ldr	r2, [pc, #84]	@ (8003bec <_DoInit+0xa0>)
 8003b98:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	@ (8003bf4 <_DoInit+0xa8>)
 8003b9e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003bb8:	2300      	movs	r3, #0
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e00c      	b.n	8003bd8 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf8 <_DoInit+0xac>)
 8003bc6:	5cd1      	ldrb	r1, [r2, r3]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	18d3      	adds	r3, r2, r3
 8003bce:	1c0a      	adds	r2, r1, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d9ef      	bls.n	8003bbe <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000178 	.word	0x20000178
 8003bec:	080048a8 	.word	0x080048a8
 8003bf0:	20000220 	.word	0x20000220
 8003bf4:	20000620 	.word	0x20000620
 8003bf8:	08004e44 	.word	0x08004e44

08003bfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	@ 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	617b      	str	r3, [r7, #20]
    if (RdOff > WrOff) {
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d905      	bls.n	8003c2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	e007      	b.n	8003c3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1acb      	subs	r3, r1, r3
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d900      	bls.n	8003c4c <_WriteBlocking+0x50>
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d900      	bls.n	8003c58 <_WriteBlocking+0x5c>
 8003c56:	0013      	movs	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	18d3      	adds	r3, r2, r3
 8003c62:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    NumBytesWritten += NumBytesToWrite;
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	623b      	str	r3, [r7, #32]
    NumBytes        -= NumBytesToWrite;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	18d3      	adds	r3, r2, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
    while (NumBytesToWrite--) {
 8003c7c:	e007      	b.n	8003c8e <_WriteBlocking+0x92>
      *pDst++ = *pBuffer++;
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	1c53      	adds	r3, r2, #1
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	7812      	ldrb	r2, [r2, #0]
 8003c8c:	701a      	strb	r2, [r3, #0]
    while (NumBytesToWrite--) {
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	1e5a      	subs	r2, r3, #1
 8003c92:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f2      	bne.n	8003c7e <_WriteBlocking+0x82>
    NumBytesWritten += NumBytesToWrite;
    pBuffer         += NumBytesToWrite;
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d101      	bne.n	8003ca6 <_WriteBlocking+0xaa>
      WrOff = 0u;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1af      	bne.n	8003c12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b00a      	add	sp, #40	@ 0x28
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	617b      	str	r3, [r7, #20]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	613b      	str	r3, [r7, #16]
  if (Rem > NumBytes) {
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d91a      	bls.n	8003d16 <_WriteNoCheck+0x5a>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	18d3      	adds	r3, r2, r3
 8003ce8:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    WrOff += NumBytes;
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    while (NumBytes--) {
 8003cf2:	e007      	b.n	8003d04 <_WriteNoCheck+0x48>
      *pDst++ = *pData++;
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	1c53      	adds	r3, r2, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	61b9      	str	r1, [r7, #24]
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	701a      	strb	r2, [r3, #0]
    while (NumBytes--) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f2      	bne.n	8003cf4 <_WriteNoCheck+0x38>
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d14:	e02e      	b.n	8003d74 <_WriteNoCheck+0xb8>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = Rem;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 8003d24:	e007      	b.n	8003d36 <_WriteNoCheck+0x7a>
      *pDst++ = *pData++;
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	1c53      	adds	r3, r2, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	61b9      	str	r1, [r7, #24]
 8003d32:	7812      	ldrb	r2, [r2, #0]
 8003d34:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	61fa      	str	r2, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f2      	bne.n	8003d26 <_WriteNoCheck+0x6a>
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = NumBytes - Rem;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 8003d4e:	e007      	b.n	8003d60 <_WriteNoCheck+0xa4>
      *pDst++ = *pData++;
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	1c53      	adds	r3, r2, #1
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	61b9      	str	r1, [r7, #24]
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	1e5a      	subs	r2, r3, #1
 8003d64:	61fa      	str	r2, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f2      	bne.n	8003d50 <_WriteNoCheck+0x94>
    pRing->WrOff = NumBytes - Rem;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	60da      	str	r2, [r3, #12]
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b008      	add	sp, #32
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d808      	bhi.n	8003daa <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	e004      	b.n	8003db4 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003db4:	697b      	ldr	r3, [r7, #20]
}
 8003db6:	0018      	movs	r0, r3
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b006      	add	sp, #24
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <SEGGER_RTT_WriteNoLock+0xac>)
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d02e      	beq.n	8003e48 <SEGGER_RTT_WriteNoLock+0x88>
 8003dea:	d836      	bhi.n	8003e5a <SEGGER_RTT_WriteNoLock+0x9a>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <SEGGER_RTT_WriteNoLock+0x36>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d016      	beq.n	8003e22 <SEGGER_RTT_WriteNoLock+0x62>
 8003df4:	e031      	b.n	8003e5a <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff ffbf 	bl	8003d7c <_GetAvailWriteSpace>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d202      	bcs.n	8003e10 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003e0e:	e027      	b.n	8003e60 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	69b9      	ldr	r1, [r7, #24]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7ff ff4e 	bl	8003cbc <_WriteNoCheck>
    break;
 8003e20:	e01e      	b.n	8003e60 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7ff ffa9 	bl	8003d7c <_GetAvailWriteSpace>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d900      	bls.n	8003e38 <SEGGER_RTT_WriteNoLock+0x78>
 8003e36:	0013      	movs	r3, r2
 8003e38:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	69b9      	ldr	r1, [r7, #24]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ff3b 	bl	8003cbc <_WriteNoCheck>
    break;
 8003e46:	e00b      	b.n	8003e60 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fed4 	bl	8003bfc <_WriteBlocking>
 8003e54:	0003      	movs	r3, r0
 8003e56:	61fb      	str	r3, [r7, #28]
    break;
 8003e58:	e002      	b.n	8003e60 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
    break;
 8003e5e:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 8003e60:	69fb      	ldr	r3, [r7, #28]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b008      	add	sp, #32
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	20000178 	.word	0x20000178

08003e70 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ebc <SEGGER_RTT_Write+0x4c>)
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b53      	cmp	r3, #83	@ 0x53
 8003e88:	d001      	beq.n	8003e8e <SEGGER_RTT_Write+0x1e>
 8003e8a:	f7ff fe5f 	bl	8003b4c <_DoInit>
  SEGGER_RTT_LOCK();
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	2101      	movs	r1, #1
 8003e94:	f381 8810 	msr	PRIMASK, r1
 8003e98:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7ff ff8d 	bl	8003dc0 <SEGGER_RTT_WriteNoLock>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8003eb0:	697b      	ldr	r3, [r7, #20]
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b008      	add	sp, #32
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	20000178 	.word	0x20000178

08003ec0 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7fc f917 	bl	8000100 <strlen>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff ffc7 	bl	8003e70 <SEGGER_RTT_Write>
 8003ee2:	0003      	movs	r3, r0
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}

08003eec <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  _DoInit();
 8003ef0:	f7ff fe2c 	bl	8003b4c <_DoInit>
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	000a      	movs	r2, r1
 8003f04:	1cfb      	adds	r3, r7, #3
 8003f06:	701a      	strb	r2, [r3, #0]
  unsigned Cnt;

  Cnt = p->Cnt;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d80f      	bhi.n	8003f3a <_StoreChar+0x40>
    *(p->pBuffer + Cnt) = c;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	1cfa      	adds	r2, r7, #3
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d115      	bne.n	8003f72 <_StoreChar+0x78>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6918      	ldr	r0, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	001a      	movs	r2, r3
 8003f54:	f7ff ff8c 	bl	8003e70 <SEGGER_RTT_Write>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d004      	beq.n	8003f6c <_StoreChar+0x72>
      p->ReturnValue = -1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4252      	negs	r2, r2
 8003f68:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8003f6a:	e002      	b.n	8003f72 <_StoreChar+0x78>
      p->Cnt = 0u;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003f96:	e008      	b.n	8003faa <_PrintUnsigned+0x2e>
    Number = (Number / Base);
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	6a38      	ldr	r0, [r7, #32]
 8003f9c:	f7fc f8b8 	bl	8000110 <__udivsi3>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	623b      	str	r3, [r7, #32]
    Width++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d2f2      	bcs.n	8003f98 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d901      	bls.n	8003fbe <_PrintUnsigned+0x42>
    Width = NumDigits;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d12b      	bne.n	800401e <_PrintUnsigned+0xa2>
    if (FieldWidth != 0u) {
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d028      	beq.n	800401e <_PrintUnsigned+0xa2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <_PrintUnsigned+0x68>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <_PrintUnsigned+0x68>
        c = '0';
 8003fda:	231b      	movs	r3, #27
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2230      	movs	r2, #48	@ 0x30
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e003      	b.n	8003fec <_PrintUnsigned+0x70>
      } else {
        c = ' ';
 8003fe4:	231b      	movs	r3, #27
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2220      	movs	r2, #32
 8003fea:	701a      	strb	r2, [r3, #0]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003fec:	e00e      	b.n	800400c <_PrintUnsigned+0x90>
        FieldWidth--;
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003ff4:	231b      	movs	r3, #27
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff ff7b 	bl	8003efa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db07      	blt.n	800401c <_PrintUnsigned+0xa0>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <_PrintUnsigned+0xa2>
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	429a      	cmp	r2, r3
 8004018:	d3e9      	bcc.n	8003fee <_PrintUnsigned+0x72>
 800401a:	e000      	b.n	800401e <_PrintUnsigned+0xa2>
          break;
 800401c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	db57      	blt.n	80040d6 <_PrintUnsigned+0x15a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d903      	bls.n	8004034 <_PrintUnsigned+0xb8>
        NumDigits--;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	e00a      	b.n	800404a <_PrintUnsigned+0xce>
      } else {
        Div = v / Digit;
 8004034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004036:	68b8      	ldr	r0, [r7, #8]
 8004038:	f7fc f86a 	bl	8000110 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d200      	bcs.n	800404a <_PrintUnsigned+0xce>
          break;
 8004048:	e004      	b.n	8004054 <_PrintUnsigned+0xd8>
        }
      }
      Digit *= Base;
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4353      	muls	r3, r2
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004052:	e7e8      	b.n	8004026 <_PrintUnsigned+0xaa>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004056:	68b8      	ldr	r0, [r7, #8]
 8004058:	f7fc f85a 	bl	8000110 <__udivsi3>
 800405c:	0003      	movs	r3, r0
 800405e:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004064:	4353      	muls	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800406c:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <_PrintUnsigned+0x164>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	781a      	ldrb	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0011      	movs	r1, r2
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ff3e 	bl	8003efa <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	db09      	blt.n	800409a <_PrintUnsigned+0x11e>
        break;
      }
      Digit /= Base;
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800408a:	f7fc f841 	bl	8000110 <__udivsi3>
 800408e:	0003      	movs	r3, r0
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1dd      	bne.n	8004054 <_PrintUnsigned+0xd8>
 8004098:	e000      	b.n	800409c <_PrintUnsigned+0x120>
        break;
 800409a:	46c0      	nop			@ (mov r8, r8)
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	2201      	movs	r2, #1
 80040a0:	4013      	ands	r3, r2
 80040a2:	d018      	beq.n	80040d6 <_PrintUnsigned+0x15a>
      if (FieldWidth != 0u) {
 80040a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d015      	beq.n	80040d6 <_PrintUnsigned+0x15a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040aa:	e00b      	b.n	80040c4 <_PrintUnsigned+0x148>
          FieldWidth--;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	3b01      	subs	r3, #1
 80040b0:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2120      	movs	r1, #32
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff ff1f 	bl	8003efa <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db07      	blt.n	80040d4 <_PrintUnsigned+0x158>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <_PrintUnsigned+0x15a>
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d3ec      	bcc.n	80040ac <_PrintUnsigned+0x130>
          }
        }
      }
    }
  }
}
 80040d2:	e000      	b.n	80040d6 <_PrintUnsigned+0x15a>
            break;
 80040d4:	46c0      	nop			@ (mov r8, r8)
}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b00a      	add	sp, #40	@ 0x28
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	08004edc 	.word	0x08004edc

080040e4 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b089      	sub	sp, #36	@ 0x24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	17da      	asrs	r2, r3, #31
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	4053      	eors	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004100:	e009      	b.n	8004116 <_PrintInt+0x32>
    Number = (Number / (int)Base);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0019      	movs	r1, r3
 8004106:	6938      	ldr	r0, [r7, #16]
 8004108:	f7fc f88c 	bl	8000224 <__divsi3>
 800410c:	0003      	movs	r3, r0
 800410e:	613b      	str	r3, [r7, #16]
    Width++;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	daf1      	bge.n	8004102 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	429a      	cmp	r2, r3
 8004124:	d901      	bls.n	800412a <_PrintInt+0x46>
    Width = NumDigits;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <_PrintInt+0x60>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	db03      	blt.n	800413e <_PrintInt+0x5a>
 8004136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004138:	2204      	movs	r2, #4
 800413a:	4013      	ands	r3, r2
 800413c:	d002      	beq.n	8004144 <_PrintInt+0x60>
    FieldWidth--;
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	2202      	movs	r2, #2
 8004148:	4013      	ands	r3, r2
 800414a:	d002      	beq.n	8004152 <_PrintInt+0x6e>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01c      	beq.n	800418c <_PrintInt+0xa8>
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	d118      	bne.n	800418c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004160:	e00b      	b.n	800417a <_PrintInt+0x96>
        FieldWidth--;
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	62bb      	str	r3, [r7, #40]	@ 0x28
        _StoreChar(pBufferDesc, ' ');
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2120      	movs	r1, #32
 800416c:	0018      	movs	r0, r3
 800416e:	f7ff fec4 	bl	8003efa <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	db07      	blt.n	800418a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800417a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <_PrintInt+0xa8>
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	429a      	cmp	r2, r3
 8004186:	d3ec      	bcc.n	8004162 <_PrintInt+0x7e>
 8004188:	e000      	b.n	800418c <_PrintInt+0xa8>
          break;
 800418a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db4b      	blt.n	800422c <_PrintInt+0x148>
    if (v < 0) {
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da08      	bge.n	80041ac <_PrintInt+0xc8>
      v = -v;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	425b      	negs	r3, r3
 800419e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212d      	movs	r1, #45	@ 0x2d
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7ff fea8 	bl	8003efa <_StoreChar>
 80041aa:	e008      	b.n	80041be <_PrintInt+0xda>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	2204      	movs	r2, #4
 80041b0:	4013      	ands	r3, r2
 80041b2:	d004      	beq.n	80041be <_PrintInt+0xda>
      _StoreChar(pBufferDesc, '+');
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	212b      	movs	r1, #43	@ 0x2b
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fe9e 	bl	8003efa <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	db32      	blt.n	800422c <_PrintInt+0x148>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	2202      	movs	r2, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d01f      	beq.n	800420e <_PrintInt+0x12a>
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	2201      	movs	r2, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	d11b      	bne.n	800420e <_PrintInt+0x12a>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d118      	bne.n	800420e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d015      	beq.n	800420e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041e2:	e00b      	b.n	80041fc <_PrintInt+0x118>
            FieldWidth--;
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	62bb      	str	r3, [r7, #40]	@ 0x28
            _StoreChar(pBufferDesc, '0');
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2130      	movs	r1, #48	@ 0x30
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff fe83 	bl	8003efa <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db07      	blt.n	800420c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <_PrintInt+0x12a>
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	429a      	cmp	r2, r3
 8004208:	d3ec      	bcc.n	80041e4 <_PrintInt+0x100>
 800420a:	e000      	b.n	800420e <_PrintInt+0x12a>
              break;
 800420c:	46c0      	nop			@ (mov r8, r8)
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db0a      	blt.n	800422c <_PrintInt+0x148>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	683c      	ldr	r4, [r7, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	0023      	movs	r3, r4
 8004228:	f7ff fea8 	bl	8003f7c <_PrintUnsigned>
      }
    }
  }
}
 800422c:	46c0      	nop			@ (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b007      	add	sp, #28
 8004232:	bd90      	pop	{r4, r7, pc}

08004234 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b0a5      	sub	sp, #148	@ 0x94
 8004238:	af02      	add	r7, sp, #8
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8004240:	2154      	movs	r1, #84	@ 0x54
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2214      	movs	r2, #20
 8004246:	18ba      	adds	r2, r7, r2
 8004248:	601a      	str	r2, [r3, #0]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800424a:	187b      	adds	r3, r7, r1
 800424c:	2240      	movs	r2, #64	@ 0x40
 800424e:	605a      	str	r2, [r3, #4]
  BufferDesc.Cnt            = 0u;
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
  BufferDesc.RTTBufferIndex = BufferIndex;
 8004256:	187b      	adds	r3, r7, r1
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	611a      	str	r2, [r3, #16]
  BufferDesc.ReturnValue    = 0;
 800425c:	187b      	adds	r3, r7, r1
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]

  do {
    c = *sFormat;
 8004262:	2187      	movs	r1, #135	@ 0x87
 8004264:	187b      	adds	r3, r7, r1
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
    sFormat++;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	3301      	adds	r3, #1
 8004270:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8004272:	187b      	adds	r3, r7, r1
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d100      	bne.n	800427c <SEGGER_RTT_vprintf+0x48>
 800427a:	e1a2      	b.n	80045c2 <SEGGER_RTT_vprintf+0x38e>
      break;
    }
    if (c == '%') {
 800427c:	187b      	adds	r3, r7, r1
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b25      	cmp	r3, #37	@ 0x25
 8004282:	d000      	beq.n	8004286 <SEGGER_RTT_vprintf+0x52>
 8004284:	e18d      	b.n	80045a2 <SEGGER_RTT_vprintf+0x36e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004286:	2300      	movs	r3, #0
 8004288:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	2280      	movs	r2, #128	@ 0x80
 800428e:	18ba      	adds	r2, r7, r2
 8004290:	6013      	str	r3, [r2, #0]
      do {
        c = *sFormat;
 8004292:	2187      	movs	r1, #135	@ 0x87
 8004294:	187b      	adds	r3, r7, r1
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	701a      	strb	r2, [r3, #0]
        switch (c) {
 800429c:	187b      	adds	r3, r7, r1
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b30      	cmp	r3, #48	@ 0x30
 80042a2:	d010      	beq.n	80042c6 <SEGGER_RTT_vprintf+0x92>
 80042a4:	dc27      	bgt.n	80042f6 <SEGGER_RTT_vprintf+0xc2>
 80042a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80042a8:	d005      	beq.n	80042b6 <SEGGER_RTT_vprintf+0x82>
 80042aa:	dc24      	bgt.n	80042f6 <SEGGER_RTT_vprintf+0xc2>
 80042ac:	2b23      	cmp	r3, #35	@ 0x23
 80042ae:	d01a      	beq.n	80042e6 <SEGGER_RTT_vprintf+0xb2>
 80042b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80042b2:	d010      	beq.n	80042d6 <SEGGER_RTT_vprintf+0xa2>
 80042b4:	e01f      	b.n	80042f6 <SEGGER_RTT_vprintf+0xc2>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80042b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b8:	2201      	movs	r2, #1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	e01c      	b.n	8004300 <SEGGER_RTT_vprintf+0xcc>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80042c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c8:	2202      	movs	r2, #2
 80042ca:	4313      	orrs	r3, r2
 80042cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e014      	b.n	8004300 <SEGGER_RTT_vprintf+0xcc>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80042d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d8:	2204      	movs	r2, #4
 80042da:	4313      	orrs	r3, r2
 80042dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	e00c      	b.n	8004300 <SEGGER_RTT_vprintf+0xcc>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80042e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e8:	2208      	movs	r2, #8
 80042ea:	4313      	orrs	r3, r2
 80042ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	e004      	b.n	8004300 <SEGGER_RTT_vprintf+0xcc>
        default:  v = 0; break;
 80042f6:	2300      	movs	r3, #0
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	18ba      	adds	r2, r7, r2
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	46c0      	nop			@ (mov r8, r8)
        }
      } while (v);
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1c3      	bne.n	8004292 <SEGGER_RTT_vprintf+0x5e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800430a:	2300      	movs	r3, #0
 800430c:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 800430e:	2187      	movs	r1, #135	@ 0x87
 8004310:	187b      	adds	r3, r7, r1
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
        if ((c < '0') || (c > '9')) {
 8004318:	187b      	adds	r3, r7, r1
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b2f      	cmp	r3, #47	@ 0x2f
 800431e:	d912      	bls.n	8004346 <SEGGER_RTT_vprintf+0x112>
 8004320:	187b      	adds	r3, r7, r1
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b39      	cmp	r3, #57	@ 0x39
 8004326:	d80e      	bhi.n	8004346 <SEGGER_RTT_vprintf+0x112>
          break;
        }
        sFormat++;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	3301      	adds	r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800432e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004330:	0013      	movs	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	189b      	adds	r3, r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	001a      	movs	r2, r3
 800433a:	187b      	adds	r3, r7, r1
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	3b30      	subs	r3, #48	@ 0x30
 8004342:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8004344:	e7e3      	b.n	800430e <SEGGER_RTT_vprintf+0xda>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8004346:	217f      	movs	r1, #127	@ 0x7f
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
      Precision = 0u;
 800434e:	2300      	movs	r3, #0
 8004350:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8004352:	2087      	movs	r0, #135	@ 0x87
 8004354:	183b      	adds	r3, r7, r0
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	701a      	strb	r2, [r3, #0]
      if (c == '.') {
 800435c:	183b      	adds	r3, r7, r0
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b2e      	cmp	r3, #46	@ 0x2e
 8004362:	d134      	bne.n	80043ce <SEGGER_RTT_vprintf+0x19a>
        sFormat++;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3301      	adds	r3, #1
 8004368:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004370:	d10d      	bne.n	800438e <SEGGER_RTT_vprintf+0x15a>
          sFormat++;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8004378:	187b      	adds	r3, r7, r1
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
          Precision = va_arg(*pParamList, int);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	1d19      	adds	r1, r3, #4
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6011      	str	r1, [r2, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800438c:	e01f      	b.n	80043ce <SEGGER_RTT_vprintf+0x19a>
        } else {
          do {
            c = *sFormat;
 800438e:	2187      	movs	r1, #135	@ 0x87
 8004390:	187b      	adds	r3, r7, r1
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	701a      	strb	r2, [r3, #0]
            if ((c < '0') || (c > '9')) {
 8004398:	187b      	adds	r3, r7, r1
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b2f      	cmp	r3, #47	@ 0x2f
 800439e:	d916      	bls.n	80043ce <SEGGER_RTT_vprintf+0x19a>
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b39      	cmp	r3, #57	@ 0x39
 80043a6:	d812      	bhi.n	80043ce <SEGGER_RTT_vprintf+0x19a>
              break;
            }
            PrecisionSet = 1;
 80043a8:	237f      	movs	r3, #127	@ 0x7f
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
            sFormat++;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	3301      	adds	r3, #1
 80043b4:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 80043b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80043b8:	0013      	movs	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	001a      	movs	r2, r3
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	3b30      	subs	r3, #48	@ 0x30
 80043ca:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 80043cc:	e7df      	b.n	800438e <SEGGER_RTT_vprintf+0x15a>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80043ce:	2387      	movs	r3, #135	@ 0x87
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	7812      	ldrb	r2, [r2, #0]
 80043d6:	701a      	strb	r2, [r3, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 80043d8:	2287      	movs	r2, #135	@ 0x87
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b6c      	cmp	r3, #108	@ 0x6c
 80043e0:	d003      	beq.n	80043ea <SEGGER_RTT_vprintf+0x1b6>
 80043e2:	18bb      	adds	r3, r7, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	2b68      	cmp	r3, #104	@ 0x68
 80043e8:	d108      	bne.n	80043fc <SEGGER_RTT_vprintf+0x1c8>
          sFormat++;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3301      	adds	r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 80043f0:	2387      	movs	r3, #135	@ 0x87
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	7812      	ldrb	r2, [r2, #0]
 80043f8:	701a      	strb	r2, [r3, #0]
        if ((c == 'l') || (c == 'h')) {
 80043fa:	e7ed      	b.n	80043d8 <SEGGER_RTT_vprintf+0x1a4>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80043fc:	2387      	movs	r3, #135	@ 0x87
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b25      	cmp	r3, #37	@ 0x25
 8004404:	d100      	bne.n	8004408 <SEGGER_RTT_vprintf+0x1d4>
 8004406:	e0c0      	b.n	800458a <SEGGER_RTT_vprintf+0x356>
 8004408:	da00      	bge.n	800440c <SEGGER_RTT_vprintf+0x1d8>
 800440a:	e0c5      	b.n	8004598 <SEGGER_RTT_vprintf+0x364>
 800440c:	2b78      	cmp	r3, #120	@ 0x78
 800440e:	dd00      	ble.n	8004412 <SEGGER_RTT_vprintf+0x1de>
 8004410:	e0c2      	b.n	8004598 <SEGGER_RTT_vprintf+0x364>
 8004412:	2b58      	cmp	r3, #88	@ 0x58
 8004414:	da00      	bge.n	8004418 <SEGGER_RTT_vprintf+0x1e4>
 8004416:	e0bf      	b.n	8004598 <SEGGER_RTT_vprintf+0x364>
 8004418:	3b58      	subs	r3, #88	@ 0x58
 800441a:	2b20      	cmp	r3, #32
 800441c:	d900      	bls.n	8004420 <SEGGER_RTT_vprintf+0x1ec>
 800441e:	e0bb      	b.n	8004598 <SEGGER_RTT_vprintf+0x364>
 8004420:	009a      	lsls	r2, r3, #2
 8004422:	4b78      	ldr	r3, [pc, #480]	@ (8004604 <SEGGER_RTT_vprintf+0x3d0>)
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	469f      	mov	pc, r3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1d19      	adds	r1, r3, #4
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6011      	str	r1, [r2, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2280      	movs	r2, #128	@ 0x80
 8004438:	18b9      	adds	r1, r7, r2
 800443a:	600b      	str	r3, [r1, #0]
        c0 = (char)v;
 800443c:	216b      	movs	r1, #107	@ 0x6b
 800443e:	187b      	adds	r3, r7, r1
 8004440:	18ba      	adds	r2, r7, r2
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	701a      	strb	r2, [r3, #0]
        _StoreChar(&BufferDesc, c0);
 8004446:	187b      	adds	r3, r7, r1
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	2354      	movs	r3, #84	@ 0x54
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff fd52 	bl	8003efa <_StoreChar>
        break;
 8004456:	e0a0      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	1d19      	adds	r1, r3, #4
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6011      	str	r1, [r2, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2180      	movs	r1, #128	@ 0x80
 8004466:	187a      	adds	r2, r7, r1
 8004468:	6013      	str	r3, [r2, #0]
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 800446a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800446c:	187b      	adds	r3, r7, r1
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	2354      	movs	r3, #84	@ 0x54
 8004472:	18f8      	adds	r0, r7, r3
 8004474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	0013      	movs	r3, r2
 800447e:	220a      	movs	r2, #10
 8004480:	f7ff fe30 	bl	80040e4 <_PrintInt>
        break;
 8004484:	e089      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      case 'u':
        v = va_arg(*pParamList, int);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1d19      	adds	r1, r3, #4
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6011      	str	r1, [r2, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	18b9      	adds	r1, r7, r2
 8004496:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8004498:	18bb      	adds	r3, r7, r2
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800449e:	2354      	movs	r3, #84	@ 0x54
 80044a0:	18f8      	adds	r0, r7, r3
 80044a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	0013      	movs	r3, r2
 80044ac:	220a      	movs	r2, #10
 80044ae:	f7ff fd65 	bl	8003f7c <_PrintUnsigned>
        break;
 80044b2:	e072      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2280      	movs	r2, #128	@ 0x80
 80044c2:	18b9      	adds	r1, r7, r2
 80044c4:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 80044c6:	18bb      	adds	r3, r7, r2
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80044cc:	2354      	movs	r3, #84	@ 0x54
 80044ce:	18f8      	adds	r0, r7, r3
 80044d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	0013      	movs	r3, r2
 80044da:	2210      	movs	r2, #16
 80044dc:	f7ff fd4e 	bl	8003f7c <_PrintUnsigned>
        break;
 80044e0:	e05b      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	1d19      	adds	r1, r3, #4
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6011      	str	r1, [r2, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 80044f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <SEGGER_RTT_vprintf+0x2ce>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 80044f6:	4b44      	ldr	r3, [pc, #272]	@ (8004608 <SEGGER_RTT_vprintf+0x3d4>)
 80044f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 80044fa:	237f      	movs	r3, #127	@ 0x7f
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
          }
          do {
            c = *s;
 8004502:	2187      	movs	r1, #135	@ 0x87
 8004504:	187b      	adds	r3, r7, r1
 8004506:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	701a      	strb	r2, [r3, #0]
            s++;
 800450c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450e:	3301      	adds	r3, #1
 8004510:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8004512:	187b      	adds	r3, r7, r1
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01d      	beq.n	8004556 <SEGGER_RTT_vprintf+0x322>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 800451a:	237f      	movs	r3, #127	@ 0x7f
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <SEGGER_RTT_vprintf+0x2f6>
 8004524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 800452a:	2387      	movs	r3, #135	@ 0x87
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	2454      	movs	r4, #84	@ 0x54
 8004532:	193b      	adds	r3, r7, r4
 8004534:	0011      	movs	r1, r2
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff fcdf 	bl	8003efa <_StoreChar>
            Precision--;
 800453c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800453e:	3b01      	subs	r3, #1
 8004540:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8004542:	193b      	adds	r3, r7, r4
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	217f      	movs	r1, #127	@ 0x7f
 8004548:	187a      	adds	r2, r7, r1
 800454a:	1879      	adds	r1, r7, r1
 800454c:	7809      	ldrb	r1, [r1, #0]
 800454e:	7011      	strb	r1, [r2, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	dad6      	bge.n	8004502 <SEGGER_RTT_vprintf+0x2ce>
        }
        break;
 8004554:	e021      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
              break;
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	e01f      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
              break;
 800455a:	46c0      	nop			@ (mov r8, r8)
        break;
 800455c:	e01d      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      case 'p':
        v = va_arg(*pParamList, int);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	1d19      	adds	r1, r3, #4
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6011      	str	r1, [r2, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	18b9      	adds	r1, r7, r2
 800456e:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8004570:	18bb      	adds	r3, r7, r2
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	2354      	movs	r3, #84	@ 0x54
 8004576:	18f8      	adds	r0, r7, r3
 8004578:	2300      	movs	r3, #0
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	2308      	movs	r3, #8
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2308      	movs	r3, #8
 8004582:	2210      	movs	r2, #16
 8004584:	f7ff fcfa 	bl	8003f7c <_PrintUnsigned>
        break;
 8004588:	e007      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800458a:	2354      	movs	r3, #84	@ 0x54
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	2125      	movs	r1, #37	@ 0x25
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff fcb2 	bl	8003efa <_StoreChar>
        break;
 8004596:	e000      	b.n	800459a <SEGGER_RTT_vprintf+0x366>
      default:
        break;
 8004598:	46c0      	nop			@ (mov r8, r8)
      }
      sFormat++;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3301      	adds	r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e008      	b.n	80045b4 <SEGGER_RTT_vprintf+0x380>
    } else {
      _StoreChar(&BufferDesc, c);
 80045a2:	2387      	movs	r3, #135	@ 0x87
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	2354      	movs	r3, #84	@ 0x54
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fca3 	bl	8003efa <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 80045b4:	2354      	movs	r3, #84	@ 0x54
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	db00      	blt.n	80045c0 <SEGGER_RTT_vprintf+0x38c>
 80045be:	e650      	b.n	8004262 <SEGGER_RTT_vprintf+0x2e>
 80045c0:	e000      	b.n	80045c4 <SEGGER_RTT_vprintf+0x390>
      break;
 80045c2:	46c0      	nop			@ (mov r8, r8)

  if (BufferDesc.ReturnValue > 0) {
 80045c4:	2254      	movs	r2, #84	@ 0x54
 80045c6:	18bb      	adds	r3, r7, r2
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	dd13      	ble.n	80045f6 <SEGGER_RTT_vprintf+0x3c2>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80045ce:	18bb      	adds	r3, r7, r2
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <SEGGER_RTT_vprintf+0x3b2>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80045d6:	18bb      	adds	r3, r7, r2
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	2314      	movs	r3, #20
 80045dc:	18f9      	adds	r1, r7, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fc45 	bl	8003e70 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80045e6:	2154      	movs	r1, #84	@ 0x54
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	18d2      	adds	r2, r2, r3
 80045f2:	187b      	adds	r3, r7, r1
 80045f4:	60da      	str	r2, [r3, #12]
  }
  return BufferDesc.ReturnValue;
 80045f6:	2354      	movs	r3, #84	@ 0x54
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	68db      	ldr	r3, [r3, #12]
}
 80045fc:	0018      	movs	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	b023      	add	sp, #140	@ 0x8c
 8004602:	bd90      	pop	{r4, r7, pc}
 8004604:	08004e58 	.word	0x08004e58
 8004608:	080048b4 	.word	0x080048b4

0800460c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800460c:	b40e      	push	{r1, r2, r3}
 800460e:	b580      	push	{r7, lr}
 8004610:	b085      	sub	sp, #20
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8004616:	2320      	movs	r3, #32
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800461c:	2308      	movs	r3, #8
 800461e:	18fa      	adds	r2, r7, r3
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0018      	movs	r0, r3
 8004626:	f7ff fe05 	bl	8004234 <SEGGER_RTT_vprintf>
 800462a:	0003      	movs	r3, r0
 800462c:	60fb      	str	r3, [r7, #12]
  va_end(ParamList);
  return r;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b005      	add	sp, #20
 8004636:	bc80      	pop	{r7}
 8004638:	bc08      	pop	{r3}
 800463a:	b003      	add	sp, #12
 800463c:	4718      	bx	r3

0800463e <memset>:
 800463e:	0003      	movs	r3, r0
 8004640:	1882      	adds	r2, r0, r2
 8004642:	4293      	cmp	r3, r2
 8004644:	d100      	bne.n	8004648 <memset+0xa>
 8004646:	4770      	bx	lr
 8004648:	7019      	strb	r1, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	e7f9      	b.n	8004642 <memset+0x4>
	...

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	2600      	movs	r6, #0
 8004654:	4c0c      	ldr	r4, [pc, #48]	@ (8004688 <__libc_init_array+0x38>)
 8004656:	4d0d      	ldr	r5, [pc, #52]	@ (800468c <__libc_init_array+0x3c>)
 8004658:	1b64      	subs	r4, r4, r5
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	2600      	movs	r6, #0
 8004662:	f000 f819 	bl	8004698 <_init>
 8004666:	4c0a      	ldr	r4, [pc, #40]	@ (8004690 <__libc_init_array+0x40>)
 8004668:	4d0a      	ldr	r5, [pc, #40]	@ (8004694 <__libc_init_array+0x44>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	00b3      	lsls	r3, r6, #2
 8004676:	58eb      	ldr	r3, [r5, r3]
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	00b3      	lsls	r3, r6, #2
 8004680:	58eb      	ldr	r3, [r5, r3]
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	08004eec 	.word	0x08004eec
 800468c:	08004eec 	.word	0x08004eec
 8004690:	08004ef0 	.word	0x08004ef0
 8004694:	08004eec 	.word	0x08004eec

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
