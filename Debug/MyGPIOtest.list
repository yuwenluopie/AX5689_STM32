
MyGPIOtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  08004a18  08004a18  00005a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c0c  08005c0c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005c0c  08005c0c  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005c0c  08005c0c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00006c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005c14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  20000010  08005c24  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08005c24  00007644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea3  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  00018edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbd  00000000  00000000  0001c680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019837  00000000  00000000  0001d23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a60  00000000  00000000  00036a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ecf6  00000000  00000000  0004a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e91ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003540  00000000  00000000  000e9210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ec750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004a00 	.word	0x08004a00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004a00 	.word	0x08004a00

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <IO_Init>:
/**
 * @brief  Initialize GPIO pins for AX5689 and power stage control
 * @note   Based on official Step 2: Initialize I/O
 */
void IO_Init(void) 
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    // Initialize RTT for debug output
    SEGGER_RTT_Init();
 8000400:	f003 ff28 	bl	8004254 <SEGGER_RTT_Init>
    
    RTT_printf("=== Step 2: Initialize I/O ===\r\n");
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <IO_Init+0x88>)
 8000406:	0019      	movs	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f004 fab3 	bl	8004974 <SEGGER_RTT_printf>
    
    // Following official Axign documentation sequence:
    // SetPin(AX_MUTE_N, LOW); // 将放大器置于静音状态（音量为 0）
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 800040e:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <IO_Init+0x8c>)
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fa16 	bl	8001846 <HAL_GPIO_WritePin>
    RTT_printf("AX_MUTE_N set to LOW (amplifier muted)\r\n");
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <IO_Init+0x90>)
 800041c:	0019      	movs	r1, r3
 800041e:	2000      	movs	r0, #0
 8000420:	f004 faa8 	bl	8004974 <SEGGER_RTT_printf>
    
    // SetPin(PS_RESET_N, LOW); // 将功率级置于高阻态 (Hi-Z)
    // Note: PS_RESET_N corresponds to power stage reset, using available power control pins
    HAL_GPIO_WritePin(D5V2_EN_GPIO_Port, D5V2_EN_Pin, GPIO_PIN_RESET);
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	01db      	lsls	r3, r3, #7
 8000428:	4817      	ldr	r0, [pc, #92]	@ (8000488 <IO_Init+0x8c>)
 800042a:	2200      	movs	r2, #0
 800042c:	0019      	movs	r1, r3
 800042e:	f001 fa0a 	bl	8001846 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PVDD_EN_GPIO_Port, PVDD_EN_Pin, GPIO_PIN_RESET);
 8000432:	23a0      	movs	r3, #160	@ 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fa03 	bl	8001846 <HAL_GPIO_WritePin>
    RTT_printf("Power stage set to Hi-Z state\r\n");
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <IO_Init+0x94>)
 8000442:	0019      	movs	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f004 fa95 	bl	8004974 <SEGGER_RTT_printf>
    
    // delay(20); // 等待信号稳定 (ms)
    HAL_Delay(20);
 800044a:	2014      	movs	r0, #20
 800044c:	f000 ff84 	bl	8001358 <HAL_Delay>
    RTT_printf("Signal stabilization delay: 20ms\r\n");
 8000450:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <IO_Init+0x98>)
 8000452:	0019      	movs	r1, r3
 8000454:	2000      	movs	r0, #0
 8000456:	f004 fa8d 	bl	8004974 <SEGGER_RTT_printf>
    
    // SetPin(AX_RESET_N, LOW); // 禁用 Axign 控制器
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_RESET);
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	2101      	movs	r1, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f001 f9ef 	bl	8001846 <HAL_GPIO_WritePin>
    RTT_printf("AX_RESET_N set to LOW (Axign controller disabled)\r\n");
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <IO_Init+0x9c>)
 800046a:	0019      	movs	r1, r3
 800046c:	2000      	movs	r0, #0
 800046e:	f004 fa81 	bl	8004974 <SEGGER_RTT_printf>
    
    RTT_printf("I/O initialization completed according to official documentation.\r\n\r\n");
 8000472:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <IO_Init+0xa0>)
 8000474:	0019      	movs	r1, r3
 8000476:	2000      	movs	r0, #0
 8000478:	f004 fa7c 	bl	8004974 <SEGGER_RTT_printf>
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	08004a18 	.word	0x08004a18
 8000488:	50000800 	.word	0x50000800
 800048c:	08004a3c 	.word	0x08004a3c
 8000490:	08004a68 	.word	0x08004a68
 8000494:	08004a88 	.word	0x08004a88
 8000498:	08004aac 	.word	0x08004aac
 800049c:	08004ae0 	.word	0x08004ae0

080004a0 <AX5689_Read>:
 * @param  regAddr: Register address to read from
 * @param  data: Pointer to store the read 16-bit data
 * @retval HAL status
 */
HAL_StatusTypeDef AX5689_Read(uint16_t regAddr, uint16_t *data) 
{
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	0002      	movs	r2, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	1dbb      	adds	r3, r7, #6
 80004ac:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_ERROR;
 80004ae:	210f      	movs	r1, #15
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2];

    // Convert 16-bit register address to two 8-bit bytes
    buffer[0] = (regAddr >> 8) & 0xFF;
 80004b6:	1dbb      	adds	r3, r7, #6
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	0a1b      	lsrs	r3, r3, #8
 80004bc:	b29b      	uxth	r3, r3
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	250c      	movs	r5, #12
 80004c2:	197b      	adds	r3, r7, r5
 80004c4:	701a      	strb	r2, [r3, #0]
    buffer[1] = regAddr & 0xFF;
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	705a      	strb	r2, [r3, #1]

    // Send register address
    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 80004d0:	000e      	movs	r6, r1
 80004d2:	19bc      	adds	r4, r7, r6
 80004d4:	197a      	adds	r2, r7, r5
 80004d6:	4819      	ldr	r0, [pc, #100]	@ (800053c <AX5689_Read+0x9c>)
 80004d8:	2301      	movs	r3, #1
 80004da:	425b      	negs	r3, r3
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	2172      	movs	r1, #114	@ 0x72
 80004e2:	f001 fa73 	bl	80019cc <HAL_I2C_Master_Transmit>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 80004ea:	19bb      	adds	r3, r7, r6
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d11c      	bne.n	800052c <AX5689_Read+0x8c>
        // Receive data
        status = HAL_I2C_Master_Receive(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197a      	adds	r2, r7, r5
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <AX5689_Read+0x9c>)
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2302      	movs	r3, #2
 8000500:	2172      	movs	r1, #114	@ 0x72
 8000502:	f001 fb8d 	bl	8001c20 <HAL_I2C_Master_Receive>
 8000506:	0003      	movs	r3, r0
 8000508:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 800050a:	19bb      	adds	r3, r7, r6
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10c      	bne.n	800052c <AX5689_Read+0x8c>
            *data = ((uint16_t)buffer[0] << 8) | (uint16_t)buffer[1];
 8000512:	197b      	adds	r3, r7, r5
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b21b      	sxth	r3, r3
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	197b      	adds	r3, r7, r5
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	b21b      	sxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b21b      	sxth	r3, r3
 8000526:	b29a      	uxth	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	801a      	strh	r2, [r3, #0]
        }
    }
    
    return status;
 800052c:	230f      	movs	r3, #15
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	781b      	ldrb	r3, [r3, #0]
}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	b005      	add	sp, #20
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	20000034 	.word	0x20000034

08000540 <AX5689_Write>:
 * @param  regAddr: Register address to write to
 * @param  regVal: 16-bit value to write
 * @retval HAL status
 */
HAL_StatusTypeDef AX5689_Write(uint16_t regAddr, uint16_t regVal) 
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	0002      	movs	r2, r0
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	1c0a      	adds	r2, r1, #0
 8000550:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status;
    uint8_t data[4];

    // Format data: [RegAddr_MSB, RegAddr_LSB, Data_MSB, Data_LSB]
    data[0] = (regAddr >> 8) & 0xFF;
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	b29b      	uxth	r3, r3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	2508      	movs	r5, #8
 800055e:	197b      	adds	r3, r7, r5
 8000560:	701a      	strb	r2, [r3, #0]
    data[1] = regAddr & 0xFF;
 8000562:	1dbb      	adds	r3, r7, #6
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	197b      	adds	r3, r7, r5
 800056a:	705a      	strb	r2, [r3, #1]
    data[2] = (regVal >> 8) & 0xFF;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	197b      	adds	r3, r7, r5
 8000578:	709a      	strb	r2, [r3, #2]
    data[3] = regVal & 0xFF;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	197b      	adds	r3, r7, r5
 8000582:	70da      	strb	r2, [r3, #3]

    // Debug output - show what we're writing
    RTT_printf("Writing reg 0x%04X = 0x%04X\r\n", regAddr, regVal);
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881a      	ldrh	r2, [r3, #0]
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	490b      	ldr	r1, [pc, #44]	@ (80005bc <AX5689_Write+0x7c>)
 800058e:	2000      	movs	r0, #0
 8000590:	f004 f9f0 	bl	8004974 <SEGGER_RTT_printf>

    // Send complete transaction
    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, data, 4, 1000);
 8000594:	260f      	movs	r6, #15
 8000596:	19bc      	adds	r4, r7, r6
 8000598:	197a      	adds	r2, r7, r5
 800059a:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <AX5689_Write+0x80>)
 800059c:	23fa      	movs	r3, #250	@ 0xfa
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2304      	movs	r3, #4
 80005a4:	2172      	movs	r1, #114	@ 0x72
 80005a6:	f001 fa11 	bl	80019cc <HAL_I2C_Master_Transmit>
 80005aa:	0003      	movs	r3, r0
 80005ac:	7023      	strb	r3, [r4, #0]
    
    return status;
 80005ae:	19bb      	adds	r3, r7, r6
 80005b0:	781b      	ldrb	r3, [r3, #0]
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b005      	add	sp, #20
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	08004b28 	.word	0x08004b28
 80005c0:	20000034 	.word	0x20000034

080005c4 <AX5689_WriteRegisterSet>:
 * @brief  Write a complete register configuration set to AX5689
 * @param  ptrConfigArray: Pointer to configuration array
 * @note   Based on official AX568X_WriteRegisterSet implementation
 */
void AX5689_WriteRegisterSet(const uint16_t *ptrConfigArray) 
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    RTT_printf("Starting register configuration according to official documentation...\r\n");
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <AX5689_WriteRegisterSet+0x64>)
 80005ce:	0019      	movs	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f004 f9cf 	bl	8004974 <SEGGER_RTT_printf>

    // 循环直到数组命令结束
    // Loop until end of array commands
    while (*ptrConfigArray != 0xFFFF) {
 80005d6:	e018      	b.n	800060a <AX5689_WriteRegisterSet+0x46>
        uint16_t regAddr = ptrConfigArray[0];
 80005d8:	210e      	movs	r1, #14
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	801a      	strh	r2, [r3, #0]
        uint16_t regVal = ptrConfigArray[1];
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1c9a      	adds	r2, r3, #2
 80005e6:	200c      	movs	r0, #12
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	8812      	ldrh	r2, [r2, #0]
 80005ec:	801a      	strh	r2, [r3, #0]

        // AX568X_Write(axAddrI2C, ptrConfigArray[0], ptrConfigArray[1]);
        AX5689_Write(regAddr, regVal);
 80005ee:	183b      	adds	r3, r7, r0
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ffa1 	bl	8000540 <AX5689_Write>
        HAL_Delay(1); // Small delay between register writes
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 feaa 	bl	8001358 <HAL_Delay>
        
        // ptrConfigArray += 2; // 转到数组中的下一个地址
        // Move to next address in array
        ptrConfigArray += 2;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	607b      	str	r3, [r7, #4]
    while (*ptrConfigArray != 0xFFFF) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	4a07      	ldr	r2, [pc, #28]	@ (800062c <AX5689_WriteRegisterSet+0x68>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d1e1      	bne.n	80005d8 <AX5689_WriteRegisterSet+0x14>
    }

    RTT_printf("Register configuration completed according to official documentation.\r\n");
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <AX5689_WriteRegisterSet+0x6c>)
 8000616:	0019      	movs	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f004 f9ab 	bl	8004974 <SEGGER_RTT_printf>
}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	08004b48 	.word	0x08004b48
 800062c:	0000ffff 	.word	0x0000ffff
 8000630:	08004b94 	.word	0x08004b94

08000634 <AX5689_Setup>:
/**
 * @brief  Setup AX5689 with current configuration mode
 * @note   Based on official Step 4: Set up AX5688/AX5689
 */
void AX5689_Setup(void) 
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    RTT_printf("=== Step 4: Set up AX5688/AX5689 ===\r\n");
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <AX5689_Setup+0x78>)
 800063a:	0019      	movs	r1, r3
 800063c:	2000      	movs	r0, #0
 800063e:	f004 f999 	bl	8004974 <SEGGER_RTT_printf>
    
    // SetPin(AX_RESET_N, HIGH); // 启用 AX5688 或 AX5689
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_SET);
 8000642:	23a0      	movs	r3, #160	@ 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f001 f8fb 	bl	8001846 <HAL_GPIO_WritePin>
    RTT_printf("AX_RESET_N set to HIGH (Enable AX5689)\r\n");
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <AX5689_Setup+0x7c>)
 8000652:	0019      	movs	r1, r3
 8000654:	2000      	movs	r0, #0
 8000656:	f004 f98d 	bl	8004974 <SEGGER_RTT_printf>
    
    // AX568X_WriteRegisterSet(axAddrI2C, &amplifierCommands[0]); 
    // 从支持文件中写入"寄存器设置"
    if (current_config_mode == AX5689_CLOSELOOP_MODE) {
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <AX5689_Setup+0x80>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d109      	bne.n	8000676 <AX5689_Setup+0x42>
        RTT_printf("Writing CloseLoop register configuration...\r\n");
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <AX5689_Setup+0x84>)
 8000664:	0019      	movs	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f004 f984 	bl	8004974 <SEGGER_RTT_printf>
        AX5689_WriteRegisterSet(amplifierCommands_CloseLoop);
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <AX5689_Setup+0x88>)
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff ffa8 	bl	80005c4 <AX5689_WriteRegisterSet>
 8000674:	e008      	b.n	8000688 <AX5689_Setup+0x54>
    } else {
        RTT_printf("Writing OpenLoop register configuration...\r\n");
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <AX5689_Setup+0x8c>)
 8000678:	0019      	movs	r1, r3
 800067a:	2000      	movs	r0, #0
 800067c:	f004 f97a 	bl	8004974 <SEGGER_RTT_printf>
        AX5689_WriteRegisterSet(amplifierCommands);
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <AX5689_Setup+0x90>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff9e 	bl	80005c4 <AX5689_WriteRegisterSet>
    }
    
    // delay(500); // 系统稳定时间 (ms)
    HAL_Delay(500);
 8000688:	23fa      	movs	r3, #250	@ 0xfa
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fe63 	bl	8001358 <HAL_Delay>
    RTT_printf("System stabilization delay: 500ms\r\n");
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <AX5689_Setup+0x94>)
 8000694:	0019      	movs	r1, r3
 8000696:	2000      	movs	r0, #0
 8000698:	f004 f96c 	bl	8004974 <SEGGER_RTT_printf>
    RTT_printf("AX5689 setup completed according to official documentation.\r\n\r\n");
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <AX5689_Setup+0x98>)
 800069e:	0019      	movs	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f004 f967 	bl	8004974 <SEGGER_RTT_printf>
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08004bdc 	.word	0x08004bdc
 80006b0:	08004c04 	.word	0x08004c04
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	08004c30 	.word	0x08004c30
 80006bc:	080055dc 	.word	0x080055dc
 80006c0:	08004c60 	.word	0x08004c60
 80006c4:	080050dc 	.word	0x080050dc
 80006c8:	08004c90 	.word	0x08004c90
 80006cc:	08004cb4 	.word	0x08004cb4

080006d0 <StartControlLoop>:
/**
 * @brief  Start the AX5689 control loop
 * @note   Follows official Axign startup sequence to minimize pop noise
 */
void StartControlLoop(void) 
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    // Get current mode values
    uint16_t reg01_value, reg03_value, reg07_value, reg07_default;
    if (current_config_mode == AX5689_CLOSELOOP_MODE) {
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <StartControlLoop+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10d      	bne.n	80006fa <StartControlLoop+0x2a>
        reg01_value = 0xFFFF;  // REG01_VALUE from CloseLoop
 80006de:	1dbb      	adds	r3, r7, #6
 80006e0:	2201      	movs	r2, #1
 80006e2:	4252      	negs	r2, r2
 80006e4:	801a      	strh	r2, [r3, #0]
        reg03_value = 0x1155;  // REG03_VALUE from CloseLoop  
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <StartControlLoop+0xd4>)
 80006ea:	801a      	strh	r2, [r3, #0]
        reg07_value = 0x0001;  // REG07_VALUE from CloseLoop
 80006ec:	1cbb      	adds	r3, r7, #2
 80006ee:	2201      	movs	r2, #1
 80006f0:	801a      	strh	r2, [r3, #0]
        reg07_default = 0x0064; // REG07_VALUE_DEFAULT
 80006f2:	003b      	movs	r3, r7
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	e00d      	b.n	8000716 <StartControlLoop+0x46>
    } else {
        reg01_value = 0xFFFF;  // REG01_VALUE from OpenLoop
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	2201      	movs	r2, #1
 80006fe:	4252      	negs	r2, r2
 8000700:	801a      	strh	r2, [r3, #0]
        reg03_value = 0x5500;  // REG03_VALUE from OpenLoop
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	22aa      	movs	r2, #170	@ 0xaa
 8000706:	01d2      	lsls	r2, r2, #7
 8000708:	801a      	strh	r2, [r3, #0]
        reg07_value = 0x0001;  // REG07_VALUE from OpenLoop
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	2201      	movs	r2, #1
 800070e:	801a      	strh	r2, [r3, #0]
        reg07_default = 0x0064; // REG07_VALUE_DEFAULT
 8000710:	003b      	movs	r3, r7
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	801a      	strh	r2, [r3, #0]
    }

    RTT_printf("Starting control loop in %s mode...\r\n", 
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <StartControlLoop+0xd0>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <StartControlLoop+0x52>
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <StartControlLoop+0xd8>)
 8000720:	e000      	b.n	8000724 <StartControlLoop+0x54>
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <StartControlLoop+0xdc>)
 8000724:	4922      	ldr	r1, [pc, #136]	@ (80007b0 <StartControlLoop+0xe0>)
 8000726:	001a      	movs	r2, r3
 8000728:	2000      	movs	r0, #0
 800072a:	f004 f923 	bl	8004974 <SEGGER_RTT_printf>
               (current_config_mode == AX5689_CLOSELOOP_MODE) ? "CloseLoop" : "OpenLoop");

    // Step 1: Disable all loop filters and PWM modulators
    AX5689_Write(0x0001, 0xFF00); // REG01_VALUE_DEFAULT
 800072e:	23ff      	movs	r3, #255	@ 0xff
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	0019      	movs	r1, r3
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff03 	bl	8000540 <AX5689_Write>
    
    // Step 2: Set volume ramp time to fast
    AX5689_Write(0x0007, reg07_value);
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	0019      	movs	r1, r3
 8000740:	2007      	movs	r0, #7
 8000742:	f7ff fefd 	bl	8000540 <AX5689_Write>
    
    // Step 3: Set Pstart to 'high' to enable power stage
    AX5689_Write(0x0002, 0x1FFF); // REG02_PSTART_ENABLE
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <StartControlLoop+0xe4>)
 8000748:	0019      	movs	r1, r3
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff fef8 	bl	8000540 <AX5689_Write>
    
    // Step 4: Enable all loop filters and PWM modulators
    AX5689_Write(0x0001, reg01_value);
 8000750:	1dbb      	adds	r3, r7, #6
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fef2 	bl	8000540 <AX5689_Write>
    
    // Step 5: Enable external ADC feedback (mode-specific)
    AX5689_Write(0x0003, reg03_value);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	0019      	movs	r1, r3
 8000762:	2003      	movs	r0, #3
 8000764:	f7ff feec 	bl	8000540 <AX5689_Write>
    
    // Step 6: Wait 1ms
    HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fdf5 	bl	8001358 <HAL_Delay>
    
    // Step 7: Unmute amplifier
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_SET);
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <StartControlLoop+0xe8>)
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f866 	bl	8001846 <HAL_GPIO_WritePin>
    
    // Step 8: Wait for volume ramp up (20ms)
    HAL_Delay(20);
 800077a:	2014      	movs	r0, #20
 800077c:	f000 fdec 	bl	8001358 <HAL_Delay>
    
    // Step 9: Set volume ramp time to default value
    AX5689_Write(0x0007, reg07_default);
 8000780:	003b      	movs	r3, r7
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	2007      	movs	r0, #7
 8000788:	f7ff feda 	bl	8000540 <AX5689_Write>
    
    RTT_printf("Control loop started successfully.\r\n");
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <StartControlLoop+0xec>)
 800078e:	0019      	movs	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f004 f8ef 	bl	8004974 <SEGGER_RTT_printf>
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	00001155 	.word	0x00001155
 80007a8:	08004cf4 	.word	0x08004cf4
 80007ac:	08004d00 	.word	0x08004d00
 80007b0:	08004d0c 	.word	0x08004d0c
 80007b4:	00001fff 	.word	0x00001fff
 80007b8:	50000800 	.word	0x50000800
 80007bc:	08004d34 	.word	0x08004d34

080007c0 <StopControlLoop>:
/**
 * @brief  Stop the AX5689 control loop
 * @note   Follows official Axign shutdown sequence to minimize pop noise
 */
void StopControlLoop(void) 
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    RTT_printf("Stopping control loop...\r\n");
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <StopControlLoop+0x68>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f004 f8d3 	bl	8004974 <SEGGER_RTT_printf>
    
    // Step 1: Set volume ramp time to fast
    AX5689_Write(0x0007, 0x0001); // REG07_VALUE (fast ramp)
 80007ce:	2101      	movs	r1, #1
 80007d0:	2007      	movs	r0, #7
 80007d2:	f7ff feb5 	bl	8000540 <AX5689_Write>
    
    // Step 2: Mute amplifier (volume to 0)
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <StopControlLoop+0x6c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f832 	bl	8001846 <HAL_GPIO_WritePin>
    
    // Step 3: Wait for volume ramp down (20ms)
    HAL_Delay(20);
 80007e2:	2014      	movs	r0, #20
 80007e4:	f000 fdb8 	bl	8001358 <HAL_Delay>
    
    // Step 4: Set Pstart to 'low' to disable power stage
    AX5689_Write(0x0002, 0x17FF); // REG02_PSTART_DISABLE
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <StopControlLoop+0x70>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	2002      	movs	r0, #2
 80007ee:	f7ff fea7 	bl	8000540 <AX5689_Write>
    
    // Step 5: Wait for tristate to go low (20ms)
    HAL_Delay(20);
 80007f2:	2014      	movs	r0, #20
 80007f4:	f000 fdb0 	bl	8001358 <HAL_Delay>
    
    // Step 6: Disable/reset all loop filters and PWM modulators
    AX5689_Write(0x0001, 0xFF00); // REG01_VALUE_DEFAULT
 80007f8:	23ff      	movs	r3, #255	@ 0xff
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	0019      	movs	r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff fe9e 	bl	8000540 <AX5689_Write>
    
    // Step 7: Set volume ramp time to default value
    AX5689_Write(0x0007, 0x0064); // REG07_VALUE_DEFAULT
 8000804:	2164      	movs	r1, #100	@ 0x64
 8000806:	2007      	movs	r0, #7
 8000808:	f7ff fe9a 	bl	8000540 <AX5689_Write>
    
    // Step 8: Restore all ramps to default values
    AX5689_Write(0x0003, 0x0000); // REG03_VALUE_DEFAULT
 800080c:	2100      	movs	r1, #0
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff fe96 	bl	8000540 <AX5689_Write>
    
    // Step 9: Reset status registers
    clearStatusRegisters();
 8000814:	f000 f810 	bl	8000838 <clearStatusRegisters>
    
    RTT_printf("Control loop stopped successfully.\r\n");
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <StopControlLoop+0x74>)
 800081a:	0019      	movs	r1, r3
 800081c:	2000      	movs	r0, #0
 800081e:	f004 f8a9 	bl	8004974 <SEGGER_RTT_printf>
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08004d5c 	.word	0x08004d5c
 800082c:	50000800 	.word	0x50000800
 8000830:	000017ff 	.word	0x000017ff
 8000834:	08004d78 	.word	0x08004d78

08000838 <clearStatusRegisters>:
/**
 * @brief  Clear AX5689 status registers
 * @note   Read all status registers to clear status pin
 */
void clearStatusRegisters(void) 
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
    uint16_t temp;
    
    // Read all status registers to clear them
    AX5689_Read(0x003C, &temp); // Read register 60 (0x3C)
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	0019      	movs	r1, r3
 8000842:	203c      	movs	r0, #60	@ 0x3c
 8000844:	f7ff fe2c 	bl	80004a0 <AX5689_Read>
    AX5689_Read(0x003D, &temp); // Read register 61 (0x3D) 
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	0019      	movs	r1, r3
 800084c:	203d      	movs	r0, #61	@ 0x3d
 800084e:	f7ff fe27 	bl	80004a0 <AX5689_Read>
    AX5689_Read(0x003E, &temp); // Read register 62 (0x3E)
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	0019      	movs	r1, r3
 8000856:	203e      	movs	r0, #62	@ 0x3e
 8000858:	f7ff fe22 	bl	80004a0 <AX5689_Read>
    
    RTT_printf("Status registers cleared.\r\n");
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <clearStatusRegisters+0x38>)
 800085e:	0019      	movs	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f004 f887 	bl	8004974 <SEGGER_RTT_printf>
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	08004da0 	.word	0x08004da0

08000874 <checkStatusRegister>:

/**
 * @brief  Check AX5689 status register for errors
 */
void checkStatusRegister(void) 
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    uint16_t statusValue;
    static uint32_t lastCheckTime = 0;
    uint32_t currentTime = HAL_GetTick();
 800087a:	f000 fd63 	bl	8001344 <HAL_GetTick>
 800087e:	0003      	movs	r3, r0
 8000880:	607b      	str	r3, [r7, #4]
    
    // Check status every 1000ms to avoid flooding
    if (currentTime - lastCheckTime > 1000) {
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <checkStatusRegister+0x2c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	23fa      	movs	r3, #250	@ 0xfa
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	429a      	cmp	r2, r3
 8000890:	d902      	bls.n	8000898 <checkStatusRegister+0x24>
        lastCheckTime = currentTime;
 8000892:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <checkStatusRegister+0x2c>)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	601a      	str	r2, [r3, #0]
            if (statusValue != 0x0000) {
                RTT_printf("Status register warning: 0x%04X\r\n", statusValue);
            }
        } */
    }
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000030 	.word	0x20000030

080008a4 <AX5689_SetConfigMode>:
/**
 * @brief  Set the current configuration mode
 * @param  mode: Target configuration mode
 */
void AX5689_SetConfigMode(AX5689_ConfigMode_t mode) 
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
    current_config_mode = mode;
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <AX5689_SetConfigMode+0x1c>)
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	701a      	strb	r2, [r3, #0]
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <AX5689_GetConfigMode>:
/**
 * @brief  Get the current configuration mode
 * @retval Current configuration mode
 */
AX5689_ConfigMode_t AX5689_GetConfigMode(void) 
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
    return current_config_mode;
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <AX5689_GetConfigMode+0x10>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	2000002c 	.word	0x2000002c

080008d8 <AX5689_SwitchToOpenLoop>:

/**
 * @brief  Switch AX5689 to OpenLoop mode with proper stop/start sequence
 */
void AX5689_SwitchToOpenLoop(void) 
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
    RTT_printf("=== Switching to OpenLoop mode ===\r\n");
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <AX5689_SwitchToOpenLoop+0x84>)
 80008e0:	0019      	movs	r1, r3
 80008e2:	2000      	movs	r0, #0
 80008e4:	f004 f846 	bl	8004974 <SEGGER_RTT_printf>
    
    // Step 1: Stop current control loop properly
    StopControlLoop();
 80008e8:	f7ff ff6a 	bl	80007c0 <StopControlLoop>
    
    // Step 2: Set new configuration mode
    AX5689_SetConfigMode(AX5689_OPENLOOP_MODE);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ffd9 	bl	80008a4 <AX5689_SetConfigMode>
    
    // Step 3: Write new register configuration
    AX5689_Setup();
 80008f2:	f7ff fe9f 	bl	8000634 <AX5689_Setup>
    
    // Step 4: Start control loop with new configuration
    StartControlLoop();
 80008f6:	f7ff feeb 	bl	80006d0 <StartControlLoop>
    
    // Step 5: Verify mode switch by reading register 0x0003
    uint16_t reg03_value;
    if (AX5689_Read(0x0003, &reg03_value) == HAL_OK) {
 80008fa:	1dbb      	adds	r3, r7, #6
 80008fc:	0019      	movs	r1, r3
 80008fe:	2003      	movs	r0, #3
 8000900:	f7ff fdce 	bl	80004a0 <AX5689_Read>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d11f      	bne.n	8000948 <AX5689_SwitchToOpenLoop+0x70>
        RTT_printf("Register 0x0003 = 0x%04X (expected 0x5500 for OpenLoop)\r\n", reg03_value);
 8000908:	1dbb      	adds	r3, r7, #6
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <AX5689_SwitchToOpenLoop+0x88>)
 8000910:	0019      	movs	r1, r3
 8000912:	2000      	movs	r0, #0
 8000914:	f004 f82e 	bl	8004974 <SEGGER_RTT_printf>
        if (reg03_value == 0x5500) {
 8000918:	1dbb      	adds	r3, r7, #6
 800091a:	881a      	ldrh	r2, [r3, #0]
 800091c:	23aa      	movs	r3, #170	@ 0xaa
 800091e:	01db      	lsls	r3, r3, #7
 8000920:	429a      	cmp	r2, r3
 8000922:	d10c      	bne.n	800093e <AX5689_SwitchToOpenLoop+0x66>
            HAL_GPIO_WritePin(LED_ON_OFF_GPIO_Port, LED_ON_OFF_Pin, GPIO_PIN_RESET);
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	480e      	ldr	r0, [pc, #56]	@ (8000964 <AX5689_SwitchToOpenLoop+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	0019      	movs	r1, r3
 800092e:	f000 ff8a 	bl	8001846 <HAL_GPIO_WritePin>
            RTT_printf("✓ OpenLoop mode confirmed!\r\n");
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <AX5689_SwitchToOpenLoop+0x90>)
 8000934:	0019      	movs	r1, r3
 8000936:	2000      	movs	r0, #0
 8000938:	f004 f81c 	bl	8004974 <SEGGER_RTT_printf>
 800093c:	e004      	b.n	8000948 <AX5689_SwitchToOpenLoop+0x70>
        } else {
            RTT_printf("⚠ OpenLoop mode verification failed!\r\n");
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <AX5689_SwitchToOpenLoop+0x94>)
 8000940:	0019      	movs	r1, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f004 f816 	bl	8004974 <SEGGER_RTT_printf>
        }
    }
    
    RTT_printf("OpenLoop mode switch completed.\r\n\r\n");
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <AX5689_SwitchToOpenLoop+0x98>)
 800094a:	0019      	movs	r1, r3
 800094c:	2000      	movs	r0, #0
 800094e:	f004 f811 	bl	8004974 <SEGGER_RTT_printf>
}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	08004dbc 	.word	0x08004dbc
 8000960:	08004de4 	.word	0x08004de4
 8000964:	50000800 	.word	0x50000800
 8000968:	08004e20 	.word	0x08004e20
 800096c:	08004e40 	.word	0x08004e40
 8000970:	08004e6c 	.word	0x08004e6c

08000974 <AX5689_SwitchToCloseLoop>:

/**
 * @brief  Switch AX5689 to CloseLoop mode with proper stop/start sequence
 */
void AX5689_SwitchToCloseLoop(void) 
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
    RTT_printf("=== Switching to CloseLoop mode ===\r\n");
 800097a:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <AX5689_SwitchToCloseLoop+0x80>)
 800097c:	0019      	movs	r1, r3
 800097e:	2000      	movs	r0, #0
 8000980:	f003 fff8 	bl	8004974 <SEGGER_RTT_printf>
    
    // Step 1: Stop current control loop properly
    StopControlLoop();
 8000984:	f7ff ff1c 	bl	80007c0 <StopControlLoop>
    
    // Step 2: Set new configuration mode
    AX5689_SetConfigMode(AX5689_CLOSELOOP_MODE);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ff8b 	bl	80008a4 <AX5689_SetConfigMode>
    
    // Step 3: Write new register configuration
    AX5689_Setup();
 800098e:	f7ff fe51 	bl	8000634 <AX5689_Setup>
    
    // Step 4: Start control loop with new configuration
    StartControlLoop();
 8000992:	f7ff fe9d 	bl	80006d0 <StartControlLoop>
    
    // Step 5: Verify mode switch by reading register 0x0003
    uint16_t reg03_value;
    if (AX5689_Read(0x0003, &reg03_value) == HAL_OK) {
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	0019      	movs	r1, r3
 800099a:	2003      	movs	r0, #3
 800099c:	f7ff fd80 	bl	80004a0 <AX5689_Read>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d11e      	bne.n	80009e2 <AX5689_SwitchToCloseLoop+0x6e>
        RTT_printf("Register 0x0003 = 0x%04X (expected 0x1155 for CloseLoop)\r\n", reg03_value);
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	001a      	movs	r2, r3
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <AX5689_SwitchToCloseLoop+0x84>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	2000      	movs	r0, #0
 80009b0:	f003 ffe0 	bl	8004974 <SEGGER_RTT_printf>
        if (reg03_value == 0x1155) {
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <AX5689_SwitchToCloseLoop+0x88>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10c      	bne.n	80009d8 <AX5689_SwitchToCloseLoop+0x64>
            HAL_GPIO_WritePin(LED_ON_OFF_GPIO_Port, LED_ON_OFF_Pin, GPIO_PIN_SET);
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	480f      	ldr	r0, [pc, #60]	@ (8000a00 <AX5689_SwitchToCloseLoop+0x8c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	0019      	movs	r1, r3
 80009c8:	f000 ff3d 	bl	8001846 <HAL_GPIO_WritePin>
            RTT_printf("✓ CloseLoop mode confirmed!\r\n");
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <AX5689_SwitchToCloseLoop+0x90>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f003 ffcf 	bl	8004974 <SEGGER_RTT_printf>
 80009d6:	e004      	b.n	80009e2 <AX5689_SwitchToCloseLoop+0x6e>
        } else {
            RTT_printf("⚠ CloseLoop mode verification failed!\r\n");
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <AX5689_SwitchToCloseLoop+0x94>)
 80009da:	0019      	movs	r1, r3
 80009dc:	2000      	movs	r0, #0
 80009de:	f003 ffc9 	bl	8004974 <SEGGER_RTT_printf>
        }
    }
    
    RTT_printf("CloseLoop mode switch completed.\r\n\r\n");
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <AX5689_SwitchToCloseLoop+0x98>)
 80009e4:	0019      	movs	r1, r3
 80009e6:	2000      	movs	r0, #0
 80009e8:	f003 ffc4 	bl	8004974 <SEGGER_RTT_printf>
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08004e90 	.word	0x08004e90
 80009f8:	08004eb8 	.word	0x08004eb8
 80009fc:	00001155 	.word	0x00001155
 8000a00:	50000800 	.word	0x50000800
 8000a04:	08004ef4 	.word	0x08004ef4
 8000a08:	08004f14 	.word	0x08004f14
 8000a0c:	08004f40 	.word	0x08004f40

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fc1a 	bl	800124c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f82a 	bl	8000a70 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f000 f94c 	bl	8000cb8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a20:	f000 f87e 	bl	8000b20 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000a24:	f000 f8bc 	bl	8000ba0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a28:	f000 f8f8 	bl	8000c1c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  
  // Initialize AX5689 and RTT debug system
  AX5689_InitialSetup();
 8000a2c:	f000 f9f4 	bl	8000e18 <AX5689_InitialSetup>
  
  // Initialize GPIO mode switching
  GPIO_ModeSwitch_Init();
 8000a30:	f000 fa0e 	bl	8000e50 <GPIO_ModeSwitch_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  SEGGER_RTT_WriteString(0, "=== AX5689 GPIO Mode Switching System Started ===\r\n");
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <main+0x54>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f003 fbf5 	bl	8004228 <SEGGER_RTT_WriteString>
  SEGGER_RTT_WriteString(0, "Mode_Select Pin (PC9): LOW pulse = switch mode\r\n");
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <main+0x58>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f003 fbf0 	bl	8004228 <SEGGER_RTT_WriteString>
  SEGGER_RTT_WriteString(0, "System ready for operation.\r\n\r\n");
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <main+0x5c>)
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f003 fbeb 	bl	8004228 <SEGGER_RTT_WriteString>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Check AX5689 status register
    checkStatusRegister();
 8000a52:	f7ff ff0f 	bl	8000874 <checkStatusRegister>
    
    // Process GPIO mode switching
    GPIO_ModeSwitch_Process();
 8000a56:	f000 fa17 	bl	8000e88 <GPIO_ModeSwitch_Process>
    
    // Main loop delay
    HAL_Delay(MAIN_LOOP_DELAY_MS);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fc7c 	bl	8001358 <HAL_Delay>
    checkStatusRegister();
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	e7f6      	b.n	8000a52 <main+0x42>
 8000a64:	08004f68 	.word	0x08004f68
 8000a68:	08004f9c 	.word	0x08004f9c
 8000a6c:	08004fd0 	.word	0x08004fd0

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b093      	sub	sp, #76	@ 0x4c
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	2410      	movs	r4, #16
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2338      	movs	r3, #56	@ 0x38
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f003 ff90 	bl	80049a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a86:	003b      	movs	r3, r7
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f003 ff89 	bl	80049a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fd35 	bl	8002508 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	0252      	lsls	r2, r2, #9
 8000aaa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2210      	movs	r2, #16
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	0292      	lsls	r2, r2, #10
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	0492      	lsls	r2, r2, #18
 8000ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	0592      	lsls	r2, r2, #22
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fd5d 	bl	80025a0 <HAL_RCC_OscConfig>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000aea:	f000 fa29 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	003b      	movs	r3, r7
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2202      	movs	r2, #2
 8000af8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b06:	003b      	movs	r3, r7
 8000b08:	2102      	movs	r1, #2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 f862 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b14:	f000 fa14 	bl	8000f40 <Error_Handler>
  }
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b013      	add	sp, #76	@ 0x4c
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <MX_I2C2_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b9c <MX_I2C2_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fe8f 	bl	8001880 <HAL_I2C_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 f9eb 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 fc32 	bl	80023d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f9e2 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <MX_I2C2_Init+0x74>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fc75 	bl	8002470 <HAL_I2CEx_ConfigDigitalFilter>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f9d9 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000034 	.word	0x20000034
 8000b98:	40005800 	.word	0x40005800
 8000b9c:	00503d58 	.word	0x00503d58

08000ba0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <MX_SPI2_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bac:	2282      	movs	r2, #130	@ 0x82
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bba:	22c0      	movs	r2, #192	@ 0xc0
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	02d2      	lsls	r2, r2, #11
 8000bd2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bee:	2207      	movs	r2, #7
 8000bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bfe:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <MX_SPI2_Init+0x74>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f002 fb19 	bl	8003238 <HAL_SPI_Init>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 f999 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000088 	.word	0x20000088
 8000c18:	40003800 	.word	0x40003800

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c22:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <MX_USART1_UART_Init+0x98>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c28:	22e1      	movs	r2, #225	@ 0xe1
 8000c2a:	0252      	lsls	r2, r2, #9
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fb9e 	bl	80033a8 <HAL_UART_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f966 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 f83b 	bl	8003cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f95d 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f003 f872 	bl	8003d74 <HAL_UARTEx_SetRxFifoThreshold>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f000 f954 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f002 fff0 	bl	8003c80 <HAL_UARTEx_DisableFifoMode>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f94c 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	200000ec 	.word	0x200000ec
 8000cb4:	40013800 	.word	0x40013800

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08b      	sub	sp, #44	@ 0x2c
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	2414      	movs	r4, #20
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2314      	movs	r3, #20
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f003 fe6c 	bl	80049a6 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b4f      	ldr	r3, [pc, #316]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cda:	4b4c      	ldr	r3, [pc, #304]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce6:	4b49      	ldr	r3, [pc, #292]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cea:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000cec:	2120      	movs	r1, #32
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf2:	4b46      	ldr	r3, [pc, #280]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d02:	4b42      	ldr	r3, [pc, #264]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0a:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b3d      	ldr	r3, [pc, #244]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d22:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <MX_GPIO_Init+0x154>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d26:	2202      	movs	r2, #2
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000d2e:	4938      	ldr	r1, [pc, #224]	@ (8000e10 <MX_GPIO_Init+0x158>)
 8000d30:	4b38      	ldr	r3, [pc, #224]	@ (8000e14 <MX_GPIO_Init+0x15c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fd86 	bl	8001846 <HAL_GPIO_WritePin>
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AX_Reset_N_Pin|AX_State_Pin|PVDD_EN_Pin|LED_Display_CS_Pin
 8000d3a:	2398      	movs	r3, #152	@ 0x98
 8000d3c:	33ff      	adds	r3, #255	@ 0xff
 8000d3e:	0019      	movs	r1, r3
 8000d40:	23a0      	movs	r3, #160	@ 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2200      	movs	r2, #0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fd7d 	bl	8001846 <HAL_GPIO_WritePin>
                          |LED_Display_Data_Pin|MCU_Pstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D1V2_EN_Pin AX_3V3_Pin AX_5V_Pin D5V2_EN_Pin
                           AX_Mute_N_Pin LED_ON_OFF_Pin */
  GPIO_InitStruct.Pin = D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	4a30      	ldr	r2, [pc, #192]	@ (8000e10 <MX_GPIO_Init+0x158>)
 8000d50:	601a      	str	r2, [r3, #0]
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	4a2b      	ldr	r2, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0x15c>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f000 fbe2 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : AX_Reset_N_Pin AX_State_Pin */
  GPIO_InitStruct.Pin = AX_Reset_N_Pin|AX_State_Pin;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2203      	movs	r2, #3
 8000d74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2211      	movs	r2, #17
 8000d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	193a      	adds	r2, r7, r4
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	0011      	movs	r1, r2
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fbcf 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PVDD_EN_Pin LED_Display_CS_Pin LED_Display_Data_Pin MCU_Pstart_Pin */
  GPIO_InitStruct.Pin = PVDD_EN_Pin|LED_Display_CS_Pin|LED_Display_Data_Pin|MCU_Pstart_Pin;
 8000d96:	0021      	movs	r1, r4
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	22ca      	movs	r2, #202	@ 0xca
 8000d9c:	0052      	lsls	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	000c      	movs	r4, r1
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	193a      	adds	r2, r7, r4
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 fbb9 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Display_CLK_Pin */
  GPIO_InitStruct.Pin = LED_Display_CLK_Pin;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_Display_CLK_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	23a0      	movs	r3, #160	@ 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	0011      	movs	r1, r2
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fba9 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Select_Pin */
  GPIO_InitStruct.Pin = Mode_Select_Pin;
 8000de2:	0021      	movs	r1, r4
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2280      	movs	r2, #128	@ 0x80
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Mode_Select_GPIO_Port, &GPIO_InitStruct);
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <MX_GPIO_Init+0x15c>)
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0010      	movs	r0, r2
 8000e00:	f000 fb98 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b00b      	add	sp, #44	@ 0x2c
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	00007901 	.word	0x00007901
 8000e14:	50000800 	.word	0x50000800

08000e18 <AX5689_InitialSetup>:
  * @brief  Initialize AX5689 amplifier with initial configuration
  * @param  None
  * @retval None
  */
static void AX5689_InitialSetup(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  // Initialize AX5689 related I/O and RTT
  IO_Init();
 8000e1c:	f7ff faee 	bl	80003fc <IO_Init>
  // Set initial configuration mode
#if USE_CLOSELOOP_MODE
  AX5689_SetConfigMode(AX5689_CLOSELOOP_MODE);
  SEGGER_RTT_WriteString(0, "Initial mode: CloseLoop\r\n");
#else
  AX5689_SetConfigMode(AX5689_OPENLOOP_MODE);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fd3f 	bl	80008a4 <AX5689_SetConfigMode>
  SEGGER_RTT_WriteString(0, "Initial mode: OpenLoop\r\n");
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <AX5689_InitialSetup+0x30>)
 8000e28:	0019      	movs	r1, r3
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f003 f9fc 	bl	8004228 <SEGGER_RTT_WriteString>
#endif
  
  // Setup and start AX5689
  AX5689_Setup();
 8000e30:	f7ff fc00 	bl	8000634 <AX5689_Setup>
  StartControlLoop();
 8000e34:	f7ff fc4c 	bl	80006d0 <StartControlLoop>
  
  RTT_printf("AX5689 initialization completed.\r\n");
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <AX5689_InitialSetup+0x34>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f003 fd99 	bl	8004974 <SEGGER_RTT_printf>
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08004ff0 	.word	0x08004ff0
 8000e4c:	0800500c 	.word	0x0800500c

08000e50 <GPIO_ModeSwitch_Init>:
  * @brief  Initialize GPIO mode switching variables and state
  * @param  None
  * @retval None
  */
static void GPIO_ModeSwitch_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  // Initialize GPIO state variables
  mode_pin_prev_state = GPIO_PIN_SET;  // External pull-up, initial state is HIGH
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <GPIO_ModeSwitch_Init+0x28>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
  mode_pin_current_state = GPIO_PIN_SET;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <GPIO_ModeSwitch_Init+0x2c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
  mode_switch_debounce_counter = 0;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <GPIO_ModeSwitch_Init+0x30>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
  
  RTT_printf("GPIO mode switching initialized.\r\n");
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <GPIO_ModeSwitch_Init+0x34>)
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f003 fd82 	bl	8004974 <SEGGER_RTT_printf>
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000180 	.word	0x20000180
 8000e80:	20000184 	.word	0x20000184
 8000e84:	08005030 	.word	0x08005030

08000e88 <GPIO_ModeSwitch_Process>:
  * @brief  Process GPIO mode switching logic with debouncing
  * @param  None
  * @retval None
  */
static void GPIO_ModeSwitch_Process(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  // Read current GPIO state
  mode_pin_current_state = HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin);
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4a24      	ldr	r2, [pc, #144]	@ (8000f24 <GPIO_ModeSwitch_Process+0x9c>)
 8000e92:	0019      	movs	r1, r3
 8000e94:	0010      	movs	r0, r2
 8000e96:	f000 fcb9 	bl	800180c <HAL_GPIO_ReadPin>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <GPIO_ModeSwitch_Process+0xa0>)
 8000ea0:	701a      	strb	r2, [r3, #0]
  
  // Detect falling edge (HIGH to LOW transition)
  if (mode_pin_prev_state == GPIO_PIN_SET && mode_pin_current_state == GPIO_PIN_RESET) {
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <GPIO_ModeSwitch_Process+0xa4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10b      	bne.n	8000ec2 <GPIO_ModeSwitch_Process+0x3a>
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <GPIO_ModeSwitch_Process+0xa0>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d107      	bne.n	8000ec2 <GPIO_ModeSwitch_Process+0x3a>
    mode_switch_debounce_counter = DEBOUNCE_TIME_MS;
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <GPIO_ModeSwitch_Process+0xa8>)
 8000eb4:	220a      	movs	r2, #10
 8000eb6:	601a      	str	r2, [r3, #0]
    RTT_printf("Mode switch signal detected, debouncing...\r\n");
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <GPIO_ModeSwitch_Process+0xac>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f003 fd59 	bl	8004974 <SEGGER_RTT_printf>
  }
  
  // Debounce processing
  if (mode_switch_debounce_counter > 0) {
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <GPIO_ModeSwitch_Process+0xa8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d024      	beq.n	8000f14 <GPIO_ModeSwitch_Process+0x8c>
    mode_switch_debounce_counter--;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <GPIO_ModeSwitch_Process+0xa8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <GPIO_ModeSwitch_Process+0xa8>)
 8000ed2:	601a      	str	r2, [r3, #0]
    
    if (mode_switch_debounce_counter == 0) {
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <GPIO_ModeSwitch_Process+0xa8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d11b      	bne.n	8000f14 <GPIO_ModeSwitch_Process+0x8c>
      // Confirm signal is stable, execute mode switch
      if (HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin) == GPIO_PIN_RESET) {
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <GPIO_ModeSwitch_Process+0x9c>)
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	f000 fc91 	bl	800180c <HAL_GPIO_ReadPin>
 8000eea:	1e03      	subs	r3, r0, #0
 8000eec:	d112      	bne.n	8000f14 <GPIO_ModeSwitch_Process+0x8c>
        RTT_printf("Confirmed mode switch request!\r\n");
 8000eee:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <GPIO_ModeSwitch_Process+0xb0>)
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f003 fd3e 	bl	8004974 <SEGGER_RTT_printf>
        
        // Execute mode switching
        if (AX5689_GetConfigMode() == AX5689_OPENLOOP_MODE) {
 8000ef8:	f7ff fce4 	bl	80008c4 <AX5689_GetConfigMode>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d102      	bne.n	8000f06 <GPIO_ModeSwitch_Process+0x7e>
          AX5689_SwitchToCloseLoop();
 8000f00:	f7ff fd38 	bl	8000974 <AX5689_SwitchToCloseLoop>
 8000f04:	e001      	b.n	8000f0a <GPIO_ModeSwitch_Process+0x82>
        } else {
          AX5689_SwitchToOpenLoop();
 8000f06:	f7ff fce7 	bl	80008d8 <AX5689_SwitchToOpenLoop>
        }
        
        RTT_printf("Mode switched successfully!\r\n");
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <GPIO_ModeSwitch_Process+0xb4>)
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f003 fd30 	bl	8004974 <SEGGER_RTT_printf>
      }
    }
  }
  
  // Update previous state
  mode_pin_prev_state = mode_pin_current_state;
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <GPIO_ModeSwitch_Process+0xa0>)
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <GPIO_ModeSwitch_Process+0xa4>)
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	50000800 	.word	0x50000800
 8000f28:	20000180 	.word	0x20000180
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000184 	.word	0x20000184
 8000f34:	08005054 	.word	0x08005054
 8000f38:	08005084 	.word	0x08005084
 8000f3c:	080050a8 	.word	0x080050a8

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	2201      	movs	r2, #1
 8000f64:	4013      	ands	r3, r2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	0549      	lsls	r1, r1, #21
 8000f74:	430a      	orrs	r2, r1
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f78:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_MspInit+0x4c>)
 8000f7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	055b      	lsls	r3, r3, #21
 8000f80:	4013      	ands	r3, r2
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f86:	23c0      	movs	r3, #192	@ 0xc0
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fa08 	bl	80013a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b095      	sub	sp, #84	@ 0x54
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	233c      	movs	r3, #60	@ 0x3c
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	0018      	movs	r0, r3
 8000faa:	2314      	movs	r3, #20
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f003 fcf9 	bl	80049a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	2410      	movs	r4, #16
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	0018      	movs	r0, r3
 8000fba:	232c      	movs	r3, #44	@ 0x2c
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f003 fcf1 	bl	80049a6 <memset>
  if(hi2c->Instance==I2C2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <HAL_I2C_MspInit+0xb8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d13d      	bne.n	800104a <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2240      	movs	r2, #64	@ 0x40
 8000fd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 ffa3 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	1e03      	subs	r3, r0, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff ffab 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 8000fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB3     ------> I2C2_SCL
    PB4     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001002:	213c      	movs	r1, #60	@ 0x3c
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2218      	movs	r2, #24
 8001008:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2212      	movs	r2, #18
 800100e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2208      	movs	r2, #8
 8001020:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	187b      	adds	r3, r7, r1
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <HAL_I2C_MspInit+0xc0>)
 8001026:	0019      	movs	r1, r3
 8001028:	0010      	movs	r0, r2
 800102a:	f000 fa83 	bl	8001534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 8001030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	03c9      	lsls	r1, r1, #15
 8001038:	430a      	orrs	r2, r1
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_I2C_MspInit+0xbc>)
 800103e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	03db      	lsls	r3, r3, #15
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b015      	add	sp, #84	@ 0x54
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	40005800 	.word	0x40005800
 8001058:	40021000 	.word	0x40021000
 800105c:	50000400 	.word	0x50000400

08001060 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08b      	sub	sp, #44	@ 0x2c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	2414      	movs	r4, #20
 800106a:	193b      	adds	r3, r7, r4
 800106c:	0018      	movs	r0, r3
 800106e:	2314      	movs	r3, #20
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f003 fc97 	bl	80049a6 <memset>
  if(hspi->Instance==SPI2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_SPI_MspInit+0x8c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d130      	bne.n	80010e4 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 8001084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	01c9      	lsls	r1, r1, #7
 800108c:	430a      	orrs	r2, r1
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 8001092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	01db      	lsls	r3, r3, #7
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 80010a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 80010a4:	2102      	movs	r1, #2
 80010a6:	430a      	orrs	r2, r1
 80010a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_SPI_MspInit+0x90>)
 80010ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ae:	2202      	movs	r2, #2
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	22f0      	movs	r2, #240	@ 0xf0
 80010ba:	0212      	lsls	r2, r2, #8
 80010bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	0021      	movs	r1, r4
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2202      	movs	r2, #2
 80010c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <HAL_SPI_MspInit+0x94>)
 80010dc:	0019      	movs	r1, r3
 80010de:	0010      	movs	r0, r2
 80010e0:	f000 fa28 	bl	8001534 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b00b      	add	sp, #44	@ 0x2c
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	40003800 	.word	0x40003800
 80010f0:	40021000 	.word	0x40021000
 80010f4:	50000400 	.word	0x50000400

080010f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b095      	sub	sp, #84	@ 0x54
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	233c      	movs	r3, #60	@ 0x3c
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	0018      	movs	r0, r3
 8001106:	2314      	movs	r3, #20
 8001108:	001a      	movs	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f003 fc4b 	bl	80049a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	2410      	movs	r4, #16
 8001112:	193b      	adds	r3, r7, r4
 8001114:	0018      	movs	r0, r3
 8001116:	232c      	movs	r3, #44	@ 0x2c
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f003 fc43 	bl	80049a6 <memset>
  if(huart->Instance==USART1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a23      	ldr	r2, [pc, #140]	@ (80011b4 <HAL_UART_MspInit+0xbc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d13f      	bne.n	80011aa <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001136:	193b      	adds	r3, r7, r4
 8001138:	0018      	movs	r0, r3
 800113a:	f001 fef5 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d001      	beq.n	8001146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff fefd 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 800114c:	2180      	movs	r1, #128	@ 0x80
 800114e:	01c9      	lsls	r1, r1, #7
 8001150:	430a      	orrs	r2, r1
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001168:	2101      	movs	r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001172:	2201      	movs	r2, #1
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800117a:	213c      	movs	r1, #60	@ 0x3c
 800117c:	187b      	adds	r3, r7, r1
 800117e:	22c0      	movs	r2, #192	@ 0xc0
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2202      	movs	r2, #2
 8001188:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2201      	movs	r2, #1
 800119a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	187a      	adds	r2, r7, r1
 800119e:	23a0      	movs	r3, #160	@ 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 f9c5 	bl	8001534 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b015      	add	sp, #84	@ 0x54
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40021000 	.word	0x40021000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f89c 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f7ff fff7 	bl	80011ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001226:	f003 fbc7 	bl	80049b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800122a:	f7ff fbf1 	bl	8000a10 <main>

0800122e <LoopForever>:

LoopForever:
  b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800123c:	08005c14 	.word	0x08005c14
  ldr r2, =_sbss
 8001240:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001244:	20000644 	.word	0x20000644

08001248 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_IRQHandler>
	...

0800124c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_Init+0x3c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Init+0x3c>)
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	0049      	lsls	r1, r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f810 	bl	800128c <HAL_InitTick>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d003      	beq.n	8001278 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e001      	b.n	800127c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fe68 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_InitTick+0x88>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02b      	beq.n	80012fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_InitTick+0x8c>)
 80012a6:	681c      	ldr	r4, [r3, #0]
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_InitTick+0x88>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	0019      	movs	r1, r3
 80012ae:	23fa      	movs	r3, #250	@ 0xfa
 80012b0:	0098      	lsls	r0, r3, #2
 80012b2:	f7fe ff2d 	bl	8000110 <__udivsi3>
 80012b6:	0003      	movs	r3, r0
 80012b8:	0019      	movs	r1, r3
 80012ba:	0020      	movs	r0, r4
 80012bc:	f7fe ff28 	bl	8000110 <__udivsi3>
 80012c0:	0003      	movs	r3, r0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f000 f929 	bl	800151a <HAL_SYSTICK_Config>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d112      	bne.n	80012f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d80a      	bhi.n	80012e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	2301      	movs	r3, #1
 80012d6:	425b      	negs	r3, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 f908 	bl	80014f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_InitTick+0x90>)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e00d      	b.n	8001304 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e008      	b.n	8001304 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e003      	b.n	8001304 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001304:	230f      	movs	r3, #15
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	781b      	ldrb	r3, [r3, #0]
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b005      	add	sp, #20
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	2000000c 	.word	0x2000000c
 8001318:	20000004 	.word	0x20000004
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_IncTick+0x1c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_IncTick+0x20>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	18d2      	adds	r2, r2, r3
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_IncTick+0x20>)
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20000188 	.word	0x20000188

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b02      	ldr	r3, [pc, #8]	@ (8001354 <HAL_GetTick+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	20000188 	.word	0x20000188

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff fff0 	bl	8001344 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	001a      	movs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	189b      	adds	r3, r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	f7ff ffe0 	bl	8001344 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	2000000c 	.word	0x2000000c

080013a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a06      	ldr	r2, [pc, #24]	@ (80013c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	40010000 	.word	0x40010000
 80013c8:	fffff9ff 	.word	0xfffff9ff

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e0:	d828      	bhi.n	8001434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	33c0      	adds	r3, #192	@ 0xc0
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	589b      	ldr	r3, [r3, r2]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	@ 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	430a      	orrs	r2, r1
 800142c:	33c0      	adds	r3, #192	@ 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001432:	e031      	b.n	8001498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0019      	movs	r1, r3
 800143c:	230f      	movs	r3, #15
 800143e:	400b      	ands	r3, r1
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3306      	adds	r3, #6
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	@ 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	001c      	movs	r4, r3
 8001484:	230f      	movs	r3, #15
 8001486:	4023      	ands	r3, r4
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	430a      	orrs	r2, r1
 800148e:	3306      	adds	r3, #6
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	3304      	adds	r3, #4
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	045b      	lsls	r3, r3, #17
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d301      	bcc.n	80014c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014bc:	2301      	movs	r3, #1
 80014be:	e010      	b.n	80014e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <SysTick_Config+0x44>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	3a01      	subs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c8:	2301      	movs	r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	2103      	movs	r1, #3
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff7c 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x44>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	210f      	movs	r1, #15
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff ffbf 	bl	80014a8 <SysTick_Config>
 800152a:	0003      	movs	r3, r0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e14d      	b.n	80017e0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4091      	lsls	r1, r2
 800154e:	000a      	movs	r2, r1
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d100      	bne.n	800155c <HAL_GPIO_Init+0x28>
 800155a:	e13e      	b.n	80017da <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	4013      	ands	r3, r2
 8001564:	2b01      	cmp	r3, #1
 8001566:	d005      	beq.n	8001574 <HAL_GPIO_Init+0x40>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	4013      	ands	r3, r2
 8001570:	2b02      	cmp	r3, #2
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	2201      	movs	r2, #1
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	409a      	lsls	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	4013      	ands	r3, r2
 800161a:	2b02      	cmp	r3, #2
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	58d3      	ldr	r3, [r2, r3]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2207      	movs	r2, #7
 8001630:	4013      	ands	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2107      	movs	r1, #7
 800164a:	400b      	ands	r3, r1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	409a      	lsls	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	6939      	ldr	r1, [r7, #16]
 8001664:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	401a      	ands	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	23c0      	movs	r3, #192	@ 0xc0
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	4013      	ands	r3, r2
 80016a4:	d100      	bne.n	80016a8 <HAL_GPIO_Init+0x174>
 80016a6:	e098      	b.n	80017da <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016a8:	4a53      	ldr	r2, [pc, #332]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3318      	adds	r3, #24
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	589b      	ldr	r3, [r3, r2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	220f      	movs	r2, #15
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	23a0      	movs	r3, #160	@ 0xa0
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d019      	beq.n	800170a <HAL_GPIO_Init+0x1d6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a48      	ldr	r2, [pc, #288]	@ (80017fc <HAL_GPIO_Init+0x2c8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0x1d2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a47      	ldr	r2, [pc, #284]	@ (8001800 <HAL_GPIO_Init+0x2cc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00d      	beq.n	8001702 <HAL_GPIO_Init+0x1ce>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a46      	ldr	r2, [pc, #280]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d007      	beq.n	80016fe <HAL_GPIO_Init+0x1ca>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a45      	ldr	r2, [pc, #276]	@ (8001808 <HAL_GPIO_Init+0x2d4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d101      	bne.n	80016fa <HAL_GPIO_Init+0x1c6>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x1d8>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x1d8>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x1d8>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x1d8>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x1d8>
 800170a:	2300      	movs	r3, #0
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	2103      	movs	r1, #3
 8001710:	400a      	ands	r2, r1
 8001712:	00d2      	lsls	r2, r2, #3
 8001714:	4093      	lsls	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800171c:	4936      	ldr	r1, [pc, #216]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3318      	adds	r3, #24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	035b      	lsls	r3, r3, #13
 8001742:	4013      	ands	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174e:	4b2a      	ldr	r3, [pc, #168]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	039b      	lsls	r3, r3, #14
 800176c:	4013      	ands	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001778:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177e:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 8001780:	2384      	movs	r3, #132	@ 0x84
 8001782:	58d3      	ldr	r3, [r2, r3]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43da      	mvns	r2, r3
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a4:	4914      	ldr	r1, [pc, #80]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80017a6:	2284      	movs	r2, #132	@ 0x84
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	58d3      	ldr	r3, [r2, r3]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	4013      	ands	r3, r2
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017d2:	4909      	ldr	r1, [pc, #36]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	1e13      	subs	r3, r2, #0
 80017ea:	d000      	beq.n	80017ee <HAL_GPIO_Init+0x2ba>
 80017ec:	e6aa      	b.n	8001544 <HAL_GPIO_Init+0x10>
  }
}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b006      	add	sp, #24
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021800 	.word	0x40021800
 80017fc:	50000400 	.word	0x50000400
 8001800:	50000800 	.word	0x50000800
 8001804:	50000c00 	.word	0x50000c00
 8001808:	50001000 	.word	0x50001000

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	000a      	movs	r2, r1
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	1cba      	adds	r2, r7, #2
 8001820:	8812      	ldrh	r2, [r2, #0]
 8001822:	4013      	ands	r3, r2
 8001824:	d004      	beq.n	8001830 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e003      	b.n	8001838 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001830:	230f      	movs	r3, #15
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001838:	230f      	movs	r3, #15
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	781b      	ldrb	r3, [r3, #0]
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	0008      	movs	r0, r1
 8001850:	0011      	movs	r1, r2
 8001852:	1cbb      	adds	r3, r7, #2
 8001854:	1c02      	adds	r2, r0, #0
 8001856:	801a      	strh	r2, [r3, #0]
 8001858:	1c7b      	adds	r3, r7, #1
 800185a:	1c0a      	adds	r2, r1, #0
 800185c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185e:	1c7b      	adds	r3, r7, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001866:	1cbb      	adds	r3, r7, #2
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800186e:	e003      	b.n	8001878 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001870:	1cbb      	adds	r3, r7, #2
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e08f      	b.n	80019b2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2241      	movs	r2, #65	@ 0x41
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	@ 0x40
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fb77 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	@ 0x41
 80018b2:	2124      	movs	r1, #36	@ 0x24
 80018b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	438a      	bics	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	493b      	ldr	r1, [pc, #236]	@ (80019bc <HAL_I2C_Init+0x13c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4938      	ldr	r1, [pc, #224]	@ (80019c0 <HAL_I2C_Init+0x140>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	0209      	lsls	r1, r1, #8
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	e007      	b.n	800190e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2184      	movs	r1, #132	@ 0x84
 8001908:	0209      	lsls	r1, r1, #8
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d109      	bne.n	800192a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	0109      	lsls	r1, r1, #4
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e007      	b.n	800193a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4923      	ldr	r1, [pc, #140]	@ (80019c4 <HAL_I2C_Init+0x144>)
 8001936:	400a      	ands	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4920      	ldr	r1, [pc, #128]	@ (80019c8 <HAL_I2C_Init+0x148>)
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	491a      	ldr	r1, [pc, #104]	@ (80019c0 <HAL_I2C_Init+0x140>)
 8001956:	400a      	ands	r2, r1
 8001958:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	431a      	orrs	r2, r3
 8001964:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69d9      	ldr	r1, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2241      	movs	r2, #65	@ 0x41
 800199e:	2120      	movs	r1, #32
 80019a0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2242      	movs	r2, #66	@ 0x42
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	f0ffffff 	.word	0xf0ffffff
 80019c0:	ffff7fff 	.word	0xffff7fff
 80019c4:	fffff7ff 	.word	0xfffff7ff
 80019c8:	02008000 	.word	0x02008000

080019cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	0008      	movs	r0, r1
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	0019      	movs	r1, r3
 80019da:	230a      	movs	r3, #10
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	2308      	movs	r3, #8
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	1c0a      	adds	r2, r1, #0
 80019e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2241      	movs	r2, #65	@ 0x41
 80019ee:	5c9b      	ldrb	r3, [r3, r2]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d000      	beq.n	80019f8 <HAL_I2C_Master_Transmit+0x2c>
 80019f6:	e10a      	b.n	8001c0e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Master_Transmit+0x3a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e104      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2240      	movs	r2, #64	@ 0x40
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0e:	f7ff fc99 	bl	8001344 <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	0219      	lsls	r1, r3, #8
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2319      	movs	r3, #25
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 fa26 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001a28:	1e03      	subs	r3, r0, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0ef      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2241      	movs	r2, #65	@ 0x41
 8001a34:	2121      	movs	r1, #33	@ 0x21
 8001a36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2242      	movs	r2, #66	@ 0x42
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2208      	movs	r2, #8
 8001a50:	18ba      	adds	r2, r7, r2
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2bff      	cmp	r3, #255	@ 0xff
 8001a64:	d906      	bls.n	8001a74 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	22ff      	movs	r2, #255	@ 0xff
 8001a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	045b      	lsls	r3, r3, #17
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e007      	b.n	8001a84 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	049b      	lsls	r3, r3, #18
 8001a82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d027      	beq.n	8001adc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	697c      	ldr	r4, [r7, #20]
 8001ac8:	230a      	movs	r3, #10
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	4b51      	ldr	r3, [pc, #324]	@ (8001c18 <HAL_I2C_Master_Transmit+0x24c>)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	0023      	movs	r3, r4
 8001ad6:	f000 fc45 	bl	8002364 <I2C_TransferConfig>
 8001ada:	e06f      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	697c      	ldr	r4, [r7, #20]
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_I2C_Master_Transmit+0x24c>)
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	0023      	movs	r3, r4
 8001af2:	f000 fc37 	bl	8002364 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001af6:	e061      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 fa10 	bl	8001f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e081      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03a      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0x1f0>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d136      	bne.n	8001bbc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	0013      	movs	r3, r2
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2180      	movs	r1, #128	@ 0x80
 8001b5c:	f000 f98a 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	1e03      	subs	r3, r0, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e053      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2bff      	cmp	r3, #255	@ 0xff
 8001b70:	d911      	bls.n	8001b96 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	22ff      	movs	r2, #255	@ 0xff
 8001b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	045c      	lsls	r4, r3, #17
 8001b82:	230a      	movs	r3, #10
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	8819      	ldrh	r1, [r3, #0]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	0023      	movs	r3, r4
 8001b90:	f000 fbe8 	bl	8002364 <I2C_TransferConfig>
 8001b94:	e012      	b.n	8001bbc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	049c      	lsls	r4, r3, #18
 8001baa:	230a      	movs	r3, #10
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	8819      	ldrh	r1, [r3, #0]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	0023      	movs	r3, r4
 8001bb8:	f000 fbd4 	bl	8002364 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d198      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 f9ef 	bl	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e01a      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2220      	movs	r2, #32
 8001be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	490b      	ldr	r1, [pc, #44]	@ (8001c1c <HAL_I2C_Master_Transmit+0x250>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2241      	movs	r2, #65	@ 0x41
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2242      	movs	r2, #66	@ 0x42
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	2100      	movs	r1, #0
 8001c08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001c0e:	2302      	movs	r3, #2
  }
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b007      	add	sp, #28
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	80002000 	.word	0x80002000
 8001c1c:	fe00e800 	.word	0xfe00e800

08001c20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b089      	sub	sp, #36	@ 0x24
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	0008      	movs	r0, r1
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	230a      	movs	r3, #10
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	2308      	movs	r3, #8
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	1c0a      	adds	r2, r1, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2241      	movs	r2, #65	@ 0x41
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d000      	beq.n	8001c4c <HAL_I2C_Master_Receive+0x2c>
 8001c4a:	e0e8      	b.n	8001e1e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	5c9b      	ldrb	r3, [r3, r2]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Master_Receive+0x3a>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e0e2      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2240      	movs	r2, #64	@ 0x40
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c62:	f7ff fb6f 	bl	8001344 <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	0219      	lsls	r1, r3, #8
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2319      	movs	r3, #25
 8001c76:	2201      	movs	r2, #1
 8001c78:	f000 f8fc 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0cd      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	2122      	movs	r1, #34	@ 0x22
 8001c8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2242      	movs	r2, #66	@ 0x42
 8001c90:	2110      	movs	r1, #16
 8001c92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	18ba      	adds	r2, r7, r2
 8001ca6:	8812      	ldrh	r2, [r2, #0]
 8001ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2bff      	cmp	r3, #255	@ 0xff
 8001cb8:	d911      	bls.n	8001cde <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	22ff      	movs	r2, #255	@ 0xff
 8001cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	045c      	lsls	r4, r3, #17
 8001cca:	230a      	movs	r3, #10
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	8819      	ldrh	r1, [r3, #0]
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	4b55      	ldr	r3, [pc, #340]	@ (8001e28 <HAL_I2C_Master_Receive+0x208>)
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	0023      	movs	r3, r4
 8001cd8:	f000 fb44 	bl	8002364 <I2C_TransferConfig>
 8001cdc:	e076      	b.n	8001dcc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	2380      	movs	r3, #128	@ 0x80
 8001cf0:	049c      	lsls	r4, r3, #18
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	8819      	ldrh	r1, [r3, #0]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001e28 <HAL_I2C_Master_Receive+0x208>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	0023      	movs	r3, r4
 8001d00:	f000 fb30 	bl	8002364 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d04:	e062      	b.n	8001dcc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f993 	bl	8002038 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e082      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03a      	beq.n	8001dcc <HAL_I2C_Master_Receive+0x1ac>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d136      	bne.n	8001dcc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	0013      	movs	r3, r2
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	f000 f882 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e053      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2bff      	cmp	r3, #255	@ 0xff
 8001d80:	d911      	bls.n	8001da6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	22ff      	movs	r2, #255	@ 0xff
 8001d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	045c      	lsls	r4, r3, #17
 8001d92:	230a      	movs	r3, #10
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	8819      	ldrh	r1, [r3, #0]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	0023      	movs	r3, r4
 8001da0:	f000 fae0 	bl	8002364 <I2C_TransferConfig>
 8001da4:	e012      	b.n	8001dcc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	049c      	lsls	r4, r3, #18
 8001dba:	230a      	movs	r3, #10
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	8819      	ldrh	r1, [r3, #0]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	0023      	movs	r3, r4
 8001dc8:	f000 facc 	bl	8002364 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d197      	bne.n	8001d06 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 f8e7 	bl	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01a      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	490b      	ldr	r1, [pc, #44]	@ (8001e2c <HAL_I2C_Master_Receive+0x20c>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2241      	movs	r2, #65	@ 0x41
 8001e06:	2120      	movs	r1, #32
 8001e08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2242      	movs	r2, #66	@ 0x42
 8001e0e:	2100      	movs	r1, #0
 8001e10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
  }
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b007      	add	sp, #28
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	80002400 	.word	0x80002400
 8001e2c:	fe00e800 	.word	0xfe00e800

08001e30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d103      	bne.n	8001e4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d007      	beq.n	8001e6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
  }
}
 8001e6c:	46c0      	nop			@ (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e03a      	b.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f971 	bl	8002174 <I2C_IsErrorOccurred>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e040      	b.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	d02d      	beq.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea0:	f7ff fa50 	bl	8001344 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d302      	bcc.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d122      	bne.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	425a      	negs	r2, r3
 8001ec6:	4153      	adcs	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	001a      	movs	r2, r3
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d113      	bne.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	2220      	movs	r2, #32
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2241      	movs	r2, #65	@ 0x41
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2242      	movs	r2, #66	@ 0x42
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2240      	movs	r2, #64	@ 0x40
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e00f      	b.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	425a      	negs	r2, r3
 8001f0c:	4153      	adcs	r3, r2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	001a      	movs	r2, r3
 8001f12:	1dfb      	adds	r3, r7, #7
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d0b5      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f30:	e032      	b.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f000 f91b 	bl	8002174 <I2C_IsErrorOccurred>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e030      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	d025      	beq.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4c:	f7ff f9fa 	bl	8001344 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d302      	bcc.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11a      	bne.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d013      	beq.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	2220      	movs	r2, #32
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2241      	movs	r2, #65	@ 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2242      	movs	r2, #66	@ 0x42
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2240      	movs	r2, #64	@ 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e007      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d1c5      	bne.n	8001f32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fbc:	e02f      	b.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f8d5 	bl	8002174 <I2C_IsErrorOccurred>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e02d      	b.n	800202e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd2:	f7ff f9b7 	bl	8001344 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d302      	bcc.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11a      	bne.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d013      	beq.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2241      	movs	r2, #65	@ 0x41
 8002006:	2120      	movs	r1, #32
 8002008:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2242      	movs	r2, #66	@ 0x42
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2240      	movs	r2, #64	@ 0x40
 8002016:	2100      	movs	r1, #0
 8002018:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e007      	b.n	800202e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2220      	movs	r2, #32
 8002026:	4013      	ands	r3, r2
 8002028:	2b20      	cmp	r3, #32
 800202a:	d1c8      	bne.n	8001fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b004      	add	sp, #16
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2317      	movs	r3, #23
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800204c:	e07b      	b.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	0018      	movs	r0, r3
 8002056:	f000 f88d 	bl	8002174 <I2C_IsErrorOccurred>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d003      	beq.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800205e:	2317      	movs	r3, #23
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2220      	movs	r2, #32
 800206e:	4013      	ands	r3, r2
 8002070:	2b20      	cmp	r3, #32
 8002072:	d140      	bne.n	80020f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002074:	2117      	movs	r1, #23
 8002076:	187b      	adds	r3, r7, r1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d13b      	bne.n	80020f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2204      	movs	r2, #4
 8002086:	4013      	ands	r3, r2
 8002088:	2b04      	cmp	r3, #4
 800208a:	d106      	bne.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2210      	movs	r2, #16
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d123      	bne.n	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2210      	movs	r2, #16
 80020ae:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2204      	movs	r2, #4
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4929      	ldr	r1, [pc, #164]	@ (8002170 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2241      	movs	r2, #65	@ 0x41
 80020d2:	2120      	movs	r1, #32
 80020d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2242      	movs	r2, #66	@ 0x42
 80020da:	2100      	movs	r1, #0
 80020dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2240      	movs	r2, #64	@ 0x40
 80020e2:	2100      	movs	r1, #0
 80020e4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80020e6:	2317      	movs	r3, #23
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e002      	b.n	80020f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80020f6:	f7ff f925 	bl	8001344 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11c      	bne.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800210c:	2017      	movs	r0, #23
 800210e:	183b      	adds	r3, r7, r0
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d117      	bne.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	2b04      	cmp	r3, #4
 8002122:	d010      	beq.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	2220      	movs	r2, #32
 800212a:	431a      	orrs	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2241      	movs	r2, #65	@ 0x41
 8002134:	2120      	movs	r1, #32
 8002136:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2240      	movs	r2, #64	@ 0x40
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002140:	183b      	adds	r3, r7, r0
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	2b04      	cmp	r3, #4
 8002152:	d005      	beq.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002154:	2317      	movs	r3, #23
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d100      	bne.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800215e:	e776      	b.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002160:	2317      	movs	r3, #23
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b006      	add	sp, #24
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	fe00e800 	.word	0xfe00e800

08002174 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2327      	movs	r3, #39	@ 0x27
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2210      	movs	r2, #16
 800219c:	4013      	ands	r3, r2
 800219e:	d100      	bne.n	80021a2 <I2C_IsErrorOccurred+0x2e>
 80021a0:	e079      	b.n	8002296 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021aa:	e057      	b.n	800225c <I2C_IsErrorOccurred+0xe8>
 80021ac:	2227      	movs	r2, #39	@ 0x27
 80021ae:	18bb      	adds	r3, r7, r2
 80021b0:	18ba      	adds	r2, r7, r2
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	d04f      	beq.n	800225c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7ff f8c2 	bl	8001344 <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d302      	bcc.n	80021d2 <I2C_IsErrorOccurred+0x5e>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d144      	bne.n	800225c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	01db      	lsls	r3, r3, #7
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021e0:	2013      	movs	r0, #19
 80021e2:	183b      	adds	r3, r7, r0
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	2142      	movs	r1, #66	@ 0x42
 80021e8:	5c52      	ldrb	r2, [r2, r1]
 80021ea:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	401a      	ands	r2, r3
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d126      	bne.n	800224e <I2C_IsErrorOccurred+0xda>
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	01db      	lsls	r3, r3, #7
 8002206:	429a      	cmp	r2, r3
 8002208:	d021      	beq.n	800224e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800220a:	183b      	adds	r3, r7, r0
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b20      	cmp	r3, #32
 8002210:	d01d      	beq.n	800224e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	01c9      	lsls	r1, r1, #7
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002224:	f7ff f88e 	bl	8001344 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800222c:	e00f      	b.n	800224e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800222e:	f7ff f889 	bl	8001344 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b19      	cmp	r3, #25
 800223a:	d908      	bls.n	800224e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2220      	movs	r2, #32
 8002240:	4313      	orrs	r3, r2
 8002242:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002244:	2327      	movs	r3, #39	@ 0x27
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]

              break;
 800224c:	e006      	b.n	800225c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	2b20      	cmp	r3, #32
 800225a:	d1e8      	bne.n	800222e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2220      	movs	r2, #32
 8002264:	4013      	ands	r3, r2
 8002266:	2b20      	cmp	r3, #32
 8002268:	d004      	beq.n	8002274 <I2C_IsErrorOccurred+0x100>
 800226a:	2327      	movs	r3, #39	@ 0x27
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d09b      	beq.n	80021ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002274:	2327      	movs	r3, #39	@ 0x27
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d103      	bne.n	8002286 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2220      	movs	r2, #32
 8002284:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2204      	movs	r2, #4
 800228a:	4313      	orrs	r3, r2
 800228c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800228e:	2327      	movs	r3, #39	@ 0x27
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d00c      	beq.n	80022c2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4313      	orrs	r3, r2
 80022ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ba:	2327      	movs	r3, #39	@ 0x27
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	2380      	movs	r3, #128	@ 0x80
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00c      	beq.n	80022e6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	2208      	movs	r2, #8
 80022d0:	4313      	orrs	r3, r2
 80022d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2280      	movs	r2, #128	@ 0x80
 80022da:	00d2      	lsls	r2, r2, #3
 80022dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022de:	2327      	movs	r3, #39	@ 0x27
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d00c      	beq.n	800230a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2202      	movs	r2, #2
 80022f4:	4313      	orrs	r3, r2
 80022f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002302:	2327      	movs	r3, #39	@ 0x27
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800230a:	2327      	movs	r3, #39	@ 0x27
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01d      	beq.n	8002350 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff fd8a 	bl	8001e30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	490e      	ldr	r1, [pc, #56]	@ (8002360 <I2C_IsErrorOccurred+0x1ec>)
 8002328:	400a      	ands	r2, r1
 800232a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2241      	movs	r2, #65	@ 0x41
 800233c:	2120      	movs	r1, #32
 800233e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2242      	movs	r2, #66	@ 0x42
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2240      	movs	r2, #64	@ 0x40
 800234c:	2100      	movs	r1, #0
 800234e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002350:	2327      	movs	r3, #39	@ 0x27
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b00a      	add	sp, #40	@ 0x28
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	fe00e800 	.word	0xfe00e800

08002364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	0008      	movs	r0, r1
 800236e:	0011      	movs	r1, r2
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	240a      	movs	r4, #10
 8002374:	193b      	adds	r3, r7, r4
 8002376:	1c02      	adds	r2, r0, #0
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	2009      	movs	r0, #9
 800237c:	183b      	adds	r3, r7, r0
 800237e:	1c0a      	adds	r2, r1, #0
 8002380:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002382:	193b      	adds	r3, r7, r4
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	059b      	lsls	r3, r3, #22
 8002388:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800238a:	183b      	adds	r3, r7, r0
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	0419      	lsls	r1, r3, #16
 8002390:	23ff      	movs	r3, #255	@ 0xff
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002396:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	4313      	orrs	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ae:	0d51      	lsrs	r1, r2, #21
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	00d2      	lsls	r2, r2, #3
 80023b4:	400a      	ands	r2, r1
 80023b6:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <I2C_TransferConfig+0x70>)
 80023b8:	430a      	orrs	r2, r1
 80023ba:	43d2      	mvns	r2, r2
 80023bc:	401a      	ands	r2, r3
 80023be:	0011      	movs	r1, r2
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023ca:	46c0      	nop			@ (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b007      	add	sp, #28
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	03ff63ff 	.word	0x03ff63ff

080023d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	5c9b      	ldrb	r3, [r3, r2]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d138      	bne.n	8002460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e032      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2241      	movs	r2, #65	@ 0x41
 8002408:	2124      	movs	r1, #36	@ 0x24
 800240a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4911      	ldr	r1, [pc, #68]	@ (800246c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2241      	movs	r2, #65	@ 0x41
 8002450:	2120      	movs	r1, #32
 8002452:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	@ 0x40
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b002      	add	sp, #8
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	ffffefff 	.word	0xffffefff

08002470 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	@ 0x41
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d139      	bne.n	80024fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2240      	movs	r2, #64	@ 0x40
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e033      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2241      	movs	r2, #65	@ 0x41
 80024a0:	2124      	movs	r1, #36	@ 0x24
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2241      	movs	r2, #65	@ 0x41
 80024ea:	2120      	movs	r1, #32
 80024ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2240      	movs	r2, #64	@ 0x40
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
  }
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fffff0ff 	.word	0xfffff0ff

08002508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	@ (800257c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d11f      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	0013      	movs	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	189b      	adds	r3, r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4912      	ldr	r1, [pc, #72]	@ (8002584 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800253a:	0018      	movs	r0, r3
 800253c:	f7fd fde8 	bl	8000110 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	3301      	adds	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002546:	e008      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b01      	subs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e001      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e009      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	401a      	ands	r2, r3
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	429a      	cmp	r2, r3
 800256a:	d0ed      	beq.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			@ (mov r8, r8)
 8002578:	40007000 	.word	0x40007000
 800257c:	fffff9ff 	.word	0xfffff9ff
 8002580:	20000004 	.word	0x20000004
 8002584:	000f4240 	.word	0x000f4240

08002588 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <LL_RCC_GetAPB1Prescaler+0x14>)
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	23e0      	movs	r3, #224	@ 0xe0
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	4013      	ands	r3, r2
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e2fe      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <HAL_RCC_OscConfig+0x1e>
 80025bc:	e07c      	b.n	80026b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4bc3      	ldr	r3, [pc, #780]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2238      	movs	r2, #56	@ 0x38
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c8:	4bc0      	ldr	r3, [pc, #768]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2203      	movs	r2, #3
 80025ce:	4013      	ands	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d102      	bne.n	80025de <HAL_RCC_OscConfig+0x3e>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d10b      	bne.n	80025fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	4bb9      	ldr	r3, [pc, #740]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	029b      	lsls	r3, r3, #10
 80025ec:	4013      	ands	r3, r2
 80025ee:	d062      	beq.n	80026b6 <HAL_RCC_OscConfig+0x116>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d15e      	bne.n	80026b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e2d9      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x78>
 8002608:	4bb0      	ldr	r3, [pc, #704]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4baf      	ldr	r3, [pc, #700]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800260e:	2180      	movs	r1, #128	@ 0x80
 8002610:	0249      	lsls	r1, r1, #9
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e020      	b.n	800265a <HAL_RCC_OscConfig+0xba>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	23a0      	movs	r3, #160	@ 0xa0
 800261e:	02db      	lsls	r3, r3, #11
 8002620:	429a      	cmp	r2, r3
 8002622:	d10e      	bne.n	8002642 <HAL_RCC_OscConfig+0xa2>
 8002624:	4ba9      	ldr	r3, [pc, #676]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4ba8      	ldr	r3, [pc, #672]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	02c9      	lsls	r1, r1, #11
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	4ba6      	ldr	r3, [pc, #664]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4ba5      	ldr	r3, [pc, #660]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002638:	2180      	movs	r1, #128	@ 0x80
 800263a:	0249      	lsls	r1, r1, #9
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e00b      	b.n	800265a <HAL_RCC_OscConfig+0xba>
 8002642:	4ba2      	ldr	r3, [pc, #648]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4ba1      	ldr	r3, [pc, #644]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002648:	49a1      	ldr	r1, [pc, #644]	@ (80028d0 <HAL_RCC_OscConfig+0x330>)
 800264a:	400a      	ands	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	4b9f      	ldr	r3, [pc, #636]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b9e      	ldr	r3, [pc, #632]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002654:	499f      	ldr	r1, [pc, #636]	@ (80028d4 <HAL_RCC_OscConfig+0x334>)
 8002656:	400a      	ands	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d014      	beq.n	800268c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fe6f 	bl	8001344 <HAL_GetTick>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fe6a 	bl	8001344 <HAL_GetTick>
 8002670:	0002      	movs	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e298      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267e:	4b93      	ldr	r3, [pc, #588]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	029b      	lsls	r3, r3, #10
 8002686:	4013      	ands	r3, r2
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xcc>
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fe5a 	bl	8001344 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002696:	f7fe fe55 	bl	8001344 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b64      	cmp	r3, #100	@ 0x64
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e283      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a8:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0xf6>
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d100      	bne.n	80026c4 <HAL_RCC_OscConfig+0x124>
 80026c2:	e099      	b.n	80027f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c4:	4b81      	ldr	r3, [pc, #516]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2238      	movs	r2, #56	@ 0x38
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ce:	4b7f      	ldr	r3, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2203      	movs	r2, #3
 80026d4:	4013      	ands	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0x144>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d002      	beq.n	80026ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d135      	bne.n	8002756 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ea:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4013      	ands	r3, r2
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x162>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e256      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a74      	ldr	r2, [pc, #464]	@ (80028d8 <HAL_RCC_OscConfig+0x338>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	4b6e      	ldr	r3, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800271e:	4b6b      	ldr	r3, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6e      	ldr	r2, [pc, #440]	@ (80028dc <HAL_RCC_OscConfig+0x33c>)
 8002724:	4013      	ands	r3, r2
 8002726:	0019      	movs	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	4b67      	ldr	r3, [pc, #412]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002732:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	2207      	movs	r2, #7
 800273a:	4013      	ands	r3, r2
 800273c:	4a68      	ldr	r2, [pc, #416]	@ (80028e0 <HAL_RCC_OscConfig+0x340>)
 800273e:	40da      	lsrs	r2, r3
 8002740:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <HAL_RCC_OscConfig+0x344>)
 8002742:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002744:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <HAL_RCC_OscConfig+0x348>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe fd9f 	bl	800128c <HAL_InitTick>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d051      	beq.n	80027f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e22c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d030      	beq.n	80027c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800275e:	4b5b      	ldr	r3, [pc, #364]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5e      	ldr	r2, [pc, #376]	@ (80028dc <HAL_RCC_OscConfig+0x33c>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002772:	4b56      	ldr	r3, [pc, #344]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b55      	ldr	r3, [pc, #340]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	0049      	lsls	r1, r1, #1
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fde0 	bl	8001344 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fddb 	bl	8001344 <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e209      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	4b4b      	ldr	r3, [pc, #300]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4013      	ands	r3, r2
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b48      	ldr	r3, [pc, #288]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a4a      	ldr	r2, [pc, #296]	@ (80028d8 <HAL_RCC_OscConfig+0x338>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	021a      	lsls	r2, r3, #8
 80027b8:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e01b      	b.n	80027f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027c0:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027c6:	4949      	ldr	r1, [pc, #292]	@ (80028ec <HAL_RCC_OscConfig+0x34c>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdba 	bl	8001344 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fdb5 	bl	8001344 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1e3      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e8:	4b38      	ldr	r3, [pc, #224]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4013      	ands	r3, r2
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x236>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2208      	movs	r2, #8
 80027fe:	4013      	ands	r3, r2
 8002800:	d047      	beq.n	8002892 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002802:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	4013      	ands	r3, r2
 800280a:	2b18      	cmp	r3, #24
 800280c:	d10a      	bne.n	8002824 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d03c      	beq.n	8002892 <HAL_RCC_OscConfig+0x2f2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d138      	bne.n	8002892 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e1c5      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d019      	beq.n	8002860 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800282e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002830:	4b26      	ldr	r3, [pc, #152]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002832:	2101      	movs	r1, #1
 8002834:	430a      	orrs	r2, r1
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fd84 	bl	8001344 <HAL_GetTick>
 800283c:	0003      	movs	r3, r0
 800283e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002842:	f7fe fd7f 	bl	8001344 <HAL_GetTick>
 8002846:	0002      	movs	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1ad      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002854:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d0f1      	beq.n	8002842 <HAL_RCC_OscConfig+0x2a2>
 800285e:	e018      	b.n	8002892 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002862:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 8002866:	2101      	movs	r1, #1
 8002868:	438a      	bics	r2, r1
 800286a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fd6a 	bl	8001344 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fd65 	bl	8001344 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e193      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d1f1      	bne.n	8002876 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
 800289a:	d100      	bne.n	800289e <HAL_RCC_OscConfig+0x2fe>
 800289c:	e0c6      	b.n	8002a2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	231f      	movs	r3, #31
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2238      	movs	r2, #56	@ 0x38
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d11e      	bne.n	80028f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_OscConfig+0x32c>)
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x31e>
 80028bc:	e0b6      	b.n	8002a2c <HAL_RCC_OscConfig+0x48c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d000      	beq.n	80028c8 <HAL_RCC_OscConfig+0x328>
 80028c6:	e0b1      	b.n	8002a2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e171      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
 80028cc:	40021000 	.word	0x40021000
 80028d0:	fffeffff 	.word	0xfffeffff
 80028d4:	fffbffff 	.word	0xfffbffff
 80028d8:	ffff80ff 	.word	0xffff80ff
 80028dc:	ffffc7ff 	.word	0xffffc7ff
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	20000004 	.word	0x20000004
 80028e8:	20000008 	.word	0x20000008
 80028ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028f0:	4bb1      	ldr	r3, [pc, #708]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80028f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	4013      	ands	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_OscConfig+0x360>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x362>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d011      	beq.n	800292a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4bac      	ldr	r3, [pc, #688]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800290a:	4bab      	ldr	r3, [pc, #684]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 800290c:	2180      	movs	r1, #128	@ 0x80
 800290e:	0549      	lsls	r1, r1, #21
 8002910:	430a      	orrs	r2, r1
 8002912:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002914:	4ba8      	ldr	r3, [pc, #672]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	055b      	lsls	r3, r3, #21
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002922:	231f      	movs	r3, #31
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	4ba4      	ldr	r3, [pc, #656]	@ (8002bbc <HAL_RCC_OscConfig+0x61c>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4013      	ands	r3, r2
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002936:	4ba1      	ldr	r3, [pc, #644]	@ (8002bbc <HAL_RCC_OscConfig+0x61c>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4ba0      	ldr	r3, [pc, #640]	@ (8002bbc <HAL_RCC_OscConfig+0x61c>)
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	0049      	lsls	r1, r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002944:	f7fe fcfe 	bl	8001344 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294e:	f7fe fcf9 	bl	8001344 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e127      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002960:	4b96      	ldr	r3, [pc, #600]	@ (8002bbc <HAL_RCC_OscConfig+0x61c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x3e2>
 8002974:	4b90      	ldr	r3, [pc, #576]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002976:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002978:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 800297a:	2101      	movs	r1, #1
 800297c:	430a      	orrs	r2, r1
 800297e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002980:	e01c      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b05      	cmp	r3, #5
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x404>
 800298a:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 800298c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800298e:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002990:	2104      	movs	r1, #4
 8002992:	430a      	orrs	r2, r1
 8002994:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002996:	4b88      	ldr	r3, [pc, #544]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002998:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800299a:	4b87      	ldr	r3, [pc, #540]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 800299c:	2101      	movs	r1, #1
 800299e:	430a      	orrs	r2, r1
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
 80029a4:	4b84      	ldr	r3, [pc, #528]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80029a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029a8:	4b83      	ldr	r3, [pc, #524]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029b0:	4b81      	ldr	r3, [pc, #516]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80029b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029b4:	4b80      	ldr	r3, [pc, #512]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80029b6:	2104      	movs	r1, #4
 80029b8:	438a      	bics	r2, r1
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d014      	beq.n	80029ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fcbe 	bl	8001344 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029cc:	e009      	b.n	80029e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fcb9 	bl	8001344 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	4a79      	ldr	r2, [pc, #484]	@ (8002bc0 <HAL_RCC_OscConfig+0x620>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0e6      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e2:	4b75      	ldr	r3, [pc, #468]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 80029e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x42e>
 80029ec:	e013      	b.n	8002a16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fca9 	bl	8001344 <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f6:	e009      	b.n	8002a0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fca4 	bl	8001344 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	4a6f      	ldr	r2, [pc, #444]	@ (8002bc0 <HAL_RCC_OscConfig+0x620>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0d1      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a16:	231f      	movs	r3, #31
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b65      	ldr	r3, [pc, #404]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a24:	4b64      	ldr	r3, [pc, #400]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a26:	4967      	ldr	r1, [pc, #412]	@ (8002bc4 <HAL_RCC_OscConfig+0x624>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d100      	bne.n	8002a36 <HAL_RCC_OscConfig+0x496>
 8002a34:	e0bb      	b.n	8002bae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a36:	4b60      	ldr	r3, [pc, #384]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2238      	movs	r2, #56	@ 0x38
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d100      	bne.n	8002a44 <HAL_RCC_OscConfig+0x4a4>
 8002a42:	e07b      	b.n	8002b3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d156      	bne.n	8002afa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a52:	495d      	ldr	r1, [pc, #372]	@ (8002bc8 <HAL_RCC_OscConfig+0x628>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fc74 	bl	8001344 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fc6f 	bl	8001344 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e09d      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	049b      	lsls	r3, r3, #18
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a80:	4b4d      	ldr	r3, [pc, #308]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a51      	ldr	r2, [pc, #324]	@ (8002bcc <HAL_RCC_OscConfig+0x62c>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	431a      	orrs	r2, r3
 8002aae:	4b42      	ldr	r3, [pc, #264]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	0449      	lsls	r1, r1, #17
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	0549      	lsls	r1, r1, #21
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fc38 	bl	8001344 <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fc33 	bl	8001344 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e061      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aec:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x53a>
 8002af8:	e059      	b.n	8002bae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002b00:	4931      	ldr	r1, [pc, #196]	@ (8002bc8 <HAL_RCC_OscConfig+0x628>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fc1d 	bl	8001344 <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fc18 	bl	8001344 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e046      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b22:	4b25      	ldr	r3, [pc, #148]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	049b      	lsls	r3, r3, #18
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b2e:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002b34:	4926      	ldr	r1, [pc, #152]	@ (8002bd0 <HAL_RCC_OscConfig+0x630>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	e038      	b.n	8002bae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e033      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_RCC_OscConfig+0x618>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2203      	movs	r2, #3
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d126      	bne.n	8002baa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2270      	movs	r2, #112	@ 0x70
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d11f      	bne.n	8002baa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	23fe      	movs	r3, #254	@ 0xfe
 8002b6e:	01db      	lsls	r3, r3, #7
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d116      	bne.n	8002baa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	23f8      	movs	r3, #248	@ 0xf8
 8002b80:	039b      	lsls	r3, r3, #14
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d10e      	bne.n	8002baa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	23e0      	movs	r3, #224	@ 0xe0
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	0f5b      	lsrs	r3, r3, #29
 8002ba0:	075a      	lsls	r2, r3, #29
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b008      	add	sp, #32
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	00001388 	.word	0x00001388
 8002bc4:	efffffff 	.word	0xefffffff
 8002bc8:	feffffff 	.word	0xfeffffff
 8002bcc:	11c1808c 	.word	0x11c1808c
 8002bd0:	eefefffc 	.word	0xeefefffc

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0e9      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b76      	ldr	r3, [pc, #472]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2207      	movs	r2, #7
 8002bee:	4013      	ands	r3, r2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d91e      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b73      	ldr	r3, [pc, #460]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2207      	movs	r2, #7
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	4b70      	ldr	r3, [pc, #448]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fb9c 	bl	8001344 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c10:	e009      	b.n	8002c26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c12:	f7fe fb97 	bl	8001344 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0ca      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c26:	4b67      	ldr	r3, [pc, #412]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1ee      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2204      	movs	r2, #4
 8002c44:	4013      	ands	r3, r2
 8002c46:	d006      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c48:	4b60      	ldr	r3, [pc, #384]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c4e:	21e0      	movs	r1, #224	@ 0xe0
 8002c50:	01c9      	lsls	r1, r1, #7
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c56:	4b5d      	ldr	r3, [pc, #372]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d057      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7c:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	029b      	lsls	r3, r3, #10
 8002c84:	4013      	ands	r3, r2
 8002c86:	d12b      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e097      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c94:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	049b      	lsls	r3, r3, #18
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d11f      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e08b      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d113      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e07f      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc4:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc8:	2202      	movs	r2, #2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e074      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e06d      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4b37      	ldr	r3, [pc, #220]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fb26 	bl	8001344 <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfc:	e009      	b.n	8002d12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfe:	f7fe fb21 	bl	8001344 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e054      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2e      	ldr	r3, [pc, #184]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2238      	movs	r2, #56	@ 0x38
 8002d18:	401a      	ands	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1ec      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2207      	movs	r2, #7
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d21e      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2207      	movs	r2, #7
 8002d38:	4393      	bics	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d44:	f7fe fafe 	bl	8001344 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7fe faf9 	bl	8001344 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e02c      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2207      	movs	r2, #7
 8002d68:	4013      	ands	r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7a:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <HAL_RCC_ClockConfig+0x200>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d8e:	f000 f829 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002d92:	0001      	movs	r1, r0
 8002d94:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x204>)
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	58d3      	ldr	r3, [r2, r3]
 8002da4:	221f      	movs	r2, #31
 8002da6:	4013      	ands	r3, r2
 8002da8:	000a      	movs	r2, r1
 8002daa:	40da      	lsrs	r2, r3
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x208>)
 8002dae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_ClockConfig+0x20c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe fa69 	bl	800128c <HAL_InitTick>
 8002dba:	0003      	movs	r3, r0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b004      	add	sp, #16
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	00001388 	.word	0x00001388
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	fffff0ff 	.word	0xfffff0ff
 8002dd4:	ffff8fff 	.word	0xffff8fff
 8002dd8:	08005adc 	.word	0x08005adc
 8002ddc:	20000004 	.word	0x20000004
 8002de0:	20000008 	.word	0x20000008

08002de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2238      	movs	r2, #56	@ 0x38
 8002df0:	4013      	ands	r3, r2
 8002df2:	d10f      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002df4:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0adb      	lsrs	r3, r3, #11
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2201      	movs	r2, #1
 8002e00:	409a      	lsls	r2, r3
 8002e02:	0013      	movs	r3, r2
 8002e04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4835      	ldr	r0, [pc, #212]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e0a:	f7fd f981 	bl	8000110 <__udivsi3>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e05d      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2238      	movs	r2, #56	@ 0x38
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e20:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e054      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e26:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2238      	movs	r2, #56	@ 0x38
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d138      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e32:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2203      	movs	r2, #3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e3c:	4b27      	ldr	r3, [pc, #156]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	2207      	movs	r2, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	3301      	adds	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	4824      	ldr	r0, [pc, #144]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e54:	f7fd f95c 	bl	8000110 <__udivsi3>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	227f      	movs	r2, #127	@ 0x7f
 8002e64:	4013      	ands	r3, r2
 8002e66:	434b      	muls	r3, r1
 8002e68:	617b      	str	r3, [r7, #20]
        break;
 8002e6a:	e00d      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	481c      	ldr	r0, [pc, #112]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e70:	f7fd f94e 	bl	8000110 <__udivsi3>
 8002e74:	0003      	movs	r3, r0
 8002e76:	0019      	movs	r1, r3
 8002e78:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	227f      	movs	r2, #127	@ 0x7f
 8002e80:	4013      	ands	r3, r2
 8002e82:	434b      	muls	r3, r1
 8002e84:	617b      	str	r3, [r7, #20]
        break;
 8002e86:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0f5b      	lsrs	r3, r3, #29
 8002e8e:	2207      	movs	r2, #7
 8002e90:	4013      	ands	r3, r2
 8002e92:	3301      	adds	r3, #1
 8002e94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	6978      	ldr	r0, [r7, #20]
 8002e9a:	f7fd f939 	bl	8000110 <__udivsi3>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2238      	movs	r2, #56	@ 0x38
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d103      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002eb0:	2380      	movs	r3, #128	@ 0x80
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2238      	movs	r2, #56	@ 0x38
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b18      	cmp	r3, #24
 8002ec2:	d103      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ec4:	23fa      	movs	r3, #250	@ 0xfa
 8002ec6:	01db      	lsls	r3, r3, #7
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e001      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ed0:	693b      	ldr	r3, [r7, #16]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b02      	ldr	r3, [pc, #8]	@ (8002ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f00:	f7ff fff2 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f04:	0004      	movs	r4, r0
 8002f06:	f7ff fb3f 	bl	8002588 <LL_RCC_GetAPB1Prescaler>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	0b1a      	lsrs	r2, r3, #12
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	58d3      	ldr	r3, [r2, r3]
 8002f14:	221f      	movs	r2, #31
 8002f16:	4013      	ands	r3, r2
 8002f18:	40dc      	lsrs	r4, r3
 8002f1a:	0023      	movs	r3, r4
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bdb0      	pop	{r4, r5, r7, pc}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	08005b1c 	.word	0x08005b1c

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f30:	2313      	movs	r3, #19
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f38:	2312      	movs	r3, #18
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	029b      	lsls	r3, r3, #10
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f4c:	e0a3      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2011      	movs	r0, #17
 8002f50:	183b      	adds	r3, r7, r0
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4bb0      	ldr	r3, [pc, #704]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f5a:	2380      	movs	r3, #128	@ 0x80
 8002f5c:	055b      	lsls	r3, r3, #21
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d110      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4bad      	ldr	r3, [pc, #692]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f66:	4bac      	ldr	r3, [pc, #688]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f68:	2180      	movs	r1, #128	@ 0x80
 8002f6a:	0549      	lsls	r1, r1, #21
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f70:	4ba9      	ldr	r3, [pc, #676]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	183b      	adds	r3, r7, r0
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4ba5      	ldr	r3, [pc, #660]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4ba4      	ldr	r3, [pc, #656]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f8a:	2180      	movs	r1, #128	@ 0x80
 8002f8c:	0049      	lsls	r1, r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f92:	f7fe f9d7 	bl	8001344 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe f9d2 	bl	8001344 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d904      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002faa:	2313      	movs	r3, #19
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2203      	movs	r2, #3
 8002fb0:	701a      	strb	r2, [r3, #0]
        break;
 8002fb2:	e005      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb4:	4b99      	ldr	r3, [pc, #612]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d0ed      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002fc0:	2313      	movs	r3, #19
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d154      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fca:	4b93      	ldr	r3, [pc, #588]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002fce:	23c0      	movs	r3, #192	@ 0xc0
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d019      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d014      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	4a8d      	ldr	r2, [pc, #564]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff0:	4b89      	ldr	r3, [pc, #548]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ff2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ff4:	4b88      	ldr	r3, [pc, #544]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ff6:	2180      	movs	r1, #128	@ 0x80
 8002ff8:	0249      	lsls	r1, r1, #9
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffe:	4b86      	ldr	r3, [pc, #536]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003000:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003002:	4b85      	ldr	r3, [pc, #532]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003004:	4987      	ldr	r1, [pc, #540]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003006:	400a      	ands	r2, r1
 8003008:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800300a:	4b83      	ldr	r3, [pc, #524]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d016      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe f994 	bl	8001344 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003020:	e00c      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f98f 	bl	8001344 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	4a7e      	ldr	r2, [pc, #504]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d904      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003032:	2313      	movs	r3, #19
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2203      	movs	r2, #3
 8003038:	701a      	strb	r2, [r3, #0]
            break;
 800303a:	e004      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	4b76      	ldr	r3, [pc, #472]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d0ed      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003046:	2313      	movs	r3, #19
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	4b71      	ldr	r3, [pc, #452]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	4a72      	ldr	r2, [pc, #456]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800305e:	4b6e      	ldr	r3, [pc, #440]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003060:	430a      	orrs	r2, r1
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003064:	e00c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003066:	2312      	movs	r3, #18
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2213      	movs	r2, #19
 800306c:	18ba      	adds	r2, r7, r2
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e005      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	2312      	movs	r3, #18
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2213      	movs	r2, #19
 800307a:	18ba      	adds	r2, r7, r2
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003080:	2311      	movs	r3, #17
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b63      	ldr	r3, [pc, #396]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	4b62      	ldr	r3, [pc, #392]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003090:	4966      	ldr	r1, [pc, #408]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003092:	400a      	ands	r2, r1
 8003094:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	2203      	movs	r2, #3
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030b0:	430a      	orrs	r2, r1
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4013      	ands	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030be:	4b56      	ldr	r3, [pc, #344]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c2:	220c      	movs	r2, #12
 80030c4:	4393      	bics	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b52      	ldr	r3, [pc, #328]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	2230      	movs	r2, #48	@ 0x30
 80030e2:	4393      	bics	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fa:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800310a:	430a      	orrs	r2, r1
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2240      	movs	r2, #64	@ 0x40
 8003114:	4013      	ands	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003118:	4b3f      	ldr	r3, [pc, #252]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	4a45      	ldr	r2, [pc, #276]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800311e:	4013      	ands	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	4b3c      	ldr	r3, [pc, #240]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003128:	430a      	orrs	r2, r1
 800312a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4013      	ands	r3, r2
 8003136:	d015      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	0899      	lsrs	r1, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003146:	430a      	orrs	r2, r1
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1a      	ldr	r2, [r3, #32]
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	429a      	cmp	r2, r3
 8003154:	d106      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003156:	4b30      	ldr	r3, [pc, #192]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4b2f      	ldr	r3, [pc, #188]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	0249      	lsls	r1, r1, #9
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4013      	ands	r3, r2
 800316e:	d014      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003170:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	2203      	movs	r2, #3
 8003176:	4393      	bics	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003180:	430a      	orrs	r2, r1
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800318c:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4b21      	ldr	r3, [pc, #132]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003192:	2180      	movs	r1, #128	@ 0x80
 8003194:	0249      	lsls	r1, r1, #9
 8003196:	430a      	orrs	r2, r1
 8003198:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	4013      	ands	r3, r2
 80031a4:	d014      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	220c      	movs	r2, #12
 80031ac:	4393      	bics	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d106      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031c8:	2180      	movs	r1, #128	@ 0x80
 80031ca:	0249      	lsls	r1, r1, #9
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	045b      	lsls	r3, r3, #17
 80031d8:	4013      	ands	r3, r2
 80031da:	d016      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	019b      	lsls	r3, r3, #6
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d106      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003202:	2180      	movs	r1, #128	@ 0x80
 8003204:	0449      	lsls	r1, r1, #17
 8003206:	430a      	orrs	r2, r1
 8003208:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800320a:	2312      	movs	r3, #18
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781b      	ldrb	r3, [r3, #0]
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b006      	add	sp, #24
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	fffffcff 	.word	0xfffffcff
 8003224:	fffeffff 	.word	0xfffeffff
 8003228:	00001388 	.word	0x00001388
 800322c:	efffffff 	.word	0xefffffff
 8003230:	ffffcfff 	.word	0xffffcfff
 8003234:	ffff3fff 	.word	0xffff3fff

08003238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0a8      	b.n	800339c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	2382      	movs	r3, #130	@ 0x82
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	429a      	cmp	r2, r3
 800325c:	d009      	beq.n	8003272 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	61da      	str	r2, [r3, #28]
 8003264:	e005      	b.n	8003272 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	225d      	movs	r2, #93	@ 0x5d
 800327c:	5c9b      	ldrb	r3, [r3, r2]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225c      	movs	r2, #92	@ 0x5c
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f7fd fee6 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	225d      	movs	r2, #93	@ 0x5d
 8003298:	2102      	movs	r1, #2
 800329a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2140      	movs	r1, #64	@ 0x40
 80032a8:	438a      	bics	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	23e0      	movs	r3, #224	@ 0xe0
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d902      	bls.n	80032be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e002      	b.n	80032c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	015b      	lsls	r3, r3, #5
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	23f0      	movs	r3, #240	@ 0xf0
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d008      	beq.n	80032e2 <HAL_SPI_Init+0xaa>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	23e0      	movs	r3, #224	@ 0xe0
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	429a      	cmp	r2, r3
 80032da:	d002      	beq.n	80032e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	2382      	movs	r3, #130	@ 0x82
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	2384      	movs	r3, #132	@ 0x84
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	400b      	ands	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2102      	movs	r1, #2
 80032fe:	400b      	ands	r3, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2101      	movs	r1, #1
 8003308:	400b      	ands	r3, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6999      	ldr	r1, [r3, #24]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	400b      	ands	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2138      	movs	r1, #56	@ 0x38
 800331e:	400b      	ands	r3, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	400b      	ands	r3, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	0011      	movs	r1, r2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	2204      	movs	r2, #4
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2110      	movs	r1, #16
 8003350:	400b      	ands	r3, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003358:	2108      	movs	r1, #8
 800335a:	400b      	ands	r3, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	23f0      	movs	r3, #240	@ 0xf0
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	400b      	ands	r3, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	0011      	movs	r1, r2
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	401a      	ands	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4907      	ldr	r1, [pc, #28]	@ (80033a4 <HAL_SPI_Init+0x16c>)
 8003388:	400a      	ands	r2, r1
 800338a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	225d      	movs	r2, #93	@ 0x5d
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	fffff7ff 	.word	0xfffff7ff

080033a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e046      	b.n	8003448 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2288      	movs	r2, #136	@ 0x88
 80033be:	589b      	ldr	r3, [r3, r2]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2284      	movs	r2, #132	@ 0x84
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7fd fe92 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2288      	movs	r2, #136	@ 0x88
 80033d8:	2124      	movs	r1, #36	@ 0x24
 80033da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fa0e 	bl	8003818 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f828 	bl	8003454 <UART_SetConfig>
 8003404:	0003      	movs	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e01c      	b.n	8003448 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	490d      	ldr	r1, [pc, #52]	@ (8003450 <HAL_UART_Init+0xa8>)
 800341a:	400a      	ands	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	212a      	movs	r1, #42	@ 0x2a
 800342a:	438a      	bics	r2, r1
 800342c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fa9d 	bl	8003980 <UART_CheckIdleState>
 8003446:	0003      	movs	r3, r0
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}
 8003450:	ffffb7ff 	.word	0xffffb7ff

08003454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800345c:	231b      	movs	r3, #27
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4ab4      	ldr	r2, [pc, #720]	@ (8003754 <UART_SetConfig+0x300>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4aaf      	ldr	r2, [pc, #700]	@ (8003758 <UART_SetConfig+0x304>)
 800349a:	4013      	ands	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4aa6      	ldr	r2, [pc, #664]	@ (800375c <UART_SetConfig+0x308>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	220f      	movs	r2, #15
 80034d8:	4393      	bics	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003760 <UART_SetConfig+0x30c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d127      	bne.n	8003542 <UART_SetConfig+0xee>
 80034f2:	4b9c      	ldr	r3, [pc, #624]	@ (8003764 <UART_SetConfig+0x310>)
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	2203      	movs	r2, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d017      	beq.n	800352e <UART_SetConfig+0xda>
 80034fe:	d81b      	bhi.n	8003538 <UART_SetConfig+0xe4>
 8003500:	2b02      	cmp	r3, #2
 8003502:	d00a      	beq.n	800351a <UART_SetConfig+0xc6>
 8003504:	d818      	bhi.n	8003538 <UART_SetConfig+0xe4>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0xbc>
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00a      	beq.n	8003524 <UART_SetConfig+0xd0>
 800350e:	e013      	b.n	8003538 <UART_SetConfig+0xe4>
 8003510:	231a      	movs	r3, #26
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e08f      	b.n	800363a <UART_SetConfig+0x1e6>
 800351a:	231a      	movs	r3, #26
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e08a      	b.n	800363a <UART_SetConfig+0x1e6>
 8003524:	231a      	movs	r3, #26
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2204      	movs	r2, #4
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e085      	b.n	800363a <UART_SetConfig+0x1e6>
 800352e:	231a      	movs	r3, #26
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2208      	movs	r2, #8
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e080      	b.n	800363a <UART_SetConfig+0x1e6>
 8003538:	231a      	movs	r3, #26
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2210      	movs	r2, #16
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e07b      	b.n	800363a <UART_SetConfig+0x1e6>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a88      	ldr	r2, [pc, #544]	@ (8003768 <UART_SetConfig+0x314>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d127      	bne.n	800359c <UART_SetConfig+0x148>
 800354c:	4b85      	ldr	r3, [pc, #532]	@ (8003764 <UART_SetConfig+0x310>)
 800354e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003550:	220c      	movs	r2, #12
 8003552:	4013      	ands	r3, r2
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d017      	beq.n	8003588 <UART_SetConfig+0x134>
 8003558:	d81b      	bhi.n	8003592 <UART_SetConfig+0x13e>
 800355a:	2b08      	cmp	r3, #8
 800355c:	d00a      	beq.n	8003574 <UART_SetConfig+0x120>
 800355e:	d818      	bhi.n	8003592 <UART_SetConfig+0x13e>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <UART_SetConfig+0x116>
 8003564:	2b04      	cmp	r3, #4
 8003566:	d00a      	beq.n	800357e <UART_SetConfig+0x12a>
 8003568:	e013      	b.n	8003592 <UART_SetConfig+0x13e>
 800356a:	231a      	movs	r3, #26
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e062      	b.n	800363a <UART_SetConfig+0x1e6>
 8003574:	231a      	movs	r3, #26
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e05d      	b.n	800363a <UART_SetConfig+0x1e6>
 800357e:	231a      	movs	r3, #26
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2204      	movs	r2, #4
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e058      	b.n	800363a <UART_SetConfig+0x1e6>
 8003588:	231a      	movs	r3, #26
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2208      	movs	r2, #8
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e053      	b.n	800363a <UART_SetConfig+0x1e6>
 8003592:	231a      	movs	r3, #26
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	2210      	movs	r2, #16
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e04e      	b.n	800363a <UART_SetConfig+0x1e6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a72      	ldr	r2, [pc, #456]	@ (800376c <UART_SetConfig+0x318>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d127      	bne.n	80035f6 <UART_SetConfig+0x1a2>
 80035a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003764 <UART_SetConfig+0x310>)
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	2230      	movs	r2, #48	@ 0x30
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b30      	cmp	r3, #48	@ 0x30
 80035b0:	d017      	beq.n	80035e2 <UART_SetConfig+0x18e>
 80035b2:	d81b      	bhi.n	80035ec <UART_SetConfig+0x198>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d00a      	beq.n	80035ce <UART_SetConfig+0x17a>
 80035b8:	d818      	bhi.n	80035ec <UART_SetConfig+0x198>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <UART_SetConfig+0x170>
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d00a      	beq.n	80035d8 <UART_SetConfig+0x184>
 80035c2:	e013      	b.n	80035ec <UART_SetConfig+0x198>
 80035c4:	231a      	movs	r3, #26
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e035      	b.n	800363a <UART_SetConfig+0x1e6>
 80035ce:	231a      	movs	r3, #26
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e030      	b.n	800363a <UART_SetConfig+0x1e6>
 80035d8:	231a      	movs	r3, #26
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2204      	movs	r2, #4
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e02b      	b.n	800363a <UART_SetConfig+0x1e6>
 80035e2:	231a      	movs	r3, #26
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2208      	movs	r2, #8
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e026      	b.n	800363a <UART_SetConfig+0x1e6>
 80035ec:	231a      	movs	r3, #26
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2210      	movs	r2, #16
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e021      	b.n	800363a <UART_SetConfig+0x1e6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003770 <UART_SetConfig+0x31c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d104      	bne.n	800360a <UART_SetConfig+0x1b6>
 8003600:	231a      	movs	r3, #26
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e017      	b.n	800363a <UART_SetConfig+0x1e6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a59      	ldr	r2, [pc, #356]	@ (8003774 <UART_SetConfig+0x320>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d104      	bne.n	800361e <UART_SetConfig+0x1ca>
 8003614:	231a      	movs	r3, #26
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	e00d      	b.n	800363a <UART_SetConfig+0x1e6>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a55      	ldr	r2, [pc, #340]	@ (8003778 <UART_SetConfig+0x324>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d104      	bne.n	8003632 <UART_SetConfig+0x1de>
 8003628:	231a      	movs	r3, #26
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e003      	b.n	800363a <UART_SetConfig+0x1e6>
 8003632:	231a      	movs	r3, #26
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2210      	movs	r2, #16
 8003638:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	2380      	movs	r3, #128	@ 0x80
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	429a      	cmp	r2, r3
 8003644:	d000      	beq.n	8003648 <UART_SetConfig+0x1f4>
 8003646:	e065      	b.n	8003714 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8003648:	231a      	movs	r3, #26
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d015      	beq.n	800367e <UART_SetConfig+0x22a>
 8003652:	dc18      	bgt.n	8003686 <UART_SetConfig+0x232>
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00d      	beq.n	8003674 <UART_SetConfig+0x220>
 8003658:	dc15      	bgt.n	8003686 <UART_SetConfig+0x232>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0x210>
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <UART_SetConfig+0x21a>
 8003662:	e010      	b.n	8003686 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7ff fc4a 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8003668:	0003      	movs	r3, r0
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	e012      	b.n	8003694 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366e:	4b43      	ldr	r3, [pc, #268]	@ (800377c <UART_SetConfig+0x328>)
 8003670:	617b      	str	r3, [r7, #20]
        break;
 8003672:	e00f      	b.n	8003694 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003674:	f7ff fbb6 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8003678:	0003      	movs	r3, r0
 800367a:	617b      	str	r3, [r7, #20]
        break;
 800367c:	e00a      	b.n	8003694 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	617b      	str	r3, [r7, #20]
        break;
 8003684:	e006      	b.n	8003694 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800368a:	231b      	movs	r3, #27
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
        break;
 8003692:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d100      	bne.n	800369c <UART_SetConfig+0x248>
 800369a:	e0a6      	b.n	80037ea <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036a0:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <UART_SetConfig+0x32c>)
 80036a2:	0052      	lsls	r2, r2, #1
 80036a4:	5ad3      	ldrh	r3, [r2, r3]
 80036a6:	0019      	movs	r1, r3
 80036a8:	6978      	ldr	r0, [r7, #20]
 80036aa:	f7fc fd31 	bl	8000110 <__udivsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	005a      	lsls	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	18d2      	adds	r2, r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0019      	movs	r1, r3
 80036c0:	0010      	movs	r0, r2
 80036c2:	f7fc fd25 	bl	8000110 <__udivsi3>
 80036c6:	0003      	movs	r3, r0
 80036c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b0f      	cmp	r3, #15
 80036ce:	d91c      	bls.n	800370a <UART_SetConfig+0x2b6>
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	025b      	lsls	r3, r3, #9
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d217      	bcs.n	800370a <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	200e      	movs	r0, #14
 80036e0:	183b      	adds	r3, r7, r0
 80036e2:	210f      	movs	r1, #15
 80036e4:	438a      	bics	r2, r1
 80036e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2207      	movs	r2, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	b299      	uxth	r1, r3
 80036f4:	183b      	adds	r3, r7, r0
 80036f6:	183a      	adds	r2, r7, r0
 80036f8:	8812      	ldrh	r2, [r2, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	183a      	adds	r2, r7, r0
 8003704:	8812      	ldrh	r2, [r2, #0]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e06f      	b.n	80037ea <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800370a:	231b      	movs	r3, #27
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e06a      	b.n	80037ea <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003714:	231a      	movs	r3, #26
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b08      	cmp	r3, #8
 800371c:	d015      	beq.n	800374a <UART_SetConfig+0x2f6>
 800371e:	dc31      	bgt.n	8003784 <UART_SetConfig+0x330>
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00d      	beq.n	8003740 <UART_SetConfig+0x2ec>
 8003724:	dc2e      	bgt.n	8003784 <UART_SetConfig+0x330>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <UART_SetConfig+0x2dc>
 800372a:	2b02      	cmp	r3, #2
 800372c:	d005      	beq.n	800373a <UART_SetConfig+0x2e6>
 800372e:	e029      	b.n	8003784 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7ff fbe4 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8003734:	0003      	movs	r3, r0
 8003736:	617b      	str	r3, [r7, #20]
        break;
 8003738:	e02b      	b.n	8003792 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <UART_SetConfig+0x328>)
 800373c:	617b      	str	r3, [r7, #20]
        break;
 800373e:	e028      	b.n	8003792 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003740:	f7ff fb50 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8003744:	0003      	movs	r3, r0
 8003746:	617b      	str	r3, [r7, #20]
        break;
 8003748:	e023      	b.n	8003792 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
        break;
 8003750:	e01f      	b.n	8003792 <UART_SetConfig+0x33e>
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	cfff69f3 	.word	0xcfff69f3
 8003758:	ffffcfff 	.word	0xffffcfff
 800375c:	11fff4ff 	.word	0x11fff4ff
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40004400 	.word	0x40004400
 800376c:	40004800 	.word	0x40004800
 8003770:	40004c00 	.word	0x40004c00
 8003774:	40005000 	.word	0x40005000
 8003778:	40013c00 	.word	0x40013c00
 800377c:	00f42400 	.word	0x00f42400
 8003780:	08005b3c 	.word	0x08005b3c
      default:
        pclk = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003788:	231b      	movs	r3, #27
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
        break;
 8003790:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d028      	beq.n	80037ea <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379c:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <UART_SetConfig+0x3c0>)
 800379e:	0052      	lsls	r2, r2, #1
 80037a0:	5ad3      	ldrh	r3, [r2, r3]
 80037a2:	0019      	movs	r1, r3
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f7fc fcb3 	bl	8000110 <__udivsi3>
 80037aa:	0003      	movs	r3, r0
 80037ac:	001a      	movs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	18d2      	adds	r2, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f7fc fca7 	bl	8000110 <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d90a      	bls.n	80037e2 <UART_SetConfig+0x38e>
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	025b      	lsls	r3, r3, #9
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d205      	bcs.n	80037e2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e003      	b.n	80037ea <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80037e2:	231b      	movs	r3, #27
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	226a      	movs	r2, #106	@ 0x6a
 80037ee:	2101      	movs	r1, #1
 80037f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2268      	movs	r2, #104	@ 0x68
 80037f6:	2101      	movs	r1, #1
 80037f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003806:	231b      	movs	r3, #27
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	781b      	ldrb	r3, [r3, #0]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b008      	add	sp, #32
 8003812:	bd80      	pop	{r7, pc}
 8003814:	08005b3c 	.word	0x08005b3c

08003818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	2208      	movs	r2, #8
 8003826:	4013      	ands	r3, r2
 8003828:	d00b      	beq.n	8003842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <UART_AdvFeatureConfig+0x144>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003846:	2201      	movs	r2, #1
 8003848:	4013      	ands	r3, r2
 800384a:	d00b      	beq.n	8003864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a43      	ldr	r2, [pc, #268]	@ (8003960 <UART_AdvFeatureConfig+0x148>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d00b      	beq.n	8003886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a3b      	ldr	r2, [pc, #236]	@ (8003964 <UART_AdvFeatureConfig+0x14c>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	2204      	movs	r2, #4
 800388c:	4013      	ands	r3, r2
 800388e:	d00b      	beq.n	80038a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <UART_AdvFeatureConfig+0x150>)
 8003898:	4013      	ands	r3, r2
 800389a:	0019      	movs	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	2210      	movs	r2, #16
 80038ae:	4013      	ands	r3, r2
 80038b0:	d00b      	beq.n	80038ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <UART_AdvFeatureConfig+0x154>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	0019      	movs	r1, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ce:	2220      	movs	r2, #32
 80038d0:	4013      	ands	r3, r2
 80038d2:	d00b      	beq.n	80038ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4a25      	ldr	r2, [pc, #148]	@ (8003970 <UART_AdvFeatureConfig+0x158>)
 80038dc:	4013      	ands	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	2240      	movs	r2, #64	@ 0x40
 80038f2:	4013      	ands	r3, r2
 80038f4:	d01d      	beq.n	8003932 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <UART_AdvFeatureConfig+0x15c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	035b      	lsls	r3, r3, #13
 8003916:	429a      	cmp	r2, r3
 8003918:	d10b      	bne.n	8003932 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a15      	ldr	r2, [pc, #84]	@ (8003978 <UART_AdvFeatureConfig+0x160>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	4013      	ands	r3, r2
 800393a:	d00b      	beq.n	8003954 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a0e      	ldr	r2, [pc, #56]	@ (800397c <UART_AdvFeatureConfig+0x164>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}
 800395c:	ffff7fff 	.word	0xffff7fff
 8003960:	fffdffff 	.word	0xfffdffff
 8003964:	fffeffff 	.word	0xfffeffff
 8003968:	fffbffff 	.word	0xfffbffff
 800396c:	ffffefff 	.word	0xffffefff
 8003970:	ffffdfff 	.word	0xffffdfff
 8003974:	ffefffff 	.word	0xffefffff
 8003978:	ff9fffff 	.word	0xff9fffff
 800397c:	fff7ffff 	.word	0xfff7ffff

08003980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b092      	sub	sp, #72	@ 0x48
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2290      	movs	r2, #144	@ 0x90
 800398c:	2100      	movs	r1, #0
 800398e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003990:	f7fd fcd8 	bl	8001344 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2208      	movs	r2, #8
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d12d      	bne.n	8003a02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	0391      	lsls	r1, r2, #14
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4a47      	ldr	r2, [pc, #284]	@ (8003acc <UART_CheckIdleState+0x14c>)
 80039b0:	9200      	str	r2, [sp, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f000 f88e 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d022      	beq.n	8003a02 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c6:	2301      	movs	r3, #1
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2180      	movs	r1, #128	@ 0x80
 80039de:	438a      	bics	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2288      	movs	r2, #136	@ 0x88
 80039f2:	2120      	movs	r1, #32
 80039f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2284      	movs	r2, #132	@ 0x84
 80039fa:	2100      	movs	r1, #0
 80039fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e060      	b.n	8003ac4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d146      	bne.n	8003a9e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	03d1      	lsls	r1, r2, #15
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4a2c      	ldr	r2, [pc, #176]	@ (8003acc <UART_CheckIdleState+0x14c>)
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f000 f859 	bl	8003ad4 <UART_WaitOnFlagUntilTimeout>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d03b      	beq.n	8003a9e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a26:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a30:	2301      	movs	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4922      	ldr	r1, [pc, #136]	@ (8003ad0 <UART_CheckIdleState+0x150>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a5e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			@ (mov r8, r8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	438a      	bics	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	228c      	movs	r2, #140	@ 0x8c
 8003a8e:	2120      	movs	r1, #32
 8003a90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2284      	movs	r2, #132	@ 0x84
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e012      	b.n	8003ac4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2288      	movs	r2, #136	@ 0x88
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	228c      	movs	r2, #140	@ 0x8c
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2284      	movs	r2, #132	@ 0x84
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b010      	add	sp, #64	@ 0x40
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	01ffffff 	.word	0x01ffffff
 8003ad0:	fffffedf 	.word	0xfffffedf

08003ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	1dfb      	adds	r3, r7, #7
 8003ae2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	e051      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	d04e      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aec:	f7fd fc2a 	bl	8001344 <HAL_GetTick>
 8003af0:	0002      	movs	r2, r0
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d302      	bcc.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e051      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d038      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d035      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	2208      	movs	r2, #8
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d111      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f83c 	bl	8003bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2290      	movs	r2, #144	@ 0x90
 8003b40:	2108      	movs	r1, #8
 8003b42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2284      	movs	r2, #132	@ 0x84
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e02c      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d112      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 f81f 	bl	8003bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2290      	movs	r2, #144	@ 0x90
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2284      	movs	r2, #132	@ 0x84
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	425a      	negs	r2, r3
 8003b9a:	4153      	adcs	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d09e      	beq.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	@ 0x38
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003bc2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4926      	ldr	r1, [pc, #152]	@ (8003c78 <UART_EndRxTransfer+0xc4>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	623b      	str	r3, [r7, #32]
  return(result);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bf6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <UART_EndRxTransfer+0xc8>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d118      	bne.n	8003c5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c28:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c32:	2301      	movs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2110      	movs	r1, #16
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	228c      	movs	r2, #140	@ 0x8c
 8003c5e:	2120      	movs	r1, #32
 8003c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b00e      	add	sp, #56	@ 0x38
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	fffffedf 	.word	0xfffffedf
 8003c7c:	effffffe 	.word	0xeffffffe

08003c80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2284      	movs	r2, #132	@ 0x84
 8003c8c:	5c9b      	ldrb	r3, [r3, r2]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e027      	b.n	8003ce6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2284      	movs	r2, #132	@ 0x84
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2288      	movs	r2, #136	@ 0x88
 8003ca2:	2124      	movs	r1, #36	@ 0x24
 8003ca4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	438a      	bics	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2288      	movs	r2, #136	@ 0x88
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2284      	movs	r2, #132	@ 0x84
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	dfffffff 	.word	0xdfffffff

08003cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2284      	movs	r2, #132	@ 0x84
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e02e      	b.n	8003d6a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2284      	movs	r2, #132	@ 0x84
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2288      	movs	r2, #136	@ 0x88
 8003d18:	2124      	movs	r1, #36	@ 0x24
 8003d1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	08d9      	lsrs	r1, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f854 	bl	8003df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2288      	movs	r2, #136	@ 0x88
 8003d5c:	2120      	movs	r1, #32
 8003d5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2284      	movs	r2, #132	@ 0x84
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2284      	movs	r2, #132	@ 0x84
 8003d82:	5c9b      	ldrb	r3, [r3, r2]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e02f      	b.n	8003dec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2284      	movs	r2, #132	@ 0x84
 8003d90:	2101      	movs	r1, #1
 8003d92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2288      	movs	r2, #136	@ 0x88
 8003d98:	2124      	movs	r1, #36	@ 0x24
 8003d9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f813 	bl	8003df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2288      	movs	r2, #136	@ 0x88
 8003dde:	2120      	movs	r1, #32
 8003de0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2284      	movs	r2, #132	@ 0x84
 8003de6:	2100      	movs	r1, #0
 8003de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b004      	add	sp, #16
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	f1ffffff 	.word	0xf1ffffff

08003df8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	226a      	movs	r2, #106	@ 0x6a
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2268      	movs	r2, #104	@ 0x68
 8003e14:	2101      	movs	r1, #1
 8003e16:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e18:	e043      	b.n	8003ea2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e1a:	260f      	movs	r6, #15
 8003e1c:	19bb      	adds	r3, r7, r6
 8003e1e:	2208      	movs	r2, #8
 8003e20:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e22:	200e      	movs	r0, #14
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	2208      	movs	r2, #8
 8003e28:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	0e5b      	lsrs	r3, r3, #25
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	240d      	movs	r4, #13
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	2107      	movs	r1, #7
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	0f5b      	lsrs	r3, r3, #29
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	250c      	movs	r5, #12
 8003e4a:	197b      	adds	r3, r7, r5
 8003e4c:	2107      	movs	r1, #7
 8003e4e:	400a      	ands	r2, r1
 8003e50:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	197a      	adds	r2, r7, r5
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	4914      	ldr	r1, [pc, #80]	@ (8003eac <UARTEx_SetNbDataToProcess+0xb4>)
 8003e5c:	5c8a      	ldrb	r2, [r1, r2]
 8003e5e:	435a      	muls	r2, r3
 8003e60:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e62:	197b      	adds	r3, r7, r5
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	f7fc f9da 	bl	8000224 <__divsi3>
 8003e70:	0003      	movs	r3, r0
 8003e72:	b299      	uxth	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	226a      	movs	r2, #106	@ 0x6a
 8003e78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e7a:	19bb      	adds	r3, r7, r6
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	193a      	adds	r2, r7, r4
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	490a      	ldr	r1, [pc, #40]	@ (8003eac <UARTEx_SetNbDataToProcess+0xb4>)
 8003e84:	5c8a      	ldrb	r2, [r1, r2]
 8003e86:	435a      	muls	r2, r3
 8003e88:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e8a:	193b      	adds	r3, r7, r4
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e92:	0019      	movs	r1, r3
 8003e94:	f7fc f9c6 	bl	8000224 <__divsi3>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	b299      	uxth	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2268      	movs	r2, #104	@ 0x68
 8003ea0:	5299      	strh	r1, [r3, r2]
}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b005      	add	sp, #20
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	08005b54 	.word	0x08005b54
 8003eb0:	08005b5c 	.word	0x08005b5c

08003eb4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003eba:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <_DoInit+0x9c>)
 8003ebc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	22a8      	movs	r2, #168	@ 0xa8
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fd6e 	bl	80049a6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f54 <_DoInit+0xa0>)
 8003eda:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	@ (8003f58 <_DoInit+0xa4>)
 8003ee0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2280      	movs	r2, #128	@ 0x80
 8003ee6:	00d2      	lsls	r2, r2, #3
 8003ee8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4a15      	ldr	r2, [pc, #84]	@ (8003f54 <_DoInit+0xa0>)
 8003f00:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4a15      	ldr	r2, [pc, #84]	@ (8003f5c <_DoInit+0xa8>)
 8003f06:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f20:	2300      	movs	r3, #0
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	e00c      	b.n	8003f40 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	220f      	movs	r2, #15
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f60 <_DoInit+0xac>)
 8003f2e:	5cd1      	ldrb	r1, [r2, r3]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	1c0a      	adds	r2, r1, #0
 8003f38:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	d9ef      	bls.n	8003f26 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	2000018c 	.word	0x2000018c
 8003f54:	080050c8 	.word	0x080050c8
 8003f58:	20000234 	.word	0x20000234
 8003f5c:	20000634 	.word	0x20000634
 8003f60:	08005b64 	.word	0x08005b64

08003f64 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003f70:	2300      	movs	r3, #0
 8003f72:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	617b      	str	r3, [r7, #20]
    if (RdOff > WrOff) {
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d905      	bls.n	8003f94 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f92:	e007      	b.n	8003fa4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	1acb      	subs	r3, r1, r3
 8003f9e:	18d3      	adds	r3, r2, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d900      	bls.n	8003fb4 <_WriteBlocking+0x50>
 8003fb2:	0013      	movs	r3, r2
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d900      	bls.n	8003fc0 <_WriteBlocking+0x5c>
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    NumBytesWritten += NumBytesToWrite;
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	18d3      	adds	r3, r2, r3
 8003fd2:	623b      	str	r3, [r7, #32]
    NumBytes        -= NumBytesToWrite;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	61fb      	str	r3, [r7, #28]
    while (NumBytesToWrite--) {
 8003fe4:	e007      	b.n	8003ff6 <_WriteBlocking+0x92>
      *pDst++ = *pBuffer++;
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	1c53      	adds	r3, r2, #1
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	61b9      	str	r1, [r7, #24]
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
    while (NumBytesToWrite--) {
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	1e5a      	subs	r2, r3, #1
 8003ffa:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f2      	bne.n	8003fe6 <_WriteBlocking+0x82>
    NumBytesWritten += NumBytesToWrite;
    pBuffer         += NumBytesToWrite;
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	429a      	cmp	r2, r3
 8004008:	d101      	bne.n	800400e <_WriteBlocking+0xaa>
      WrOff = 0u;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1af      	bne.n	8003f7a <_WriteBlocking+0x16>
  return NumBytesWritten;
 800401a:	6a3b      	ldr	r3, [r7, #32]
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b00a      	add	sp, #40	@ 0x28
 8004022:	bd80      	pop	{r7, pc}

08004024 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	617b      	str	r3, [r7, #20]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	613b      	str	r3, [r7, #16]
  if (Rem > NumBytes) {
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d91a      	bls.n	800407e <_WriteNoCheck+0x5a>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	18d3      	adds	r3, r2, r3
 8004050:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    WrOff += NumBytes;
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	18d3      	adds	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
    while (NumBytes--) {
 800405a:	e007      	b.n	800406c <_WriteNoCheck+0x48>
      *pDst++ = *pData++;
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	1c53      	adds	r3, r2, #1
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	61b9      	str	r1, [r7, #24]
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	701a      	strb	r2, [r3, #0]
    while (NumBytes--) {
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1e5a      	subs	r2, r3, #1
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f2      	bne.n	800405c <_WriteNoCheck+0x38>
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800407c:	e02e      	b.n	80040dc <_WriteNoCheck+0xb8>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	18d3      	adds	r3, r2, r3
 8004086:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = Rem;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 800408c:	e007      	b.n	800409e <_WriteNoCheck+0x7a>
      *pDst++ = *pData++;
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	1c53      	adds	r3, r2, #1
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1c59      	adds	r1, r3, #1
 8004098:	61b9      	str	r1, [r7, #24]
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f2      	bne.n	800408e <_WriteNoCheck+0x6a>
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = NumBytes - Rem;
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 80040b6:	e007      	b.n	80040c8 <_WriteNoCheck+0xa4>
      *pDst++ = *pData++;
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	1c53      	adds	r3, r2, #1
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	61b9      	str	r1, [r7, #24]
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f2      	bne.n	80040b8 <_WriteNoCheck+0x94>
    pRing->WrOff = NumBytes - Rem;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad2      	subs	r2, r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
}
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b008      	add	sp, #32
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d808      	bhi.n	8004112 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad2      	subs	r2, r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e004      	b.n	800411c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800411c:	697b      	ldr	r3, [r7, #20]
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	0013      	movs	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	189b      	adds	r3, r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4a23      	ldr	r2, [pc, #140]	@ (80041d4 <SEGGER_RTT_WriteNoLock+0xac>)
 8004146:	189b      	adds	r3, r3, r2
 8004148:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d02e      	beq.n	80041b0 <SEGGER_RTT_WriteNoLock+0x88>
 8004152:	d836      	bhi.n	80041c2 <SEGGER_RTT_WriteNoLock+0x9a>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <SEGGER_RTT_WriteNoLock+0x36>
 8004158:	2b01      	cmp	r3, #1
 800415a:	d016      	beq.n	800418a <SEGGER_RTT_WriteNoLock+0x62>
 800415c:	e031      	b.n	80041c2 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff ffbf 	bl	80040e4 <_GetAvailWriteSpace>
 8004166:	0003      	movs	r3, r0
 8004168:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	d202      	bcs.n	8004178 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004176:	e027      	b.n	80041c8 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff ff4e 	bl	8004024 <_WriteNoCheck>
    break;
 8004188:	e01e      	b.n	80041c8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff ffa9 	bl	80040e4 <_GetAvailWriteSpace>
 8004192:	0003      	movs	r3, r0
 8004194:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4293      	cmp	r3, r2
 800419c:	d900      	bls.n	80041a0 <SEGGER_RTT_WriteNoLock+0x78>
 800419e:	0013      	movs	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7ff ff3b 	bl	8004024 <_WriteNoCheck>
    break;
 80041ae:	e00b      	b.n	80041c8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	69b9      	ldr	r1, [r7, #24]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fed4 	bl	8003f64 <_WriteBlocking>
 80041bc:	0003      	movs	r3, r0
 80041be:	61fb      	str	r3, [r7, #28]
    break;
 80041c0:	e002      	b.n	80041c8 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
    break;
 80041c6:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 80041c8:	69fb      	ldr	r3, [r7, #28]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b008      	add	sp, #32
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	2000018c 	.word	0x2000018c

080041d8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80041e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <SEGGER_RTT_Write+0x4c>)
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b53      	cmp	r3, #83	@ 0x53
 80041f0:	d001      	beq.n	80041f6 <SEGGER_RTT_Write+0x1e>
 80041f2:	f7ff fe5f 	bl	8003eb4 <_DoInit>
  SEGGER_RTT_LOCK();
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	2101      	movs	r1, #1
 80041fc:	f381 8810 	msr	PRIMASK, r1
 8004200:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff ff8d 	bl	8004128 <SEGGER_RTT_WriteNoLock>
 800420e:	0003      	movs	r3, r0
 8004210:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8004218:	697b      	ldr	r3, [r7, #20]
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	b008      	add	sp, #32
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	2000018c 	.word	0x2000018c

08004228 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	0018      	movs	r0, r3
 8004236:	f7fb ff63 	bl	8000100 <strlen>
 800423a:	0003      	movs	r3, r0
 800423c:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f7ff ffc7 	bl	80041d8 <SEGGER_RTT_Write>
 800424a:	0003      	movs	r3, r0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}

08004254 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  _DoInit();
 8004258:	f7ff fe2c 	bl	8003eb4 <_DoInit>
}
 800425c:	46c0      	nop			@ (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	000a      	movs	r2, r1
 800426c:	1cfb      	adds	r3, r7, #3
 800426e:	701a      	strb	r2, [r3, #0]
  unsigned Cnt;

  Cnt = p->Cnt;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d80f      	bhi.n	80042a2 <_StoreChar+0x40>
    *(p->pBuffer + Cnt) = c;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	18d3      	adds	r3, r2, r3
 800428a:	1cfa      	adds	r2, r7, #3
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d115      	bne.n	80042da <_StoreChar+0x78>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6918      	ldr	r0, [r3, #16]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	001a      	movs	r2, r3
 80042bc:	f7ff ff8c 	bl	80041d8 <SEGGER_RTT_Write>
 80042c0:	0002      	movs	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d004      	beq.n	80042d4 <_StoreChar+0x72>
      p->ReturnValue = -1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	4252      	negs	r2, r2
 80042d0:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80042d2:	e002      	b.n	80042da <_StoreChar+0x78>
      p->Cnt = 0u;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	@ 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80042f6:	2301      	movs	r3, #1
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80042fe:	e008      	b.n	8004312 <_PrintUnsigned+0x2e>
    Number = (Number / Base);
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	6a38      	ldr	r0, [r7, #32]
 8004304:	f7fb ff04 	bl	8000110 <__udivsi3>
 8004308:	0003      	movs	r3, r0
 800430a:	623b      	str	r3, [r7, #32]
    Width++;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d2f2      	bcs.n	8004300 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	429a      	cmp	r2, r3
 8004320:	d901      	bls.n	8004326 <_PrintUnsigned+0x42>
    Width = NumDigits;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004328:	2201      	movs	r2, #1
 800432a:	4013      	ands	r3, r2
 800432c:	d12b      	bne.n	8004386 <_PrintUnsigned+0xa2>
    if (FieldWidth != 0u) {
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d028      	beq.n	8004386 <_PrintUnsigned+0xa2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	2202      	movs	r2, #2
 8004338:	4013      	ands	r3, r2
 800433a:	d007      	beq.n	800434c <_PrintUnsigned+0x68>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <_PrintUnsigned+0x68>
        c = '0';
 8004342:	231b      	movs	r3, #27
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2230      	movs	r2, #48	@ 0x30
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e003      	b.n	8004354 <_PrintUnsigned+0x70>
      } else {
        c = ' ';
 800434c:	231b      	movs	r3, #27
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2220      	movs	r2, #32
 8004352:	701a      	strb	r2, [r3, #0]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004354:	e00e      	b.n	8004374 <_PrintUnsigned+0x90>
        FieldWidth--;
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	3b01      	subs	r3, #1
 800435a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800435c:	231b      	movs	r3, #27
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff ff7b 	bl	8004262 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db07      	blt.n	8004384 <_PrintUnsigned+0xa0>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <_PrintUnsigned+0xa2>
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	429a      	cmp	r2, r3
 8004380:	d3e9      	bcc.n	8004356 <_PrintUnsigned+0x72>
 8004382:	e000      	b.n	8004386 <_PrintUnsigned+0xa2>
          break;
 8004384:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db57      	blt.n	800443e <_PrintUnsigned+0x15a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d903      	bls.n	800439c <_PrintUnsigned+0xb8>
        NumDigits--;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	e00a      	b.n	80043b2 <_PrintUnsigned+0xce>
      } else {
        Div = v / Digit;
 800439c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f7fb feb6 	bl	8000110 <__udivsi3>
 80043a4:	0003      	movs	r3, r0
 80043a6:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d200      	bcs.n	80043b2 <_PrintUnsigned+0xce>
          break;
 80043b0:	e004      	b.n	80043bc <_PrintUnsigned+0xd8>
        }
      }
      Digit *= Base;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4353      	muls	r3, r2
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80043ba:	e7e8      	b.n	800438e <_PrintUnsigned+0xaa>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80043bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043be:	68b8      	ldr	r0, [r7, #8]
 80043c0:	f7fb fea6 	bl	8000110 <__udivsi3>
 80043c4:	0003      	movs	r3, r0
 80043c6:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043cc:	4353      	muls	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80043d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <_PrintUnsigned+0x164>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0011      	movs	r1, r2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7ff ff3e 	bl	8004262 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db09      	blt.n	8004402 <_PrintUnsigned+0x11e>
        break;
      }
      Digit /= Base;
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043f2:	f7fb fe8d 	bl	8000110 <__udivsi3>
 80043f6:	0003      	movs	r3, r0
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1dd      	bne.n	80043bc <_PrintUnsigned+0xd8>
 8004400:	e000      	b.n	8004404 <_PrintUnsigned+0x120>
        break;
 8004402:	46c0      	nop			@ (mov r8, r8)
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d018      	beq.n	800443e <_PrintUnsigned+0x15a>
      if (FieldWidth != 0u) {
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	2b00      	cmp	r3, #0
 8004410:	d015      	beq.n	800443e <_PrintUnsigned+0x15a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004412:	e00b      	b.n	800442c <_PrintUnsigned+0x148>
          FieldWidth--;
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	3b01      	subs	r3, #1
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2120      	movs	r1, #32
 800441e:	0018      	movs	r0, r3
 8004420:	f7ff ff1f 	bl	8004262 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	db07      	blt.n	800443c <_PrintUnsigned+0x158>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <_PrintUnsigned+0x15a>
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	429a      	cmp	r2, r3
 8004438:	d3ec      	bcc.n	8004414 <_PrintUnsigned+0x130>
          }
        }
      }
    }
  }
}
 800443a:	e000      	b.n	800443e <_PrintUnsigned+0x15a>
            break;
 800443c:	46c0      	nop			@ (mov r8, r8)
}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b00a      	add	sp, #40	@ 0x28
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			@ (mov r8, r8)
 8004448:	08005bfc 	.word	0x08005bfc

0800444c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b089      	sub	sp, #36	@ 0x24
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	17da      	asrs	r2, r3, #31
 800445e:	189b      	adds	r3, r3, r2
 8004460:	4053      	eors	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004464:	2301      	movs	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004468:	e009      	b.n	800447e <_PrintInt+0x32>
    Number = (Number / (int)Base);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0019      	movs	r1, r3
 800446e:	6938      	ldr	r0, [r7, #16]
 8004470:	f7fb fed8 	bl	8000224 <__divsi3>
 8004474:	0003      	movs	r3, r0
 8004476:	613b      	str	r3, [r7, #16]
    Width++;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	3301      	adds	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	daf1      	bge.n	800446a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	429a      	cmp	r2, r3
 800448c:	d901      	bls.n	8004492 <_PrintInt+0x46>
    Width = NumDigits;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <_PrintInt+0x60>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	db03      	blt.n	80044a6 <_PrintInt+0x5a>
 800449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a0:	2204      	movs	r2, #4
 80044a2:	4013      	ands	r3, r2
 80044a4:	d002      	beq.n	80044ac <_PrintInt+0x60>
    FieldWidth--;
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	3b01      	subs	r3, #1
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	2202      	movs	r2, #2
 80044b0:	4013      	ands	r3, r2
 80044b2:	d002      	beq.n	80044ba <_PrintInt+0x6e>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01c      	beq.n	80044f4 <_PrintInt+0xa8>
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2201      	movs	r2, #1
 80044be:	4013      	ands	r3, r2
 80044c0:	d118      	bne.n	80044f4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c8:	e00b      	b.n	80044e2 <_PrintInt+0x96>
        FieldWidth--;
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	62bb      	str	r3, [r7, #40]	@ 0x28
        _StoreChar(pBufferDesc, ' ');
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2120      	movs	r1, #32
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff fec4 	bl	8004262 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	db07      	blt.n	80044f2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <_PrintInt+0xa8>
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3ec      	bcc.n	80044ca <_PrintInt+0x7e>
 80044f0:	e000      	b.n	80044f4 <_PrintInt+0xa8>
          break;
 80044f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db4b      	blt.n	8004594 <_PrintInt+0x148>
    if (v < 0) {
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da08      	bge.n	8004514 <_PrintInt+0xc8>
      v = -v;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	425b      	negs	r3, r3
 8004506:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	212d      	movs	r1, #45	@ 0x2d
 800450c:	0018      	movs	r0, r3
 800450e:	f7ff fea8 	bl	8004262 <_StoreChar>
 8004512:	e008      	b.n	8004526 <_PrintInt+0xda>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004516:	2204      	movs	r2, #4
 8004518:	4013      	ands	r3, r2
 800451a:	d004      	beq.n	8004526 <_PrintInt+0xda>
      _StoreChar(pBufferDesc, '+');
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	212b      	movs	r1, #43	@ 0x2b
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff fe9e 	bl	8004262 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db32      	blt.n	8004594 <_PrintInt+0x148>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	2202      	movs	r2, #2
 8004532:	4013      	ands	r3, r2
 8004534:	d01f      	beq.n	8004576 <_PrintInt+0x12a>
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	2201      	movs	r2, #1
 800453a:	4013      	ands	r3, r2
 800453c:	d11b      	bne.n	8004576 <_PrintInt+0x12a>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d118      	bne.n	8004576 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8004544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800454a:	e00b      	b.n	8004564 <_PrintInt+0x118>
            FieldWidth--;
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	3b01      	subs	r3, #1
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
            _StoreChar(pBufferDesc, '0');
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2130      	movs	r1, #48	@ 0x30
 8004556:	0018      	movs	r0, r3
 8004558:	f7ff fe83 	bl	8004262 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db07      	blt.n	8004574 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <_PrintInt+0x12a>
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	429a      	cmp	r2, r3
 8004570:	d3ec      	bcc.n	800454c <_PrintInt+0x100>
 8004572:	e000      	b.n	8004576 <_PrintInt+0x12a>
              break;
 8004574:	46c0      	nop			@ (mov r8, r8)
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	db0a      	blt.n	8004594 <_PrintInt+0x148>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	683c      	ldr	r4, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	0023      	movs	r3, r4
 8004590:	f7ff fea8 	bl	80042e4 <_PrintUnsigned>
      }
    }
  }
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b007      	add	sp, #28
 800459a:	bd90      	pop	{r4, r7, pc}

0800459c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b0a5      	sub	sp, #148	@ 0x94
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80045a8:	2154      	movs	r1, #84	@ 0x54
 80045aa:	187b      	adds	r3, r7, r1
 80045ac:	2214      	movs	r2, #20
 80045ae:	18ba      	adds	r2, r7, r2
 80045b0:	601a      	str	r2, [r3, #0]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	2240      	movs	r2, #64	@ 0x40
 80045b6:	605a      	str	r2, [r3, #4]
  BufferDesc.Cnt            = 0u;
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	2200      	movs	r2, #0
 80045bc:	609a      	str	r2, [r3, #8]
  BufferDesc.RTTBufferIndex = BufferIndex;
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  BufferDesc.ReturnValue    = 0;
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	2200      	movs	r2, #0
 80045c8:	60da      	str	r2, [r3, #12]

  do {
    c = *sFormat;
 80045ca:	2187      	movs	r1, #135	@ 0x87
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	701a      	strb	r2, [r3, #0]
    sFormat++;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80045da:	187b      	adds	r3, r7, r1
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d100      	bne.n	80045e4 <SEGGER_RTT_vprintf+0x48>
 80045e2:	e1a2      	b.n	800492a <SEGGER_RTT_vprintf+0x38e>
      break;
    }
    if (c == '%') {
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b25      	cmp	r3, #37	@ 0x25
 80045ea:	d000      	beq.n	80045ee <SEGGER_RTT_vprintf+0x52>
 80045ec:	e18d      	b.n	800490a <SEGGER_RTT_vprintf+0x36e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80045ee:	2300      	movs	r3, #0
 80045f0:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	18ba      	adds	r2, r7, r2
 80045f8:	6013      	str	r3, [r2, #0]
      do {
        c = *sFormat;
 80045fa:	2187      	movs	r1, #135	@ 0x87
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	701a      	strb	r2, [r3, #0]
        switch (c) {
 8004604:	187b      	adds	r3, r7, r1
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b30      	cmp	r3, #48	@ 0x30
 800460a:	d010      	beq.n	800462e <SEGGER_RTT_vprintf+0x92>
 800460c:	dc27      	bgt.n	800465e <SEGGER_RTT_vprintf+0xc2>
 800460e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004610:	d005      	beq.n	800461e <SEGGER_RTT_vprintf+0x82>
 8004612:	dc24      	bgt.n	800465e <SEGGER_RTT_vprintf+0xc2>
 8004614:	2b23      	cmp	r3, #35	@ 0x23
 8004616:	d01a      	beq.n	800464e <SEGGER_RTT_vprintf+0xb2>
 8004618:	2b2b      	cmp	r3, #43	@ 0x2b
 800461a:	d010      	beq.n	800463e <SEGGER_RTT_vprintf+0xa2>
 800461c:	e01f      	b.n	800465e <SEGGER_RTT_vprintf+0xc2>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800461e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004620:	2201      	movs	r2, #1
 8004622:	4313      	orrs	r3, r2
 8004624:	677b      	str	r3, [r7, #116]	@ 0x74
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	e01c      	b.n	8004668 <SEGGER_RTT_vprintf+0xcc>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800462e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004630:	2202      	movs	r2, #2
 8004632:	4313      	orrs	r3, r2
 8004634:	677b      	str	r3, [r7, #116]	@ 0x74
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	e014      	b.n	8004668 <SEGGER_RTT_vprintf+0xcc>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800463e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004640:	2204      	movs	r2, #4
 8004642:	4313      	orrs	r3, r2
 8004644:	677b      	str	r3, [r7, #116]	@ 0x74
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3301      	adds	r3, #1
 800464a:	60bb      	str	r3, [r7, #8]
 800464c:	e00c      	b.n	8004668 <SEGGER_RTT_vprintf+0xcc>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800464e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004650:	2208      	movs	r2, #8
 8004652:	4313      	orrs	r3, r2
 8004654:	677b      	str	r3, [r7, #116]	@ 0x74
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3301      	adds	r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	e004      	b.n	8004668 <SEGGER_RTT_vprintf+0xcc>
        default:  v = 0; break;
 800465e:	2300      	movs	r3, #0
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	18ba      	adds	r2, r7, r2
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	46c0      	nop			@ (mov r8, r8)
        }
      } while (v);
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1c3      	bne.n	80045fa <SEGGER_RTT_vprintf+0x5e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004672:	2300      	movs	r3, #0
 8004674:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8004676:	2187      	movs	r1, #135	@ 0x87
 8004678:	187b      	adds	r3, r7, r1
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	7812      	ldrb	r2, [r2, #0]
 800467e:	701a      	strb	r2, [r3, #0]
        if ((c < '0') || (c > '9')) {
 8004680:	187b      	adds	r3, r7, r1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b2f      	cmp	r3, #47	@ 0x2f
 8004686:	d912      	bls.n	80046ae <SEGGER_RTT_vprintf+0x112>
 8004688:	187b      	adds	r3, r7, r1
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b39      	cmp	r3, #57	@ 0x39
 800468e:	d80e      	bhi.n	80046ae <SEGGER_RTT_vprintf+0x112>
          break;
        }
        sFormat++;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	3301      	adds	r3, #1
 8004694:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8004696:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004698:	0013      	movs	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	189b      	adds	r3, r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	001a      	movs	r2, r3
 80046a2:	187b      	adds	r3, r7, r1
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	18d3      	adds	r3, r2, r3
 80046a8:	3b30      	subs	r3, #48	@ 0x30
 80046aa:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 80046ac:	e7e3      	b.n	8004676 <SEGGER_RTT_vprintf+0xda>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 80046ae:	217f      	movs	r1, #127	@ 0x7f
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
      Precision = 0u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 80046ba:	2087      	movs	r0, #135	@ 0x87
 80046bc:	183b      	adds	r3, r7, r0
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	701a      	strb	r2, [r3, #0]
      if (c == '.') {
 80046c4:	183b      	adds	r3, r7, r0
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ca:	d134      	bne.n	8004736 <SEGGER_RTT_vprintf+0x19a>
        sFormat++;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d8:	d10d      	bne.n	80046f6 <SEGGER_RTT_vprintf+0x15a>
          sFormat++;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3301      	adds	r3, #1
 80046de:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
          Precision = va_arg(*pParamList, int);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	1d19      	adds	r1, r3, #4
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6011      	str	r1, [r2, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046f4:	e01f      	b.n	8004736 <SEGGER_RTT_vprintf+0x19a>
        } else {
          do {
            c = *sFormat;
 80046f6:	2187      	movs	r1, #135	@ 0x87
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
            if ((c < '0') || (c > '9')) {
 8004700:	187b      	adds	r3, r7, r1
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b2f      	cmp	r3, #47	@ 0x2f
 8004706:	d916      	bls.n	8004736 <SEGGER_RTT_vprintf+0x19a>
 8004708:	187b      	adds	r3, r7, r1
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b39      	cmp	r3, #57	@ 0x39
 800470e:	d812      	bhi.n	8004736 <SEGGER_RTT_vprintf+0x19a>
              break;
            }
            PrecisionSet = 1;
 8004710:	237f      	movs	r3, #127	@ 0x7f
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
            sFormat++;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3301      	adds	r3, #1
 800471c:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 800471e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004720:	0013      	movs	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	189b      	adds	r3, r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	001a      	movs	r2, r3
 800472a:	187b      	adds	r3, r7, r1
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	3b30      	subs	r3, #48	@ 0x30
 8004732:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8004734:	e7df      	b.n	80046f6 <SEGGER_RTT_vprintf+0x15a>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004736:	2387      	movs	r3, #135	@ 0x87
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	701a      	strb	r2, [r3, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 8004740:	2287      	movs	r2, #135	@ 0x87
 8004742:	18bb      	adds	r3, r7, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b6c      	cmp	r3, #108	@ 0x6c
 8004748:	d003      	beq.n	8004752 <SEGGER_RTT_vprintf+0x1b6>
 800474a:	18bb      	adds	r3, r7, r2
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b68      	cmp	r3, #104	@ 0x68
 8004750:	d108      	bne.n	8004764 <SEGGER_RTT_vprintf+0x1c8>
          sFormat++;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3301      	adds	r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004758:	2387      	movs	r3, #135	@ 0x87
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	7812      	ldrb	r2, [r2, #0]
 8004760:	701a      	strb	r2, [r3, #0]
        if ((c == 'l') || (c == 'h')) {
 8004762:	e7ed      	b.n	8004740 <SEGGER_RTT_vprintf+0x1a4>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004764:	2387      	movs	r3, #135	@ 0x87
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b25      	cmp	r3, #37	@ 0x25
 800476c:	d100      	bne.n	8004770 <SEGGER_RTT_vprintf+0x1d4>
 800476e:	e0c0      	b.n	80048f2 <SEGGER_RTT_vprintf+0x356>
 8004770:	da00      	bge.n	8004774 <SEGGER_RTT_vprintf+0x1d8>
 8004772:	e0c5      	b.n	8004900 <SEGGER_RTT_vprintf+0x364>
 8004774:	2b78      	cmp	r3, #120	@ 0x78
 8004776:	dd00      	ble.n	800477a <SEGGER_RTT_vprintf+0x1de>
 8004778:	e0c2      	b.n	8004900 <SEGGER_RTT_vprintf+0x364>
 800477a:	2b58      	cmp	r3, #88	@ 0x58
 800477c:	da00      	bge.n	8004780 <SEGGER_RTT_vprintf+0x1e4>
 800477e:	e0bf      	b.n	8004900 <SEGGER_RTT_vprintf+0x364>
 8004780:	3b58      	subs	r3, #88	@ 0x58
 8004782:	2b20      	cmp	r3, #32
 8004784:	d900      	bls.n	8004788 <SEGGER_RTT_vprintf+0x1ec>
 8004786:	e0bb      	b.n	8004900 <SEGGER_RTT_vprintf+0x364>
 8004788:	009a      	lsls	r2, r3, #2
 800478a:	4b78      	ldr	r3, [pc, #480]	@ (800496c <SEGGER_RTT_vprintf+0x3d0>)
 800478c:	18d3      	adds	r3, r2, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	469f      	mov	pc, r3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	1d19      	adds	r1, r3, #4
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6011      	str	r1, [r2, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	18b9      	adds	r1, r7, r2
 80047a2:	600b      	str	r3, [r1, #0]
        c0 = (char)v;
 80047a4:	216b      	movs	r1, #107	@ 0x6b
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	18ba      	adds	r2, r7, r2
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	701a      	strb	r2, [r3, #0]
        _StoreChar(&BufferDesc, c0);
 80047ae:	187b      	adds	r3, r7, r1
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	2354      	movs	r3, #84	@ 0x54
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	0011      	movs	r1, r2
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7ff fd52 	bl	8004262 <_StoreChar>
        break;
 80047be:	e0a0      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	1d19      	adds	r1, r3, #4
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2180      	movs	r1, #128	@ 0x80
 80047ce:	187a      	adds	r2, r7, r1
 80047d0:	6013      	str	r3, [r2, #0]
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 80047d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	6819      	ldr	r1, [r3, #0]
 80047d8:	2354      	movs	r3, #84	@ 0x54
 80047da:	18f8      	adds	r0, r7, r3
 80047dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047de:	9301      	str	r3, [sp, #4]
 80047e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	0013      	movs	r3, r2
 80047e6:	220a      	movs	r2, #10
 80047e8:	f7ff fe30 	bl	800444c <_PrintInt>
        break;
 80047ec:	e089      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      case 'u':
        v = va_arg(*pParamList, int);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1d19      	adds	r1, r3, #4
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6011      	str	r1, [r2, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2280      	movs	r2, #128	@ 0x80
 80047fc:	18b9      	adds	r1, r7, r2
 80047fe:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8004800:	18bb      	adds	r3, r7, r2
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004806:	2354      	movs	r3, #84	@ 0x54
 8004808:	18f8      	adds	r0, r7, r3
 800480a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	0013      	movs	r3, r2
 8004814:	220a      	movs	r2, #10
 8004816:	f7ff fd65 	bl	80042e4 <_PrintUnsigned>
        break;
 800481a:	e072      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1d19      	adds	r1, r3, #4
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2280      	movs	r2, #128	@ 0x80
 800482a:	18b9      	adds	r1, r7, r2
 800482c:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 800482e:	18bb      	adds	r3, r7, r2
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004834:	2354      	movs	r3, #84	@ 0x54
 8004836:	18f8      	adds	r0, r7, r3
 8004838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	0013      	movs	r3, r2
 8004842:	2210      	movs	r2, #16
 8004844:	f7ff fd4e 	bl	80042e4 <_PrintUnsigned>
        break;
 8004848:	e05b      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1d19      	adds	r1, r3, #4
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6011      	str	r1, [r2, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8004858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d105      	bne.n	800486a <SEGGER_RTT_vprintf+0x2ce>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 800485e:	4b44      	ldr	r3, [pc, #272]	@ (8004970 <SEGGER_RTT_vprintf+0x3d4>)
 8004860:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8004862:	237f      	movs	r3, #127	@ 0x7f
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
          }
          do {
            c = *s;
 800486a:	2187      	movs	r1, #135	@ 0x87
 800486c:	187b      	adds	r3, r7, r1
 800486e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	701a      	strb	r2, [r3, #0]
            s++;
 8004874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004876:	3301      	adds	r3, #1
 8004878:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 800487a:	187b      	adds	r3, r7, r1
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01d      	beq.n	80048be <SEGGER_RTT_vprintf+0x322>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8004882:	237f      	movs	r3, #127	@ 0x7f
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <SEGGER_RTT_vprintf+0x2f6>
 800488c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800488e:	2b00      	cmp	r3, #0
 8004890:	d017      	beq.n	80048c2 <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8004892:	2387      	movs	r3, #135	@ 0x87
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	2454      	movs	r4, #84	@ 0x54
 800489a:	193b      	adds	r3, r7, r4
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff fcdf 	bl	8004262 <_StoreChar>
            Precision--;
 80048a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a6:	3b01      	subs	r3, #1
 80048a8:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 80048aa:	193b      	adds	r3, r7, r4
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	217f      	movs	r1, #127	@ 0x7f
 80048b0:	187a      	adds	r2, r7, r1
 80048b2:	1879      	adds	r1, r7, r1
 80048b4:	7809      	ldrb	r1, [r1, #0]
 80048b6:	7011      	strb	r1, [r2, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dad6      	bge.n	800486a <SEGGER_RTT_vprintf+0x2ce>
        }
        break;
 80048bc:	e021      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
              break;
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	e01f      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
              break;
 80048c2:	46c0      	nop			@ (mov r8, r8)
        break;
 80048c4:	e01d      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      case 'p':
        v = va_arg(*pParamList, int);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1d19      	adds	r1, r3, #4
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6011      	str	r1, [r2, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2280      	movs	r2, #128	@ 0x80
 80048d4:	18b9      	adds	r1, r7, r2
 80048d6:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 80048d8:	18bb      	adds	r3, r7, r2
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	2354      	movs	r3, #84	@ 0x54
 80048de:	18f8      	adds	r0, r7, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	2308      	movs	r3, #8
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2308      	movs	r3, #8
 80048ea:	2210      	movs	r2, #16
 80048ec:	f7ff fcfa 	bl	80042e4 <_PrintUnsigned>
        break;
 80048f0:	e007      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80048f2:	2354      	movs	r3, #84	@ 0x54
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	2125      	movs	r1, #37	@ 0x25
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7ff fcb2 	bl	8004262 <_StoreChar>
        break;
 80048fe:	e000      	b.n	8004902 <SEGGER_RTT_vprintf+0x366>
      default:
        break;
 8004900:	46c0      	nop			@ (mov r8, r8)
      }
      sFormat++;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	e008      	b.n	800491c <SEGGER_RTT_vprintf+0x380>
    } else {
      _StoreChar(&BufferDesc, c);
 800490a:	2387      	movs	r3, #135	@ 0x87
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	2354      	movs	r3, #84	@ 0x54
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f7ff fca3 	bl	8004262 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800491c:	2354      	movs	r3, #84	@ 0x54
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	db00      	blt.n	8004928 <SEGGER_RTT_vprintf+0x38c>
 8004926:	e650      	b.n	80045ca <SEGGER_RTT_vprintf+0x2e>
 8004928:	e000      	b.n	800492c <SEGGER_RTT_vprintf+0x390>
      break;
 800492a:	46c0      	nop			@ (mov r8, r8)

  if (BufferDesc.ReturnValue > 0) {
 800492c:	2254      	movs	r2, #84	@ 0x54
 800492e:	18bb      	adds	r3, r7, r2
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	dd13      	ble.n	800495e <SEGGER_RTT_vprintf+0x3c2>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8004936:	18bb      	adds	r3, r7, r2
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <SEGGER_RTT_vprintf+0x3b2>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800493e:	18bb      	adds	r3, r7, r2
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	2314      	movs	r3, #20
 8004944:	18f9      	adds	r1, r7, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	0018      	movs	r0, r3
 800494a:	f7ff fc45 	bl	80041d8 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800494e:	2154      	movs	r1, #84	@ 0x54
 8004950:	187b      	adds	r3, r7, r1
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	187b      	adds	r3, r7, r1
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	18d2      	adds	r2, r2, r3
 800495a:	187b      	adds	r3, r7, r1
 800495c:	60da      	str	r2, [r3, #12]
  }
  return BufferDesc.ReturnValue;
 800495e:	2354      	movs	r3, #84	@ 0x54
 8004960:	18fb      	adds	r3, r7, r3
 8004962:	68db      	ldr	r3, [r3, #12]
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b023      	add	sp, #140	@ 0x8c
 800496a:	bd90      	pop	{r4, r7, pc}
 800496c:	08005b78 	.word	0x08005b78
 8004970:	080050d4 	.word	0x080050d4

08004974 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8004974:	b40e      	push	{r1, r2, r3}
 8004976:	b580      	push	{r7, lr}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800497e:	2320      	movs	r3, #32
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8004984:	2308      	movs	r3, #8
 8004986:	18fa      	adds	r2, r7, r3
 8004988:	69f9      	ldr	r1, [r7, #28]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f7ff fe05 	bl	800459c <SEGGER_RTT_vprintf>
 8004992:	0003      	movs	r3, r0
 8004994:	60fb      	str	r3, [r7, #12]
  va_end(ParamList);
  return r;
 8004996:	68fb      	ldr	r3, [r7, #12]
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b005      	add	sp, #20
 800499e:	bc80      	pop	{r7}
 80049a0:	bc08      	pop	{r3}
 80049a2:	b003      	add	sp, #12
 80049a4:	4718      	bx	r3

080049a6 <memset>:
 80049a6:	0003      	movs	r3, r0
 80049a8:	1882      	adds	r2, r0, r2
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d100      	bne.n	80049b0 <memset+0xa>
 80049ae:	4770      	bx	lr
 80049b0:	7019      	strb	r1, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	e7f9      	b.n	80049aa <memset+0x4>
	...

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	2600      	movs	r6, #0
 80049bc:	4c0c      	ldr	r4, [pc, #48]	@ (80049f0 <__libc_init_array+0x38>)
 80049be:	4d0d      	ldr	r5, [pc, #52]	@ (80049f4 <__libc_init_array+0x3c>)
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	2600      	movs	r6, #0
 80049ca:	f000 f819 	bl	8004a00 <_init>
 80049ce:	4c0a      	ldr	r4, [pc, #40]	@ (80049f8 <__libc_init_array+0x40>)
 80049d0:	4d0a      	ldr	r5, [pc, #40]	@ (80049fc <__libc_init_array+0x44>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	00b3      	lsls	r3, r6, #2
 80049de:	58eb      	ldr	r3, [r5, r3]
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	00b3      	lsls	r3, r6, #2
 80049e8:	58eb      	ldr	r3, [r5, r3]
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	08005c0c 	.word	0x08005c0c
 80049f4:	08005c0c 	.word	0x08005c0c
 80049f8:	08005c10 	.word	0x08005c10
 80049fc:	08005c0c 	.word	0x08005c0c

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
