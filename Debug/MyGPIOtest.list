
MyGPIOtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f44  08005f44  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005f44  08005f44  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005f44  08005f44  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00006f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f48  08005f48  00006f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000010  08005f5c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08005f5c  00007640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011efb  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028af  00000000  00000000  00018f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  0001b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd8  00000000  00000000  0001c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019837  00000000  00000000  0001d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013add  00000000  00000000  00036ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed1f  00000000  00000000  0004a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e92e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003560  00000000  00000000  000e9328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ec888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004b30 	.word	0x08004b30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08004b30 	.word	0x08004b30

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <IO_Init>:
/**
 * @brief  Initialize GPIO pins for AX5689 and power stage control
 * @note   Based on official Step 2: Initialize I/O
 */
void IO_Init(void) 
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    // Initialize RTT for debug output
    SEGGER_RTT_Init();
 8000400:	f003 ffc0 	bl	8004384 <SEGGER_RTT_Init>
    
    RTT_printf("=== Step 2: Initialize I/O ===\r\n");
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <IO_Init+0x88>)
 8000406:	0019      	movs	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f004 fb4b 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // Following official Axign documentation sequence:
    // SetPin(AX_MUTE_N, LOW); // 将放大器置于静音状态（音量为 0）
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 800040e:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <IO_Init+0x8c>)
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f001 faae 	bl	8001976 <HAL_GPIO_WritePin>
    RTT_printf("AX_MUTE_N set to LOW (amplifier muted)\r\n");
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <IO_Init+0x90>)
 800041c:	0019      	movs	r1, r3
 800041e:	2000      	movs	r0, #0
 8000420:	f004 fb40 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // SetPin(PS_RESET_N, LOW); // 将功率级置于高阻态 (Hi-Z)
    // Note: PS_RESET_N corresponds to power stage reset, using available power control pins
    HAL_GPIO_WritePin(D5V2_EN_GPIO_Port, D5V2_EN_Pin, GPIO_PIN_RESET);
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	01db      	lsls	r3, r3, #7
 8000428:	4817      	ldr	r0, [pc, #92]	@ (8000488 <IO_Init+0x8c>)
 800042a:	2200      	movs	r2, #0
 800042c:	0019      	movs	r1, r3
 800042e:	f001 faa2 	bl	8001976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PVDD_EN_GPIO_Port, PVDD_EN_Pin, GPIO_PIN_RESET);
 8000432:	23a0      	movs	r3, #160	@ 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fa9b 	bl	8001976 <HAL_GPIO_WritePin>
    RTT_printf("Power stage set to Hi-Z state\r\n");
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <IO_Init+0x94>)
 8000442:	0019      	movs	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f004 fb2d 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // delay(20); // 等待信号稳定 (ms)
    HAL_Delay(20);
 800044a:	2014      	movs	r0, #20
 800044c:	f001 f81c 	bl	8001488 <HAL_Delay>
    RTT_printf("Signal stabilization delay: 20ms\r\n");
 8000450:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <IO_Init+0x98>)
 8000452:	0019      	movs	r1, r3
 8000454:	2000      	movs	r0, #0
 8000456:	f004 fb25 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // SetPin(AX_RESET_N, LOW); // 禁用 Axign 控制器
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_RESET);
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	2101      	movs	r1, #1
 8000462:	0018      	movs	r0, r3
 8000464:	f001 fa87 	bl	8001976 <HAL_GPIO_WritePin>
    RTT_printf("AX_RESET_N set to LOW (Axign controller disabled)\r\n");
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <IO_Init+0x9c>)
 800046a:	0019      	movs	r1, r3
 800046c:	2000      	movs	r0, #0
 800046e:	f004 fb19 	bl	8004aa4 <SEGGER_RTT_printf>
    
    RTT_printf("I/O initialization completed according to official documentation.\r\n\r\n");
 8000472:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <IO_Init+0xa0>)
 8000474:	0019      	movs	r1, r3
 8000476:	2000      	movs	r0, #0
 8000478:	f004 fb14 	bl	8004aa4 <SEGGER_RTT_printf>
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	08004b48 	.word	0x08004b48
 8000488:	50000800 	.word	0x50000800
 800048c:	08004b6c 	.word	0x08004b6c
 8000490:	08004b98 	.word	0x08004b98
 8000494:	08004bb8 	.word	0x08004bb8
 8000498:	08004bdc 	.word	0x08004bdc
 800049c:	08004c10 	.word	0x08004c10

080004a0 <AX5689_Read>:
 * @param  regAddr: Register address to read from
 * @param  data: Pointer to store the read 16-bit data
 * @retval HAL status
 */
HAL_StatusTypeDef AX5689_Read(uint16_t regAddr, uint16_t *data) 
{
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	0002      	movs	r2, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	1dbb      	adds	r3, r7, #6
 80004ac:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_ERROR;
 80004ae:	210f      	movs	r1, #15
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2];

    // Convert 16-bit register address to two 8-bit bytes
    buffer[0] = (regAddr >> 8) & 0xFF;
 80004b6:	1dbb      	adds	r3, r7, #6
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	0a1b      	lsrs	r3, r3, #8
 80004bc:	b29b      	uxth	r3, r3
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	250c      	movs	r5, #12
 80004c2:	197b      	adds	r3, r7, r5
 80004c4:	701a      	strb	r2, [r3, #0]
    buffer[1] = regAddr & 0xFF;
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	197b      	adds	r3, r7, r5
 80004ce:	705a      	strb	r2, [r3, #1]

    // Send register address
    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 80004d0:	000e      	movs	r6, r1
 80004d2:	19bc      	adds	r4, r7, r6
 80004d4:	197a      	adds	r2, r7, r5
 80004d6:	4819      	ldr	r0, [pc, #100]	@ (800053c <AX5689_Read+0x9c>)
 80004d8:	2301      	movs	r3, #1
 80004da:	425b      	negs	r3, r3
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	2172      	movs	r1, #114	@ 0x72
 80004e2:	f001 fb0b 	bl	8001afc <HAL_I2C_Master_Transmit>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 80004ea:	19bb      	adds	r3, r7, r6
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d11c      	bne.n	800052c <AX5689_Read+0x8c>
        // Receive data
        status = HAL_I2C_Master_Receive(&hi2c2, AX5689_I2C_ADDR, buffer, 2, HAL_MAX_DELAY);
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197a      	adds	r2, r7, r5
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <AX5689_Read+0x9c>)
 80004f8:	2301      	movs	r3, #1
 80004fa:	425b      	negs	r3, r3
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2302      	movs	r3, #2
 8000500:	2172      	movs	r1, #114	@ 0x72
 8000502:	f001 fc25 	bl	8001d50 <HAL_I2C_Master_Receive>
 8000506:	0003      	movs	r3, r0
 8000508:	7023      	strb	r3, [r4, #0]
        if (status == HAL_OK) {
 800050a:	19bb      	adds	r3, r7, r6
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10c      	bne.n	800052c <AX5689_Read+0x8c>
            *data = ((uint16_t)buffer[0] << 8) | (uint16_t)buffer[1];
 8000512:	197b      	adds	r3, r7, r5
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b21b      	sxth	r3, r3
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	197b      	adds	r3, r7, r5
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	b21b      	sxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b21b      	sxth	r3, r3
 8000526:	b29a      	uxth	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	801a      	strh	r2, [r3, #0]
        }
    }
    
    return status;
 800052c:	230f      	movs	r3, #15
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	781b      	ldrb	r3, [r3, #0]
}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	b005      	add	sp, #20
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	20000030 	.word	0x20000030

08000540 <AX5689_Write>:
 * @param  regAddr: Register address to write to
 * @param  regVal: 16-bit value to write
 * @retval HAL status
 */
HAL_StatusTypeDef AX5689_Write(uint16_t regAddr, uint16_t regVal) 
{
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	0002      	movs	r2, r0
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	801a      	strh	r2, [r3, #0]
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	1c0a      	adds	r2, r1, #0
 8000550:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef status;
    uint8_t data[4];

    // Format data: [RegAddr_MSB, RegAddr_LSB, Data_MSB, Data_LSB]
    data[0] = (regAddr >> 8) & 0xFF;
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	0a1b      	lsrs	r3, r3, #8
 8000558:	b29b      	uxth	r3, r3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	2508      	movs	r5, #8
 800055e:	197b      	adds	r3, r7, r5
 8000560:	701a      	strb	r2, [r3, #0]
    data[1] = regAddr & 0xFF;
 8000562:	1dbb      	adds	r3, r7, #6
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	197b      	adds	r3, r7, r5
 800056a:	705a      	strb	r2, [r3, #1]
    data[2] = (regVal >> 8) & 0xFF;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	b29b      	uxth	r3, r3
 8000574:	b2da      	uxtb	r2, r3
 8000576:	197b      	adds	r3, r7, r5
 8000578:	709a      	strb	r2, [r3, #2]
    data[3] = regVal & 0xFF;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	197b      	adds	r3, r7, r5
 8000582:	70da      	strb	r2, [r3, #3]

    // Debug output - show what we're writing
    RTT_printf("Writing reg 0x%04X = 0x%04X\r\n", regAddr, regVal);
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881a      	ldrh	r2, [r3, #0]
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	490b      	ldr	r1, [pc, #44]	@ (80005bc <AX5689_Write+0x7c>)
 800058e:	2000      	movs	r0, #0
 8000590:	f004 fa88 	bl	8004aa4 <SEGGER_RTT_printf>

    // Send complete transaction
    status = HAL_I2C_Master_Transmit(&hi2c2, AX5689_I2C_ADDR, data, 4, 1000);
 8000594:	260f      	movs	r6, #15
 8000596:	19bc      	adds	r4, r7, r6
 8000598:	197a      	adds	r2, r7, r5
 800059a:	4809      	ldr	r0, [pc, #36]	@ (80005c0 <AX5689_Write+0x80>)
 800059c:	23fa      	movs	r3, #250	@ 0xfa
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2304      	movs	r3, #4
 80005a4:	2172      	movs	r1, #114	@ 0x72
 80005a6:	f001 faa9 	bl	8001afc <HAL_I2C_Master_Transmit>
 80005aa:	0003      	movs	r3, r0
 80005ac:	7023      	strb	r3, [r4, #0]
    
    return status;
 80005ae:	19bb      	adds	r3, r7, r6
 80005b0:	781b      	ldrb	r3, [r3, #0]
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b005      	add	sp, #20
 80005b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	08004c58 	.word	0x08004c58
 80005c0:	20000030 	.word	0x20000030

080005c4 <AX5689_WriteRegisterSet>:
 * @brief  Write a complete register configuration set to AX5689
 * @param  ptrConfigArray: Pointer to configuration array
 * @note   Based on official AX568X_WriteRegisterSet implementation
 */
void AX5689_WriteRegisterSet(const uint16_t *ptrConfigArray) 
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    RTT_printf("Starting register configuration according to official documentation...\r\n");
 80005cc:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <AX5689_WriteRegisterSet+0x64>)
 80005ce:	0019      	movs	r1, r3
 80005d0:	2000      	movs	r0, #0
 80005d2:	f004 fa67 	bl	8004aa4 <SEGGER_RTT_printf>

    // 循环直到数组命令结束
    // Loop until end of array commands
    while (*ptrConfigArray != 0xFFFF) {
 80005d6:	e018      	b.n	800060a <AX5689_WriteRegisterSet+0x46>
        uint16_t regAddr = ptrConfigArray[0];
 80005d8:	210e      	movs	r1, #14
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	801a      	strh	r2, [r3, #0]
        uint16_t regVal = ptrConfigArray[1];
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	1c9a      	adds	r2, r3, #2
 80005e6:	200c      	movs	r0, #12
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	8812      	ldrh	r2, [r2, #0]
 80005ec:	801a      	strh	r2, [r3, #0]

        // AX568X_Write(axAddrI2C, ptrConfigArray[0], ptrConfigArray[1]);
        AX5689_Write(regAddr, regVal);
 80005ee:	183b      	adds	r3, r7, r0
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ffa1 	bl	8000540 <AX5689_Write>
        HAL_Delay(1); // Small delay between register writes
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 ff42 	bl	8001488 <HAL_Delay>
        
        // ptrConfigArray += 2; // 转到数组中的下一个地址
        // Move to next address in array
        ptrConfigArray += 2;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3304      	adds	r3, #4
 8000608:	607b      	str	r3, [r7, #4]
    while (*ptrConfigArray != 0xFFFF) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	4a07      	ldr	r2, [pc, #28]	@ (800062c <AX5689_WriteRegisterSet+0x68>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d1e1      	bne.n	80005d8 <AX5689_WriteRegisterSet+0x14>
    }

    RTT_printf("Register configuration completed according to official documentation.\r\n");
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <AX5689_WriteRegisterSet+0x6c>)
 8000616:	0019      	movs	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f004 fa43 	bl	8004aa4 <SEGGER_RTT_printf>
}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	08004c78 	.word	0x08004c78
 800062c:	0000ffff 	.word	0x0000ffff
 8000630:	08004cc4 	.word	0x08004cc4

08000634 <AX5689_Setup>:
/**
 * @brief  Setup AX5689 with current configuration mode
 * @note   Based on official Step 4: Set up AX5688/AX5689
 */
void AX5689_Setup(void) 
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    RTT_printf("=== Step 4: Set up AX5688/AX5689 ===\r\n");
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <AX5689_Setup+0x78>)
 800063a:	0019      	movs	r1, r3
 800063c:	2000      	movs	r0, #0
 800063e:	f004 fa31 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // SetPin(AX_RESET_N, HIGH); // 启用 AX5688 或 AX5689
    HAL_GPIO_WritePin(AX_Reset_N_GPIO_Port, AX_Reset_N_Pin, GPIO_PIN_SET);
 8000642:	23a0      	movs	r3, #160	@ 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f001 f993 	bl	8001976 <HAL_GPIO_WritePin>
    RTT_printf("AX_RESET_N set to HIGH (Enable AX5689)\r\n");
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <AX5689_Setup+0x7c>)
 8000652:	0019      	movs	r1, r3
 8000654:	2000      	movs	r0, #0
 8000656:	f004 fa25 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // AX568X_WriteRegisterSet(axAddrI2C, &amplifierCommands[0]); 
    // 从支持文件中写入"寄存器设置"
    if (current_config_mode == AX5689_CLOSELOOP_MODE) {
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <AX5689_Setup+0x80>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d109      	bne.n	8000676 <AX5689_Setup+0x42>
        RTT_printf("Writing CloseLoop register configuration...\r\n");
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <AX5689_Setup+0x84>)
 8000664:	0019      	movs	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f004 fa1c 	bl	8004aa4 <SEGGER_RTT_printf>
        AX5689_WriteRegisterSet(amplifierCommands_CloseLoop);
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <AX5689_Setup+0x88>)
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff ffa8 	bl	80005c4 <AX5689_WriteRegisterSet>
 8000674:	e008      	b.n	8000688 <AX5689_Setup+0x54>
    } else {
        RTT_printf("Writing OpenLoop register configuration...\r\n");
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <AX5689_Setup+0x8c>)
 8000678:	0019      	movs	r1, r3
 800067a:	2000      	movs	r0, #0
 800067c:	f004 fa12 	bl	8004aa4 <SEGGER_RTT_printf>
        AX5689_WriteRegisterSet(amplifierCommands);
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <AX5689_Setup+0x90>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff ff9e 	bl	80005c4 <AX5689_WriteRegisterSet>
    }
    
    // delay(500); // 系统稳定时间 (ms)
    HAL_Delay(500);
 8000688:	23fa      	movs	r3, #250	@ 0xfa
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fefb 	bl	8001488 <HAL_Delay>
    RTT_printf("System stabilization delay: 500ms\r\n");
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <AX5689_Setup+0x94>)
 8000694:	0019      	movs	r1, r3
 8000696:	2000      	movs	r0, #0
 8000698:	f004 fa04 	bl	8004aa4 <SEGGER_RTT_printf>
    RTT_printf("AX5689 setup completed according to official documentation.\r\n\r\n");
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <AX5689_Setup+0x98>)
 800069e:	0019      	movs	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f004 f9ff 	bl	8004aa4 <SEGGER_RTT_printf>
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08004d0c 	.word	0x08004d0c
 80006b0:	08004d34 	.word	0x08004d34
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	08004d60 	.word	0x08004d60
 80006bc:	08005914 	.word	0x08005914
 80006c0:	08004d90 	.word	0x08004d90
 80006c4:	08005414 	.word	0x08005414
 80006c8:	08004dc0 	.word	0x08004dc0
 80006cc:	08004de4 	.word	0x08004de4

080006d0 <StartControlLoop>:
/**
 * @brief  Start the AX5689 control loop
 * @note   Follows official Axign startup sequence to minimize pop noise
 */
void StartControlLoop(void) 
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    // Get current mode values
    uint16_t reg01_value, reg03_value, reg07_value, reg07_default;
    if (current_config_mode == AX5689_CLOSELOOP_MODE) {
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <StartControlLoop+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10d      	bne.n	80006fa <StartControlLoop+0x2a>
        reg01_value = 0xFFFF;  // REG01_VALUE from CloseLoop
 80006de:	1dbb      	adds	r3, r7, #6
 80006e0:	2201      	movs	r2, #1
 80006e2:	4252      	negs	r2, r2
 80006e4:	801a      	strh	r2, [r3, #0]
        reg03_value = 0x1155;  // REG03_VALUE from CloseLoop  
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <StartControlLoop+0xd4>)
 80006ea:	801a      	strh	r2, [r3, #0]
        reg07_value = 0x0001;  // REG07_VALUE from CloseLoop
 80006ec:	1cbb      	adds	r3, r7, #2
 80006ee:	2201      	movs	r2, #1
 80006f0:	801a      	strh	r2, [r3, #0]
        reg07_default = 0x0064; // REG07_VALUE_DEFAULT
 80006f2:	003b      	movs	r3, r7
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	801a      	strh	r2, [r3, #0]
 80006f8:	e00d      	b.n	8000716 <StartControlLoop+0x46>
    } else {
        reg01_value = 0xFFFF;  // REG01_VALUE from OpenLoop
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	2201      	movs	r2, #1
 80006fe:	4252      	negs	r2, r2
 8000700:	801a      	strh	r2, [r3, #0]
        reg03_value = 0x5500;  // REG03_VALUE from OpenLoop
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	22aa      	movs	r2, #170	@ 0xaa
 8000706:	01d2      	lsls	r2, r2, #7
 8000708:	801a      	strh	r2, [r3, #0]
        reg07_value = 0x0001;  // REG07_VALUE from OpenLoop
 800070a:	1cbb      	adds	r3, r7, #2
 800070c:	2201      	movs	r2, #1
 800070e:	801a      	strh	r2, [r3, #0]
        reg07_default = 0x0064; // REG07_VALUE_DEFAULT
 8000710:	003b      	movs	r3, r7
 8000712:	2264      	movs	r2, #100	@ 0x64
 8000714:	801a      	strh	r2, [r3, #0]
    }

    RTT_printf("Starting control loop in %s mode...\r\n", 
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <StartControlLoop+0xd0>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <StartControlLoop+0x52>
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <StartControlLoop+0xd8>)
 8000720:	e000      	b.n	8000724 <StartControlLoop+0x54>
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <StartControlLoop+0xdc>)
 8000724:	4922      	ldr	r1, [pc, #136]	@ (80007b0 <StartControlLoop+0xe0>)
 8000726:	001a      	movs	r2, r3
 8000728:	2000      	movs	r0, #0
 800072a:	f004 f9bb 	bl	8004aa4 <SEGGER_RTT_printf>
               (current_config_mode == AX5689_CLOSELOOP_MODE) ? "CloseLoop" : "OpenLoop");

    // Step 1: Disable all loop filters and PWM modulators
    AX5689_Write(0x0001, 0xFF00); // REG01_VALUE_DEFAULT
 800072e:	23ff      	movs	r3, #255	@ 0xff
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	0019      	movs	r1, r3
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff03 	bl	8000540 <AX5689_Write>
    
    // Step 2: Set volume ramp time to fast
    AX5689_Write(0x0007, reg07_value);
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	0019      	movs	r1, r3
 8000740:	2007      	movs	r0, #7
 8000742:	f7ff fefd 	bl	8000540 <AX5689_Write>
    
    // Step 3: Set Pstart to 'high' to enable power stage
    AX5689_Write(0x0002, 0x1FFF); // REG02_PSTART_ENABLE
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <StartControlLoop+0xe4>)
 8000748:	0019      	movs	r1, r3
 800074a:	2002      	movs	r0, #2
 800074c:	f7ff fef8 	bl	8000540 <AX5689_Write>
    
    // Step 4: Enable all loop filters and PWM modulators
    AX5689_Write(0x0001, reg01_value);
 8000750:	1dbb      	adds	r3, r7, #6
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fef2 	bl	8000540 <AX5689_Write>
    
    // Step 5: Enable external ADC feedback (mode-specific)
    AX5689_Write(0x0003, reg03_value);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	0019      	movs	r1, r3
 8000762:	2003      	movs	r0, #3
 8000764:	f7ff feec 	bl	8000540 <AX5689_Write>
    
    // Step 6: Wait 1ms
    HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fe8d 	bl	8001488 <HAL_Delay>
    
    // Step 7: Unmute amplifier
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_SET);
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <StartControlLoop+0xe8>)
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 f8fe 	bl	8001976 <HAL_GPIO_WritePin>
    
    // Step 8: Wait for volume ramp up (20ms)
    HAL_Delay(20);
 800077a:	2014      	movs	r0, #20
 800077c:	f000 fe84 	bl	8001488 <HAL_Delay>
    
    // Step 9: Set volume ramp time to default value
    AX5689_Write(0x0007, reg07_default);
 8000780:	003b      	movs	r3, r7
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	0019      	movs	r1, r3
 8000786:	2007      	movs	r0, #7
 8000788:	f7ff feda 	bl	8000540 <AX5689_Write>
    
    RTT_printf("Control loop started successfully.\r\n");
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <StartControlLoop+0xec>)
 800078e:	0019      	movs	r1, r3
 8000790:	2000      	movs	r0, #0
 8000792:	f004 f987 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	2000002c 	.word	0x2000002c
 80007a4:	00001155 	.word	0x00001155
 80007a8:	08004e24 	.word	0x08004e24
 80007ac:	08004e30 	.word	0x08004e30
 80007b0:	08004e3c 	.word	0x08004e3c
 80007b4:	00001fff 	.word	0x00001fff
 80007b8:	50000800 	.word	0x50000800
 80007bc:	08004e64 	.word	0x08004e64

080007c0 <StopControlLoop>:
/**
 * @brief  Stop the AX5689 control loop
 * @note   Follows official Axign shutdown sequence to minimize pop noise
 */
void StopControlLoop(void) 
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    RTT_printf("Stopping control loop...\r\n");
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <StopControlLoop+0x68>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f004 f96b 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // Step 1: Set volume ramp time to fast
    AX5689_Write(0x0007, 0x0001); // REG07_VALUE (fast ramp)
 80007ce:	2101      	movs	r1, #1
 80007d0:	2007      	movs	r0, #7
 80007d2:	f7ff feb5 	bl	8000540 <AX5689_Write>
    
    // Step 2: Mute amplifier (volume to 0)
    HAL_GPIO_WritePin(AX_Mute_N_GPIO_Port, AX_Mute_N_Pin, GPIO_PIN_RESET);
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <StopControlLoop+0x6c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f8ca 	bl	8001976 <HAL_GPIO_WritePin>
    
    // Step 3: Wait for volume ramp down (20ms)
    HAL_Delay(20);
 80007e2:	2014      	movs	r0, #20
 80007e4:	f000 fe50 	bl	8001488 <HAL_Delay>
    
    // Step 4: Set Pstart to 'low' to disable power stage
    AX5689_Write(0x0002, 0x17FF); // REG02_PSTART_DISABLE
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <StopControlLoop+0x70>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	2002      	movs	r0, #2
 80007ee:	f7ff fea7 	bl	8000540 <AX5689_Write>
    
    // Step 5: Wait for tristate to go low (20ms)
    HAL_Delay(20);
 80007f2:	2014      	movs	r0, #20
 80007f4:	f000 fe48 	bl	8001488 <HAL_Delay>
    
    // Step 6: Disable/reset all loop filters and PWM modulators
    AX5689_Write(0x0001, 0xFF00); // REG01_VALUE_DEFAULT
 80007f8:	23ff      	movs	r3, #255	@ 0xff
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	0019      	movs	r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff fe9e 	bl	8000540 <AX5689_Write>
    
    // Step 7: Set volume ramp time to default value
    AX5689_Write(0x0007, 0x0064); // REG07_VALUE_DEFAULT
 8000804:	2164      	movs	r1, #100	@ 0x64
 8000806:	2007      	movs	r0, #7
 8000808:	f7ff fe9a 	bl	8000540 <AX5689_Write>
    
    // Step 8: Restore all ramps to default values
    AX5689_Write(0x0003, 0x0000); // REG03_VALUE_DEFAULT
 800080c:	2100      	movs	r1, #0
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff fe96 	bl	8000540 <AX5689_Write>
    
    // Step 9: Reset status registers
    clearStatusRegisters();
 8000814:	f000 f810 	bl	8000838 <clearStatusRegisters>
    
    RTT_printf("Control loop stopped successfully.\r\n");
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <StopControlLoop+0x74>)
 800081a:	0019      	movs	r1, r3
 800081c:	2000      	movs	r0, #0
 800081e:	f004 f941 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08004e8c 	.word	0x08004e8c
 800082c:	50000800 	.word	0x50000800
 8000830:	000017ff 	.word	0x000017ff
 8000834:	08004ea8 	.word	0x08004ea8

08000838 <clearStatusRegisters>:
/**
 * @brief  Clear AX5689 status registers
 * @note   Read all status registers to clear status pin
 */
void clearStatusRegisters(void) 
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
    uint16_t temp;
    
    // Read all status registers to clear them
    AX5689_Read(0x003C, &temp); // Read register 60 (0x3C)
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	0019      	movs	r1, r3
 8000842:	203c      	movs	r0, #60	@ 0x3c
 8000844:	f7ff fe2c 	bl	80004a0 <AX5689_Read>
    AX5689_Read(0x003D, &temp); // Read register 61 (0x3D) 
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	0019      	movs	r1, r3
 800084c:	203d      	movs	r0, #61	@ 0x3d
 800084e:	f7ff fe27 	bl	80004a0 <AX5689_Read>
    AX5689_Read(0x003E, &temp); // Read register 62 (0x3E)
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	0019      	movs	r1, r3
 8000856:	203e      	movs	r0, #62	@ 0x3e
 8000858:	f7ff fe22 	bl	80004a0 <AX5689_Read>
    
    RTT_printf("Status registers cleared.\r\n");
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <clearStatusRegisters+0x38>)
 800085e:	0019      	movs	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f004 f91f 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	08004ed0 	.word	0x08004ed0

08000874 <checkStatusRegister>:
/**
 * @brief  Check AX5689 status register for errors and handle power stage faults
 * @note   Based on official power stage fault handling documentation
 */
void checkStatusRegister(void) 
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    // AX568X 状态寄存器读出
    // Check if AX_STATUS pin is HIGH (fault condition)
    if (HAL_GPIO_ReadPin(AX_State_GPIO_Port, AX_State_Pin) == GPIO_PIN_SET) {
 800087a:	23a0      	movs	r3, #160	@ 0xa0
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2102      	movs	r1, #2
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f85b 	bl	800193c <HAL_GPIO_ReadPin>
 8000886:	0003      	movs	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	d000      	beq.n	800088e <checkStatusRegister+0x1a>
 800088c:	e081      	b.n	8000992 <checkStatusRegister+0x11e>
        RTT_printf("⚠ AX_STATUS pin HIGH - Fault detected!\r\n");
 800088e:	4b43      	ldr	r3, [pc, #268]	@ (800099c <checkStatusRegister+0x128>)
 8000890:	0019      	movs	r1, r3
 8000892:	2000      	movs	r0, #0
 8000894:	f004 f906 	bl	8004aa4 <SEGGER_RTT_printf>
        
        uint16_t reg60val, reg61val, reg62val;
        
        // 读出寄存器 60, 61, 62
        // Read status registers 60, 61, 62
        if (AX5689_Read(0x003C, &reg60val) == HAL_OK) { // Register 60 (0x3C)
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	0019      	movs	r1, r3
 800089c:	203c      	movs	r0, #60	@ 0x3c
 800089e:	f7ff fdff 	bl	80004a0 <AX5689_Read>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d107      	bne.n	80008b6 <checkStatusRegister+0x42>
            RTT_printf("Status Register 60: 0x%04X\r\n", reg60val);
 80008a6:	1dbb      	adds	r3, r7, #6
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	001a      	movs	r2, r3
 80008ac:	4b3c      	ldr	r3, [pc, #240]	@ (80009a0 <checkStatusRegister+0x12c>)
 80008ae:	0019      	movs	r1, r3
 80008b0:	2000      	movs	r0, #0
 80008b2:	f004 f8f7 	bl	8004aa4 <SEGGER_RTT_printf>
        }
        
        if (AX5689_Read(0x003D, &reg61val) == HAL_OK) { // Register 61 (0x3D)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	0019      	movs	r1, r3
 80008ba:	203d      	movs	r0, #61	@ 0x3d
 80008bc:	f7ff fdf0 	bl	80004a0 <AX5689_Read>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d107      	bne.n	80008d4 <checkStatusRegister+0x60>
            RTT_printf("Status Register 61: 0x%04X\r\n", reg61val);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b36      	ldr	r3, [pc, #216]	@ (80009a4 <checkStatusRegister+0x130>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	2000      	movs	r0, #0
 80008d0:	f004 f8e8 	bl	8004aa4 <SEGGER_RTT_printf>
        }
        
        if (AX5689_Read(0x003E, &reg62val) == HAL_OK) { // Register 62 (0x3E)
 80008d4:	1cbb      	adds	r3, r7, #2
 80008d6:	0019      	movs	r1, r3
 80008d8:	203e      	movs	r0, #62	@ 0x3e
 80008da:	f7ff fde1 	bl	80004a0 <AX5689_Read>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d157      	bne.n	8000992 <checkStatusRegister+0x11e>
            RTT_printf("Status Register 62: 0x%04X\r\n", reg62val);
 80008e2:	1cbb      	adds	r3, r7, #2
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	4b2f      	ldr	r3, [pc, #188]	@ (80009a8 <checkStatusRegister+0x134>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	2000      	movs	r0, #0
 80008ee:	f004 f8d9 	bl	8004aa4 <SEGGER_RTT_printf>
            
            // 检查 sys_fault 位 (bit 5) - Check sys_fault bit (bit 5)
            if ((reg62val & (1 << 5)) > 0) { 
 80008f2:	1cbb      	adds	r3, r7, #2
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	001a      	movs	r2, r3
 80008f8:	2320      	movs	r3, #32
 80008fa:	4013      	ands	r3, r2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dd41      	ble.n	8000984 <checkStatusRegister+0x110>
                RTT_printf("🔴 System fault (bit 5) detected in register 62!\r\n");
 8000900:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <checkStatusRegister+0x138>)
 8000902:	0019      	movs	r1, r3
 8000904:	2000      	movs	r0, #0
 8000906:	f004 f8cd 	bl	8004aa4 <SEGGER_RTT_printf>
                
                // 使 AX5688/AX5689 准备好重启
                // Prepare AX5688/AX5689 for restart
                StopControlLoop();
 800090a:	f7ff ff59 	bl	80007c0 <StopControlLoop>
                
                // 复位 PFAULT_N 掩码以清除 PSTART 锁存
                // Reset PFAULT_N mask to clear PSTART latch
                RTT_printf("Resetting PFAULT_N mask to clear PSTART latch...\r\n");
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <checkStatusRegister+0x13c>)
 8000910:	0019      	movs	r1, r3
 8000912:	2000      	movs	r0, #0
 8000914:	f004 f8c6 	bl	8004aa4 <SEGGER_RTT_printf>
                AX5689_Write(0x0038, REG56_RESET_VALUE); // Register 56 (0x38)
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <checkStatusRegister+0x140>)
 800091a:	0019      	movs	r1, r3
 800091c:	2038      	movs	r0, #56	@ 0x38
 800091e:	f7ff fe0f 	bl	8000540 <AX5689_Write>
                
                // 将 PFAULT_N 掩码设置回粘滞模式
                // Set PFAULT_N mask back to sticky mode
                RTT_printf("Setting PFAULT_N mask back to sticky mode...\r\n");
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <checkStatusRegister+0x144>)
 8000924:	0019      	movs	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f004 f8bc 	bl	8004aa4 <SEGGER_RTT_printf>
                AX5689_Write(0x0038, REG56_VALUE); // Register 56 (0x38)
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <checkStatusRegister+0x148>)
 800092e:	0019      	movs	r1, r3
 8000930:	2038      	movs	r0, #56	@ 0x38
 8000932:	f7ff fe05 	bl	8000540 <AX5689_Write>
                
                // 复位状态寄存器
                // Reset status registers
                clearStatusRegisters();
 8000936:	f7ff ff7f 	bl	8000838 <clearStatusRegisters>
                
                // 故障后等待功率级稳定
                // Wait for power stage to stabilize after fault
                RTT_printf("Waiting for power stage stabilization (100ms)...\r\n");
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <checkStatusRegister+0x14c>)
 800093c:	0019      	movs	r1, r3
 800093e:	2000      	movs	r0, #0
 8000940:	f004 f8b0 	bl	8004aa4 <SEGGER_RTT_printf>
                HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f000 fd9f 	bl	8001488 <HAL_Delay>
                
                // 重新检查故障位是否已清除
                // Check if sys_fault bit is now cleared
                if (HAL_GPIO_ReadPin(AX_State_GPIO_Port, AX_State_Pin) == GPIO_PIN_RESET) {
 800094a:	23a0      	movs	r3, #160	@ 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2102      	movs	r1, #2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fff3 	bl	800193c <HAL_GPIO_ReadPin>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d107      	bne.n	800096a <checkStatusRegister+0xf6>
                    RTT_printf("✅ Fault cleared. Restarting control loop...\r\n");
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <checkStatusRegister+0x150>)
 800095c:	0019      	movs	r1, r3
 800095e:	2000      	movs	r0, #0
 8000960:	f004 f8a0 	bl	8004aa4 <SEGGER_RTT_printf>
                    StartControlLoop(); // 启动控制环路以恢复播放
 8000964:	f7ff feb4 	bl	80006d0 <StartControlLoop>
                // Clear status registers for other non-critical status conditions
                clearStatusRegisters();
            }
        }
    }
}
 8000968:	e013      	b.n	8000992 <checkStatusRegister+0x11e>
                    RTT_printf("🔴 Fault persists. System halted for safety.\r\n");
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <checkStatusRegister+0x154>)
 800096c:	0019      	movs	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f004 f898 	bl	8004aa4 <SEGGER_RTT_printf>
                    HAL_GPIO_WritePin(LED_ON_OFF_GPIO_Port, LED_ON_OFF_Pin, GPIO_PIN_RESET);
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4814      	ldr	r0, [pc, #80]	@ (80009cc <checkStatusRegister+0x158>)
 800097a:	2200      	movs	r2, #0
 800097c:	0019      	movs	r1, r3
 800097e:	f000 fffa 	bl	8001976 <HAL_GPIO_WritePin>
}
 8000982:	e006      	b.n	8000992 <checkStatusRegister+0x11e>
                RTT_printf("⚠ AX_STATUS HIGH but sys_fault bit not set. Other status condition.\r\n");
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <checkStatusRegister+0x15c>)
 8000986:	0019      	movs	r1, r3
 8000988:	2000      	movs	r0, #0
 800098a:	f004 f88b 	bl	8004aa4 <SEGGER_RTT_printf>
                clearStatusRegisters();
 800098e:	f7ff ff53 	bl	8000838 <clearStatusRegisters>
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	08004eec 	.word	0x08004eec
 80009a0:	08004f18 	.word	0x08004f18
 80009a4:	08004f38 	.word	0x08004f38
 80009a8:	08004f58 	.word	0x08004f58
 80009ac:	08004f78 	.word	0x08004f78
 80009b0:	08004fb0 	.word	0x08004fb0
 80009b4:	00000434 	.word	0x00000434
 80009b8:	08004fe4 	.word	0x08004fe4
 80009bc:	00000c34 	.word	0x00000c34
 80009c0:	08005014 	.word	0x08005014
 80009c4:	08005048 	.word	0x08005048
 80009c8:	08005078 	.word	0x08005078
 80009cc:	50000800 	.word	0x50000800
 80009d0:	080050ac 	.word	0x080050ac

080009d4 <AX5689_SetConfigMode>:
/**
 * @brief  Set the current configuration mode
 * @param  mode: Target configuration mode
 */
void AX5689_SetConfigMode(AX5689_ConfigMode_t mode) 
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
    current_config_mode = mode;
 80009e0:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <AX5689_SetConfigMode+0x1c>)
 80009e2:	1dfa      	adds	r2, r7, #7
 80009e4:	7812      	ldrb	r2, [r2, #0]
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000002c 	.word	0x2000002c

080009f4 <AX5689_GetConfigMode>:
/**
 * @brief  Get the current configuration mode
 * @retval Current configuration mode
 */
AX5689_ConfigMode_t AX5689_GetConfigMode(void) 
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    return current_config_mode;
 80009f8:	4b02      	ldr	r3, [pc, #8]	@ (8000a04 <AX5689_GetConfigMode+0x10>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	2000002c 	.word	0x2000002c

08000a08 <AX5689_SwitchToOpenLoop>:

/**
 * @brief  Switch AX5689 to OpenLoop mode with proper stop/start sequence
 */
void AX5689_SwitchToOpenLoop(void) 
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
    RTT_printf("=== Switching to OpenLoop mode ===\r\n");
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <AX5689_SwitchToOpenLoop+0x84>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	2000      	movs	r0, #0
 8000a14:	f004 f846 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // Step 1: Stop current control loop properly
    StopControlLoop();
 8000a18:	f7ff fed2 	bl	80007c0 <StopControlLoop>
    
    // Step 2: Set new configuration mode
    AX5689_SetConfigMode(AX5689_OPENLOOP_MODE);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ffd9 	bl	80009d4 <AX5689_SetConfigMode>
    
    // Step 3: Write new register configuration
    AX5689_Setup();
 8000a22:	f7ff fe07 	bl	8000634 <AX5689_Setup>
    
    // Step 4: Start control loop with new configuration
    StartControlLoop();
 8000a26:	f7ff fe53 	bl	80006d0 <StartControlLoop>
    
    // Step 5: Verify mode switch by reading register 0x0003
    uint16_t reg03_value;
    if (AX5689_Read(0x0003, &reg03_value) == HAL_OK) {
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f7ff fd36 	bl	80004a0 <AX5689_Read>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d11f      	bne.n	8000a78 <AX5689_SwitchToOpenLoop+0x70>
        RTT_printf("Register 0x0003 = 0x%04X (expected 0x5500 for OpenLoop)\r\n", reg03_value);
 8000a38:	1dbb      	adds	r3, r7, #6
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <AX5689_SwitchToOpenLoop+0x88>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f004 f82e 	bl	8004aa4 <SEGGER_RTT_printf>
        if (reg03_value == 0x5500) {
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	881a      	ldrh	r2, [r3, #0]
 8000a4c:	23aa      	movs	r3, #170	@ 0xaa
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d10c      	bne.n	8000a6e <AX5689_SwitchToOpenLoop+0x66>
            HAL_GPIO_WritePin(LED_ON_OFF_GPIO_Port, LED_ON_OFF_Pin, GPIO_PIN_RESET);
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <AX5689_SwitchToOpenLoop+0x8c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	f000 ff8a 	bl	8001976 <HAL_GPIO_WritePin>
            RTT_printf("✓ OpenLoop mode confirmed!\r\n");
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <AX5689_SwitchToOpenLoop+0x90>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f004 f81c 	bl	8004aa4 <SEGGER_RTT_printf>
 8000a6c:	e004      	b.n	8000a78 <AX5689_SwitchToOpenLoop+0x70>
        } else {
            RTT_printf("⚠ OpenLoop mode verification failed!\r\n");
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <AX5689_SwitchToOpenLoop+0x94>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	2000      	movs	r0, #0
 8000a74:	f004 f816 	bl	8004aa4 <SEGGER_RTT_printf>
        }
    }
    
    RTT_printf("OpenLoop mode switch completed.\r\n\r\n");
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <AX5689_SwitchToOpenLoop+0x98>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f004 f811 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	080050f4 	.word	0x080050f4
 8000a90:	0800511c 	.word	0x0800511c
 8000a94:	50000800 	.word	0x50000800
 8000a98:	08005158 	.word	0x08005158
 8000a9c:	08005178 	.word	0x08005178
 8000aa0:	080051a4 	.word	0x080051a4

08000aa4 <AX5689_SwitchToCloseLoop>:

/**
 * @brief  Switch AX5689 to CloseLoop mode with proper stop/start sequence
 */
void AX5689_SwitchToCloseLoop(void) 
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
    RTT_printf("=== Switching to CloseLoop mode ===\r\n");
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <AX5689_SwitchToCloseLoop+0x80>)
 8000aac:	0019      	movs	r1, r3
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f003 fff8 	bl	8004aa4 <SEGGER_RTT_printf>
    
    // Step 1: Stop current control loop properly
    StopControlLoop();
 8000ab4:	f7ff fe84 	bl	80007c0 <StopControlLoop>
    
    // Step 2: Set new configuration mode
    AX5689_SetConfigMode(AX5689_CLOSELOOP_MODE);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff ff8b 	bl	80009d4 <AX5689_SetConfigMode>
    
    // Step 3: Write new register configuration
    AX5689_Setup();
 8000abe:	f7ff fdb9 	bl	8000634 <AX5689_Setup>
    
    // Step 4: Start control loop with new configuration
    StartControlLoop();
 8000ac2:	f7ff fe05 	bl	80006d0 <StartControlLoop>
    
    // Step 5: Verify mode switch by reading register 0x0003
    uint16_t reg03_value;
    if (AX5689_Read(0x0003, &reg03_value) == HAL_OK) {
 8000ac6:	1dbb      	adds	r3, r7, #6
 8000ac8:	0019      	movs	r1, r3
 8000aca:	2003      	movs	r0, #3
 8000acc:	f7ff fce8 	bl	80004a0 <AX5689_Read>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d11e      	bne.n	8000b12 <AX5689_SwitchToCloseLoop+0x6e>
        RTT_printf("Register 0x0003 = 0x%04X (expected 0x1155 for CloseLoop)\r\n", reg03_value);
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <AX5689_SwitchToCloseLoop+0x84>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f003 ffe0 	bl	8004aa4 <SEGGER_RTT_printf>
        if (reg03_value == 0x1155) {
 8000ae4:	1dbb      	adds	r3, r7, #6
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <AX5689_SwitchToCloseLoop+0x88>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10c      	bne.n	8000b08 <AX5689_SwitchToCloseLoop+0x64>
            HAL_GPIO_WritePin(LED_ON_OFF_GPIO_Port, LED_ON_OFF_Pin, GPIO_PIN_SET);
 8000aee:	2380      	movs	r3, #128	@ 0x80
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <AX5689_SwitchToCloseLoop+0x8c>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	0019      	movs	r1, r3
 8000af8:	f000 ff3d 	bl	8001976 <HAL_GPIO_WritePin>
            RTT_printf("✓ CloseLoop mode confirmed!\r\n");
 8000afc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <AX5689_SwitchToCloseLoop+0x90>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f003 ffcf 	bl	8004aa4 <SEGGER_RTT_printf>
 8000b06:	e004      	b.n	8000b12 <AX5689_SwitchToCloseLoop+0x6e>
        } else {
            RTT_printf("⚠ CloseLoop mode verification failed!\r\n");
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <AX5689_SwitchToCloseLoop+0x94>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f003 ffc9 	bl	8004aa4 <SEGGER_RTT_printf>
        }
    }
    
    RTT_printf("CloseLoop mode switch completed.\r\n\r\n");
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <AX5689_SwitchToCloseLoop+0x98>)
 8000b14:	0019      	movs	r1, r3
 8000b16:	2000      	movs	r0, #0
 8000b18:	f003 ffc4 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	080051c8 	.word	0x080051c8
 8000b28:	080051f0 	.word	0x080051f0
 8000b2c:	00001155 	.word	0x00001155
 8000b30:	50000800 	.word	0x50000800
 8000b34:	0800522c 	.word	0x0800522c
 8000b38:	0800524c 	.word	0x0800524c
 8000b3c:	08005278 	.word	0x08005278

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 fc1a 	bl	800137c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f82a 	bl	8000ba0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 f94c 	bl	8000de8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b50:	f000 f87e 	bl	8000c50 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000b54:	f000 f8bc 	bl	8000cd0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000b58:	f000 f8f8 	bl	8000d4c <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  
  // Initialize AX5689 and RTT debug system
  AX5689_InitialSetup();
 8000b5c:	f000 f9f4 	bl	8000f48 <AX5689_InitialSetup>
  
  // Initialize GPIO mode switching
  GPIO_ModeSwitch_Init();
 8000b60:	f000 fa0e 	bl	8000f80 <GPIO_ModeSwitch_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  SEGGER_RTT_WriteString(0, "=== AX5689 GPIO Mode Switching System Started ===\r\n");
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <main+0x54>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f003 fbf5 	bl	8004358 <SEGGER_RTT_WriteString>
  SEGGER_RTT_WriteString(0, "Mode_Select Pin (PC9): LOW pulse = switch mode\r\n");
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <main+0x58>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	f003 fbf0 	bl	8004358 <SEGGER_RTT_WriteString>
  SEGGER_RTT_WriteString(0, "System ready for operation.\r\n\r\n");
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <main+0x5c>)
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f003 fbeb 	bl	8004358 <SEGGER_RTT_WriteString>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    // Check AX5689 status register
    checkStatusRegister();
 8000b82:	f7ff fe77 	bl	8000874 <checkStatusRegister>
    
    // Process GPIO mode switching
    GPIO_ModeSwitch_Process();
 8000b86:	f000 fa17 	bl	8000fb8 <GPIO_ModeSwitch_Process>
    
    // Main loop delay
    HAL_Delay(MAIN_LOOP_DELAY_MS);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f000 fc7c 	bl	8001488 <HAL_Delay>
    checkStatusRegister();
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	e7f6      	b.n	8000b82 <main+0x42>
 8000b94:	080052a0 	.word	0x080052a0
 8000b98:	080052d4 	.word	0x080052d4
 8000b9c:	08005308 	.word	0x08005308

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b093      	sub	sp, #76	@ 0x4c
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	2410      	movs	r4, #16
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	0018      	movs	r0, r3
 8000bac:	2338      	movs	r3, #56	@ 0x38
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 ff90 	bl	8004ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2310      	movs	r3, #16
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 ff89 	bl	8004ad6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fd35 	bl	8002638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	0252      	lsls	r2, r2, #9
 8000bda:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	0021      	movs	r1, r4
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2202      	movs	r2, #2
 8000be2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2203      	movs	r2, #3
 8000be8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	0292      	lsls	r2, r2, #10
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2280      	movs	r2, #128	@ 0x80
 8000c02:	0492      	lsls	r2, r2, #18
 8000c04:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2280      	movs	r2, #128	@ 0x80
 8000c0a:	0592      	lsls	r2, r2, #22
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fd5d 	bl	80026d0 <HAL_RCC_OscConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c1a:	f000 fa29 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2202      	movs	r2, #2
 8000c28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c30:	003b      	movs	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c36:	003b      	movs	r3, r7
 8000c38:	2102      	movs	r1, #2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f002 f862 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c44:	f000 fa14 	bl	8001070 <Error_Handler>
  }
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b013      	add	sp, #76	@ 0x4c
 8000c4e:	bd90      	pop	{r4, r7, pc}

08000c50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <MX_I2C2_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <MX_I2C2_Init+0x7c>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c60:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fe8f 	bl	80019b0 <HAL_I2C_Init>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c96:	f000 f9eb 	bl	8001070 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 fc32 	bl	8002508 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 f9e2 	bl	8001070 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <MX_I2C2_Init+0x74>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fc75 	bl	80025a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 f9d9 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000030 	.word	0x20000030
 8000cc8:	40005800 	.word	0x40005800
 8000ccc:	00503d58 	.word	0x00503d58

08000cd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <MX_SPI2_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cdc:	2282      	movs	r2, #130	@ 0x82
 8000cde:	0052      	lsls	r2, r2, #1
 8000ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cea:	22c0      	movs	r2, #192	@ 0xc0
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	02d2      	lsls	r2, r2, #11
 8000d02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d2e:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <MX_SPI2_Init+0x74>)
 8000d30:	0018      	movs	r0, r3
 8000d32:	f002 fb19 	bl	8003368 <HAL_SPI_Init>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 f999 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000084 	.word	0x20000084
 8000d48:	40003800 	.word	0x40003800

08000d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d50:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d52:	4a24      	ldr	r2, [pc, #144]	@ (8000de4 <MX_USART1_UART_Init+0x98>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d56:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d58:	22e1      	movs	r2, #225	@ 0xe1
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 fb9e 	bl	80034d8 <HAL_UART_Init>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f966 	bl	8001070 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 f83b 	bl	8003e24 <HAL_UARTEx_SetTxFifoThreshold>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 f95d 	bl	8001070 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f003 f872 	bl	8003ea4 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 f954 	bl	8001070 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <MX_USART1_UART_Init+0x94>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fff0 	bl	8003db0 <HAL_UARTEx_DisableFifoMode>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f94c 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	200000e8 	.word	0x200000e8
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	@ 0x2c
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	2414      	movs	r4, #20
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f003 fe6c 	bl	8004ad6 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e02:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e04:	2104      	movs	r1, #4
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e1a:	4b48      	ldr	r3, [pc, #288]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e26:	2220      	movs	r2, #32
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e32:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <MX_GPIO_Init+0x154>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000e5e:	4938      	ldr	r1, [pc, #224]	@ (8000f40 <MX_GPIO_Init+0x158>)
 8000e60:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fd86 	bl	8001976 <HAL_GPIO_WritePin>
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AX_Reset_N_Pin|AX_State_Pin|PVDD_EN_Pin|LED_Display_CS_Pin
 8000e6a:	2398      	movs	r3, #152	@ 0x98
 8000e6c:	33ff      	adds	r3, #255	@ 0xff
 8000e6e:	0019      	movs	r1, r3
 8000e70:	23a0      	movs	r3, #160	@ 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2200      	movs	r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fd7d 	bl	8001976 <HAL_GPIO_WritePin>
                          |LED_Display_Data_Pin|MCU_Pstart_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D1V2_EN_Pin AX_3V3_Pin AX_5V_Pin D5V2_EN_Pin
                           AX_Mute_N_Pin LED_ON_OFF_Pin */
  GPIO_InitStruct.Pin = D1V2_EN_Pin|AX_3V3_Pin|AX_5V_Pin|D5V2_EN_Pin
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	4a30      	ldr	r2, [pc, #192]	@ (8000f40 <MX_GPIO_Init+0x158>)
 8000e80:	601a      	str	r2, [r3, #0]
                          |AX_Mute_N_Pin|LED_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2201      	movs	r2, #1
 8000e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000e98:	0019      	movs	r1, r3
 8000e9a:	0010      	movs	r0, r2
 8000e9c:	f000 fbe2 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : AX_Reset_N_Pin AX_State_Pin */
  GPIO_InitStruct.Pin = AX_Reset_N_Pin|AX_State_Pin;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2211      	movs	r2, #17
 8000eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	193a      	adds	r2, r7, r4
 8000eba:	23a0      	movs	r3, #160	@ 0xa0
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 fbcf 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PVDD_EN_Pin LED_Display_CS_Pin LED_Display_Data_Pin MCU_Pstart_Pin */
  GPIO_InitStruct.Pin = PVDD_EN_Pin|LED_Display_CS_Pin|LED_Display_Data_Pin|MCU_Pstart_Pin;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	22ca      	movs	r2, #202	@ 0xca
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	193b      	adds	r3, r7, r4
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	193a      	adds	r2, r7, r4
 8000ee6:	23a0      	movs	r3, #160	@ 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f000 fbb9 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Display_CLK_Pin */
  GPIO_InitStruct.Pin = LED_Display_CLK_Pin;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LED_Display_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f04:	193a      	adds	r2, r7, r4
 8000f06:	23a0      	movs	r3, #160	@ 0xa0
 8000f08:	05db      	lsls	r3, r3, #23
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 fba9 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Select_Pin */
  GPIO_InitStruct.Pin = Mode_Select_Pin;
 8000f12:	0021      	movs	r1, r4
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Mode_Select_GPIO_Port, &GPIO_InitStruct);
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <MX_GPIO_Init+0x15c>)
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	0010      	movs	r0, r2
 8000f30:	f000 fb98 	bl	8001664 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b00b      	add	sp, #44	@ 0x2c
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00007901 	.word	0x00007901
 8000f44:	50000800 	.word	0x50000800

08000f48 <AX5689_InitialSetup>:
  * @brief  Initialize AX5689 amplifier with initial configuration
  * @param  None
  * @retval None
  */
static void AX5689_InitialSetup(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  // Initialize AX5689 related I/O and RTT
  IO_Init();
 8000f4c:	f7ff fa56 	bl	80003fc <IO_Init>
  // Set initial configuration mode
#if USE_CLOSELOOP_MODE
  AX5689_SetConfigMode(AX5689_CLOSELOOP_MODE);
  SEGGER_RTT_WriteString(0, "Initial mode: CloseLoop\r\n");
#else
  AX5689_SetConfigMode(AX5689_OPENLOOP_MODE);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fd3f 	bl	80009d4 <AX5689_SetConfigMode>
  SEGGER_RTT_WriteString(0, "Initial mode: OpenLoop\r\n");
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <AX5689_InitialSetup+0x30>)
 8000f58:	0019      	movs	r1, r3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f003 f9fc 	bl	8004358 <SEGGER_RTT_WriteString>
#endif
  
  // Setup and start AX5689
  AX5689_Setup();
 8000f60:	f7ff fb68 	bl	8000634 <AX5689_Setup>
  StartControlLoop();
 8000f64:	f7ff fbb4 	bl	80006d0 <StartControlLoop>
  
  RTT_printf("AX5689 initialization completed.\r\n");
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <AX5689_InitialSetup+0x34>)
 8000f6a:	0019      	movs	r1, r3
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f003 fd99 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08005328 	.word	0x08005328
 8000f7c:	08005344 	.word	0x08005344

08000f80 <GPIO_ModeSwitch_Init>:
  * @brief  Initialize GPIO mode switching variables and state
  * @param  None
  * @retval None
  */
static void GPIO_ModeSwitch_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  // Initialize GPIO state variables
  mode_pin_prev_state = GPIO_PIN_SET;  // External pull-up, initial state is HIGH
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <GPIO_ModeSwitch_Init+0x28>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
  mode_pin_current_state = GPIO_PIN_SET;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <GPIO_ModeSwitch_Init+0x2c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  mode_switch_debounce_counter = 0;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <GPIO_ModeSwitch_Init+0x30>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
  
  RTT_printf("GPIO mode switching initialized.\r\n");
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <GPIO_ModeSwitch_Init+0x34>)
 8000f98:	0019      	movs	r1, r3
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f003 fd82 	bl	8004aa4 <SEGGER_RTT_printf>
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	2000017c 	.word	0x2000017c
 8000fb0:	20000180 	.word	0x20000180
 8000fb4:	08005368 	.word	0x08005368

08000fb8 <GPIO_ModeSwitch_Process>:
  * @brief  Process GPIO mode switching logic with debouncing
  * @param  None
  * @retval None
  */
static void GPIO_ModeSwitch_Process(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  // Read current GPIO state
  mode_pin_current_state = HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin);
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4a24      	ldr	r2, [pc, #144]	@ (8001054 <GPIO_ModeSwitch_Process+0x9c>)
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	0010      	movs	r0, r2
 8000fc6:	f000 fcb9 	bl	800193c <HAL_GPIO_ReadPin>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <GPIO_ModeSwitch_Process+0xa0>)
 8000fd0:	701a      	strb	r2, [r3, #0]
  
  // Detect falling edge (HIGH to LOW transition)
  if (mode_pin_prev_state == GPIO_PIN_SET && mode_pin_current_state == GPIO_PIN_RESET) {
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <GPIO_ModeSwitch_Process+0xa4>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10b      	bne.n	8000ff2 <GPIO_ModeSwitch_Process+0x3a>
 8000fda:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <GPIO_ModeSwitch_Process+0xa0>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d107      	bne.n	8000ff2 <GPIO_ModeSwitch_Process+0x3a>
    mode_switch_debounce_counter = DEBOUNCE_TIME_MS;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <GPIO_ModeSwitch_Process+0xa8>)
 8000fe4:	220a      	movs	r2, #10
 8000fe6:	601a      	str	r2, [r3, #0]
    RTT_printf("Mode switch signal detected, debouncing...\r\n");
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8001064 <GPIO_ModeSwitch_Process+0xac>)
 8000fea:	0019      	movs	r1, r3
 8000fec:	2000      	movs	r0, #0
 8000fee:	f003 fd59 	bl	8004aa4 <SEGGER_RTT_printf>
  }
  
  // Debounce processing
  if (mode_switch_debounce_counter > 0) {
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <GPIO_ModeSwitch_Process+0xa8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d024      	beq.n	8001044 <GPIO_ModeSwitch_Process+0x8c>
    mode_switch_debounce_counter--;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <GPIO_ModeSwitch_Process+0xa8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <GPIO_ModeSwitch_Process+0xa8>)
 8001002:	601a      	str	r2, [r3, #0]
    
    if (mode_switch_debounce_counter == 0) {
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <GPIO_ModeSwitch_Process+0xa8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <GPIO_ModeSwitch_Process+0x8c>
      // Confirm signal is stable, execute mode switch
      if (HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin) == GPIO_PIN_RESET) {
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <GPIO_ModeSwitch_Process+0x9c>)
 8001012:	0019      	movs	r1, r3
 8001014:	0010      	movs	r0, r2
 8001016:	f000 fc91 	bl	800193c <HAL_GPIO_ReadPin>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d112      	bne.n	8001044 <GPIO_ModeSwitch_Process+0x8c>
        RTT_printf("Confirmed mode switch request!\r\n");
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <GPIO_ModeSwitch_Process+0xb0>)
 8001020:	0019      	movs	r1, r3
 8001022:	2000      	movs	r0, #0
 8001024:	f003 fd3e 	bl	8004aa4 <SEGGER_RTT_printf>
        
        // Execute mode switching
        if (AX5689_GetConfigMode() == AX5689_OPENLOOP_MODE) {
 8001028:	f7ff fce4 	bl	80009f4 <AX5689_GetConfigMode>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d102      	bne.n	8001036 <GPIO_ModeSwitch_Process+0x7e>
          AX5689_SwitchToCloseLoop();
 8001030:	f7ff fd38 	bl	8000aa4 <AX5689_SwitchToCloseLoop>
 8001034:	e001      	b.n	800103a <GPIO_ModeSwitch_Process+0x82>
        } else {
          AX5689_SwitchToOpenLoop();
 8001036:	f7ff fce7 	bl	8000a08 <AX5689_SwitchToOpenLoop>
        }
        
        RTT_printf("Mode switched successfully!\r\n");
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <GPIO_ModeSwitch_Process+0xb4>)
 800103c:	0019      	movs	r1, r3
 800103e:	2000      	movs	r0, #0
 8001040:	f003 fd30 	bl	8004aa4 <SEGGER_RTT_printf>
      }
    }
  }
  
  // Update previous state
  mode_pin_prev_state = mode_pin_current_state;
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <GPIO_ModeSwitch_Process+0xa0>)
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <GPIO_ModeSwitch_Process+0xa4>)
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	50000800 	.word	0x50000800
 8001058:	2000017c 	.word	0x2000017c
 800105c:	20000000 	.word	0x20000000
 8001060:	20000180 	.word	0x20000180
 8001064:	0800538c 	.word	0x0800538c
 8001068:	080053bc 	.word	0x080053bc
 800106c:	080053e0 	.word	0x080053e0

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	e7fd      	b.n	8001078 <Error_Handler+0x8>

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_MspInit+0x4c>)
 8001084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <HAL_MspInit+0x4c>)
 8001088:	2101      	movs	r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	2201      	movs	r2, #1
 8001094:	4013      	ands	r3, r2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_MspInit+0x4c>)
 800109c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x4c>)
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	0549      	lsls	r1, r1, #21
 80010a4:	430a      	orrs	r2, r1
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <HAL_MspInit+0x4c>)
 80010aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	4013      	ands	r3, r2
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80010b6:	23c0      	movs	r3, #192	@ 0xc0
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fa08 	bl	80014d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b095      	sub	sp, #84	@ 0x54
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	233c      	movs	r3, #60	@ 0x3c
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	0018      	movs	r0, r3
 80010da:	2314      	movs	r3, #20
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f003 fcf9 	bl	8004ad6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	2410      	movs	r4, #16
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0018      	movs	r0, r3
 80010ea:	232c      	movs	r3, #44	@ 0x2c
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f003 fcf1 	bl	8004ad6 <memset>
  if(hi2c->Instance==I2C2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a22      	ldr	r2, [pc, #136]	@ (8001184 <HAL_I2C_MspInit+0xb8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d13d      	bne.n	800117a <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2240      	movs	r2, #64	@ 0x40
 8001102:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	193b      	adds	r3, r7, r4
 800110c:	0018      	movs	r0, r3
 800110e:	f001 ffa3 	bl	8003058 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001116:	f7ff ffab 	bl	8001070 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 800111c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 8001120:	2102      	movs	r1, #2
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	@ 0x34
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB3     ------> I2C2_SCL
    PB4     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001132:	213c      	movs	r1, #60	@ 0x3c
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2218      	movs	r2, #24
 8001138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2212      	movs	r2, #18
 800113e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2208      	movs	r2, #8
 8001150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	187b      	adds	r3, r7, r1
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <HAL_I2C_MspInit+0xc0>)
 8001156:	0019      	movs	r1, r3
 8001158:	0010      	movs	r0, r2
 800115a:	f000 fa83 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 8001160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	03c9      	lsls	r1, r1, #15
 8001168:	430a      	orrs	r2, r1
 800116a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_I2C_MspInit+0xbc>)
 800116e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	03db      	lsls	r3, r3, #15
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b015      	add	sp, #84	@ 0x54
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	40005800 	.word	0x40005800
 8001188:	40021000 	.word	0x40021000
 800118c:	50000400 	.word	0x50000400

08001190 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	@ 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	2414      	movs	r4, #20
 800119a:	193b      	adds	r3, r7, r4
 800119c:	0018      	movs	r0, r3
 800119e:	2314      	movs	r3, #20
 80011a0:	001a      	movs	r2, r3
 80011a2:	2100      	movs	r1, #0
 80011a4:	f003 fc97 	bl	8004ad6 <memset>
  if(hspi->Instance==SPI2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <HAL_SPI_MspInit+0x8c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d130      	bne.n	8001214 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	01c9      	lsls	r1, r1, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	01db      	lsls	r3, r3, #7
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011d4:	2102      	movs	r1, #2
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_SPI_MspInit+0x90>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	22f0      	movs	r2, #240	@ 0xf0
 80011ea:	0212      	lsls	r2, r2, #8
 80011ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	0021      	movs	r1, r4
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2202      	movs	r2, #2
 80011f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	187b      	adds	r3, r7, r1
 800120a:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_SPI_MspInit+0x94>)
 800120c:	0019      	movs	r1, r3
 800120e:	0010      	movs	r0, r2
 8001210:	f000 fa28 	bl	8001664 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b00b      	add	sp, #44	@ 0x2c
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	40003800 	.word	0x40003800
 8001220:	40021000 	.word	0x40021000
 8001224:	50000400 	.word	0x50000400

08001228 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b095      	sub	sp, #84	@ 0x54
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	233c      	movs	r3, #60	@ 0x3c
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f003 fc4b 	bl	8004ad6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	2410      	movs	r4, #16
 8001242:	193b      	adds	r3, r7, r4
 8001244:	0018      	movs	r0, r3
 8001246:	232c      	movs	r3, #44	@ 0x2c
 8001248:	001a      	movs	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	f003 fc43 	bl	8004ad6 <memset>
  if(huart->Instance==USART1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <HAL_UART_MspInit+0xbc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d13f      	bne.n	80012da <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001266:	193b      	adds	r3, r7, r4
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fef5 	bl	8003058 <HAL_RCCEx_PeriphCLKConfig>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001272:	f7ff fefd 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 8001278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	01c9      	lsls	r1, r1, #7
 8001280:	430a      	orrs	r2, r1
 8001282:	641a      	str	r2, [r3, #64]	@ 0x40
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 8001286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	01db      	lsls	r3, r3, #7
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	@ 0x34
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_UART_MspInit+0xc0>)
 80012a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a2:	2201      	movs	r2, #1
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012aa:	213c      	movs	r1, #60	@ 0x3c
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	22c0      	movs	r2, #192	@ 0xc0
 80012b0:	00d2      	lsls	r2, r2, #3
 80012b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2202      	movs	r2, #2
 80012b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2201      	movs	r2, #1
 80012ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	187a      	adds	r2, r7, r1
 80012ce:	23a0      	movs	r3, #160	@ 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	0011      	movs	r1, r2
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 f9c5 	bl	8001664 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b015      	add	sp, #84	@ 0x54
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f89c 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff fff7 	bl	800131e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001356:	f003 fbc7 	bl	8004ae8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800135a:	f7ff fbf1 	bl	8000b40 <main>

0800135e <LoopForever>:

LoopForever:
  b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   r0, =_estack
 8001360:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800136c:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 8001370:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001374:	20000640 	.word	0x20000640

08001378 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_IRQHandler>
	...

0800137c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_Init+0x3c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_Init+0x3c>)
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	0049      	lsls	r1, r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001396:	2003      	movs	r0, #3
 8001398:	f000 f810 	bl	80013bc <HAL_InitTick>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d003      	beq.n	80013a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	e001      	b.n	80013ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fe68 	bl	800107c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40022000 	.word	0x40022000

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	230f      	movs	r3, #15
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <HAL_InitTick+0x88>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d02b      	beq.n	800142c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <HAL_InitTick+0x8c>)
 80013d6:	681c      	ldr	r4, [r3, #0]
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <HAL_InitTick+0x88>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	0019      	movs	r1, r3
 80013de:	23fa      	movs	r3, #250	@ 0xfa
 80013e0:	0098      	lsls	r0, r3, #2
 80013e2:	f7fe fe95 	bl	8000110 <__udivsi3>
 80013e6:	0003      	movs	r3, r0
 80013e8:	0019      	movs	r1, r3
 80013ea:	0020      	movs	r0, r4
 80013ec:	f7fe fe90 	bl	8000110 <__udivsi3>
 80013f0:	0003      	movs	r3, r0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f929 	bl	800164a <HAL_SYSTICK_Config>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d112      	bne.n	8001422 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d80a      	bhi.n	8001418 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	2301      	movs	r3, #1
 8001406:	425b      	negs	r3, r3
 8001408:	2200      	movs	r2, #0
 800140a:	0018      	movs	r0, r3
 800140c:	f000 f908 	bl	8001620 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_InitTick+0x90>)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e00d      	b.n	8001434 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e008      	b.n	8001434 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e003      	b.n	8001434 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b005      	add	sp, #20
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	2000000c 	.word	0x2000000c
 8001448:	20000004 	.word	0x20000004
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	18d2      	adds	r2, r2, r3
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <HAL_IncTick+0x20>)
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000184 	.word	0x20000184

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	@ (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	20000184 	.word	0x20000184

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fff0 	bl	8001474 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	001a      	movs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	f7ff ffe0 	bl	8001474 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b004      	add	sp, #16
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	2000000c 	.word	0x2000000c

080014d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a06      	ldr	r2, [pc, #24]	@ (80014f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	40010000 	.word	0x40010000
 80014f8:	fffff9ff 	.word	0xfffff9ff

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001510:	d828      	bhi.n	8001564 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001512:	4a2f      	ldr	r2, [pc, #188]	@ (80015d0 <__NVIC_SetPriority+0xd4>)
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	33c0      	adds	r3, #192	@ 0xc0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	589b      	ldr	r3, [r3, r2]
 8001522:	1dfa      	adds	r2, r7, #7
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	0011      	movs	r1, r2
 8001528:	2203      	movs	r2, #3
 800152a:	400a      	ands	r2, r1
 800152c:	00d2      	lsls	r2, r2, #3
 800152e:	21ff      	movs	r1, #255	@ 0xff
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	43d2      	mvns	r2, r2
 8001536:	401a      	ands	r2, r3
 8001538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	22ff      	movs	r2, #255	@ 0xff
 8001540:	401a      	ands	r2, r3
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	0018      	movs	r0, r3
 8001548:	2303      	movs	r3, #3
 800154a:	4003      	ands	r3, r0
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001550:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <__NVIC_SetPriority+0xd4>)
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	430a      	orrs	r2, r1
 800155c:	33c0      	adds	r3, #192	@ 0xc0
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001562:	e031      	b.n	80015c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <__NVIC_SetPriority+0xd8>)
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0019      	movs	r1, r3
 800156c:	230f      	movs	r3, #15
 800156e:	400b      	ands	r3, r1
 8001570:	3b08      	subs	r3, #8
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3306      	adds	r3, #6
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1dfa      	adds	r2, r7, #7
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	0011      	movs	r1, r2
 8001584:	2203      	movs	r2, #3
 8001586:	400a      	ands	r2, r1
 8001588:	00d2      	lsls	r2, r2, #3
 800158a:	21ff      	movs	r1, #255	@ 0xff
 800158c:	4091      	lsls	r1, r2
 800158e:	000a      	movs	r2, r1
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	22ff      	movs	r2, #255	@ 0xff
 800159c:	401a      	ands	r2, r3
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	0018      	movs	r0, r3
 80015a4:	2303      	movs	r3, #3
 80015a6:	4003      	ands	r3, r0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ac:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <__NVIC_SetPriority+0xd8>)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	001c      	movs	r4, r3
 80015b4:	230f      	movs	r3, #15
 80015b6:	4023      	ands	r3, r4
 80015b8:	3b08      	subs	r3, #8
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	430a      	orrs	r2, r1
 80015be:	3306      	adds	r3, #6
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	18c3      	adds	r3, r0, r3
 80015c4:	3304      	adds	r3, #4
 80015c6:	601a      	str	r2, [r3, #0]
}
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b003      	add	sp, #12
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	045b      	lsls	r3, r3, #17
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d301      	bcc.n	80015f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ec:	2301      	movs	r3, #1
 80015ee:	e010      	b.n	8001612 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <SysTick_Config+0x44>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3a01      	subs	r2, #1
 80015f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f8:	2301      	movs	r3, #1
 80015fa:	425b      	negs	r3, r3
 80015fc:	2103      	movs	r1, #3
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ff7c 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x44>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x44>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	210f      	movs	r1, #15
 800162c:	187b      	adds	r3, r7, r1
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	187b      	adds	r3, r7, r1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b004      	add	sp, #16
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ffbf 	bl	80015d8 <SysTick_Config>
 800165a:	0003      	movs	r3, r0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e14d      	b.n	8001910 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <HAL_GPIO_Init+0x28>
 800168a:	e13e      	b.n	800190a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	4013      	ands	r3, r2
 8001694:	2b01      	cmp	r3, #1
 8001696:	d005      	beq.n	80016a4 <HAL_GPIO_Init+0x40>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	4013      	ands	r3, r2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d130      	bne.n	8001706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	43da      	mvns	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0013      	movs	r3, r2
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016da:	2201      	movs	r2, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	091b      	lsrs	r3, r3, #4
 80016f0:	2201      	movs	r2, #1
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	4013      	ands	r3, r2
 800170e:	2b03      	cmp	r3, #3
 8001710:	d017      	beq.n	8001742 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	43da      	mvns	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d123      	bne.n	8001796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	58d3      	ldr	r3, [r2, r3]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2207      	movs	r2, #7
 8001760:	4013      	ands	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2107      	movs	r1, #7
 800177a:	400b      	ands	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	2203      	movs	r2, #3
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	401a      	ands	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	23c0      	movs	r3, #192	@ 0xc0
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d100      	bne.n	80017d8 <HAL_GPIO_Init+0x174>
 80017d6:	e098      	b.n	800190a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017d8:	4a53      	ldr	r2, [pc, #332]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3318      	adds	r3, #24
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	589b      	ldr	r3, [r3, r2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2203      	movs	r2, #3
 80017ea:	4013      	ands	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	220f      	movs	r2, #15
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	23a0      	movs	r3, #160	@ 0xa0
 8001800:	05db      	lsls	r3, r3, #23
 8001802:	429a      	cmp	r2, r3
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x1d6>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a48      	ldr	r2, [pc, #288]	@ (800192c <HAL_GPIO_Init+0x2c8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1d2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a47      	ldr	r2, [pc, #284]	@ (8001930 <HAL_GPIO_Init+0x2cc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1ce>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a46      	ldr	r2, [pc, #280]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1ca>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a45      	ldr	r2, [pc, #276]	@ (8001938 <HAL_GPIO_Init+0x2d4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1c6>
 8001826:	2304      	movs	r3, #4
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x1d8>
 800182a:	2305      	movs	r3, #5
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x1d8>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x1d8>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x1d8>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x1d8>
 800183a:	2300      	movs	r3, #0
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	2103      	movs	r1, #3
 8001840:	400a      	ands	r2, r1
 8001842:	00d2      	lsls	r2, r2, #3
 8001844:	4093      	lsls	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800184c:	4936      	ldr	r1, [pc, #216]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3318      	adds	r3, #24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	035b      	lsls	r3, r3, #13
 8001872:	4013      	ands	r3, r2
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800187e:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001884:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43da      	mvns	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	039b      	lsls	r3, r3, #14
 800189c:	4013      	ands	r3, r2
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 80018b0:	2384      	movs	r3, #132	@ 0x84
 80018b2:	58d3      	ldr	r3, [r2, r3]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43da      	mvns	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d4:	4914      	ldr	r1, [pc, #80]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 80018d6:	2284      	movs	r2, #132	@ 0x84
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018dc:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	58d3      	ldr	r3, [r2, r3]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43da      	mvns	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	025b      	lsls	r3, r3, #9
 80018f6:	4013      	ands	r3, r2
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001902:	4909      	ldr	r1, [pc, #36]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	40da      	lsrs	r2, r3
 8001918:	1e13      	subs	r3, r2, #0
 800191a:	d000      	beq.n	800191e <HAL_GPIO_Init+0x2ba>
 800191c:	e6aa      	b.n	8001674 <HAL_GPIO_Init+0x10>
  }
}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	46c0      	nop			@ (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	b006      	add	sp, #24
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021800 	.word	0x40021800
 800192c:	50000400 	.word	0x50000400
 8001930:	50000800 	.word	0x50000800
 8001934:	50000c00 	.word	0x50000c00
 8001938:	50001000 	.word	0x50001000

0800193c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	000a      	movs	r2, r1
 8001946:	1cbb      	adds	r3, r7, #2
 8001948:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	1cba      	adds	r2, r7, #2
 8001950:	8812      	ldrh	r2, [r2, #0]
 8001952:	4013      	ands	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001956:	230f      	movs	r3, #15
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e003      	b.n	8001968 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001968:	230f      	movs	r3, #15
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	781b      	ldrb	r3, [r3, #0]
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	0008      	movs	r0, r1
 8001980:	0011      	movs	r1, r2
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	1c02      	adds	r2, r0, #0
 8001986:	801a      	strh	r2, [r3, #0]
 8001988:	1c7b      	adds	r3, r7, #1
 800198a:	1c0a      	adds	r2, r1, #0
 800198c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198e:	1c7b      	adds	r3, r7, #1
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	1cbb      	adds	r3, r7, #2
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199e:	e003      	b.n	80019a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a0:	1cbb      	adds	r3, r7, #2
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e08f      	b.n	8001ae2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	@ 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fb77 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2241      	movs	r2, #65	@ 0x41
 80019e2:	2124      	movs	r1, #36	@ 0x24
 80019e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	438a      	bics	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	493b      	ldr	r1, [pc, #236]	@ (8001aec <HAL_I2C_Init+0x13c>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4938      	ldr	r1, [pc, #224]	@ (8001af0 <HAL_I2C_Init+0x140>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2180      	movs	r1, #128	@ 0x80
 8001a26:	0209      	lsls	r1, r1, #8
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e007      	b.n	8001a3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2184      	movs	r1, #132	@ 0x84
 8001a38:	0209      	lsls	r1, r1, #8
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d109      	bne.n	8001a5a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	@ 0x80
 8001a52:	0109      	lsls	r1, r1, #4
 8001a54:	430a      	orrs	r2, r1
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	e007      	b.n	8001a6a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4923      	ldr	r1, [pc, #140]	@ (8001af4 <HAL_I2C_Init+0x144>)
 8001a66:	400a      	ands	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4920      	ldr	r1, [pc, #128]	@ (8001af8 <HAL_I2C_Init+0x148>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	491a      	ldr	r1, [pc, #104]	@ (8001af0 <HAL_I2C_Init+0x140>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69d9      	ldr	r1, [r3, #28]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2241      	movs	r2, #65	@ 0x41
 8001ace:	2120      	movs	r1, #32
 8001ad0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2242      	movs	r2, #66	@ 0x42
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	f0ffffff 	.word	0xf0ffffff
 8001af0:	ffff7fff 	.word	0xffff7fff
 8001af4:	fffff7ff 	.word	0xfffff7ff
 8001af8:	02008000 	.word	0x02008000

08001afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	0008      	movs	r0, r1
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	0019      	movs	r1, r3
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	1c02      	adds	r2, r0, #0
 8001b10:	801a      	strh	r2, [r3, #0]
 8001b12:	2308      	movs	r3, #8
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	1c0a      	adds	r2, r1, #0
 8001b18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2241      	movs	r2, #65	@ 0x41
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d000      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x2c>
 8001b26:	e10a      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	5c9b      	ldrb	r3, [r3, r2]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Master_Transmit+0x3a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e104      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2240      	movs	r2, #64	@ 0x40
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fc99 	bl	8001474 <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	0219      	lsls	r1, r3, #8
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2319      	movs	r3, #25
 8001b52:	2201      	movs	r2, #1
 8001b54:	f000 fa26 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001b58:	1e03      	subs	r3, r0, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ef      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2241      	movs	r2, #65	@ 0x41
 8001b64:	2121      	movs	r1, #33	@ 0x21
 8001b66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2242      	movs	r2, #66	@ 0x42
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	18ba      	adds	r2, r7, r2
 8001b82:	8812      	ldrh	r2, [r2, #0]
 8001b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2bff      	cmp	r3, #255	@ 0xff
 8001b94:	d906      	bls.n	8001ba4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	22ff      	movs	r2, #255	@ 0xff
 8001b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	045b      	lsls	r3, r3, #17
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e007      	b.n	8001bb4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	049b      	lsls	r3, r3, #18
 8001bb2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d027      	beq.n	8001c0c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	697c      	ldr	r4, [r7, #20]
 8001bf8:	230a      	movs	r3, #10
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	8819      	ldrh	r1, [r3, #0]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	4b51      	ldr	r3, [pc, #324]	@ (8001d48 <HAL_I2C_Master_Transmit+0x24c>)
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	0023      	movs	r3, r4
 8001c06:	f000 fc45 	bl	8002494 <I2C_TransferConfig>
 8001c0a:	e06f      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	697c      	ldr	r4, [r7, #20]
 8001c14:	230a      	movs	r3, #10
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <HAL_I2C_Master_Transmit+0x24c>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	0023      	movs	r3, r4
 8001c22:	f000 fc37 	bl	8002494 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c26:	e061      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fa10 	bl	8002054 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e081      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_I2C_Master_Transmit+0x1f0>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d136      	bne.n	8001cec <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	0013      	movs	r3, r2
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	f000 f98a 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e053      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ca0:	d911      	bls.n	8001cc6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	22ff      	movs	r2, #255	@ 0xff
 8001ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	2380      	movs	r3, #128	@ 0x80
 8001cb0:	045c      	lsls	r4, r3, #17
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	8819      	ldrh	r1, [r3, #0]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	0023      	movs	r3, r4
 8001cc0:	f000 fbe8 	bl	8002494 <I2C_TransferConfig>
 8001cc4:	e012      	b.n	8001cec <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	049c      	lsls	r4, r3, #18
 8001cda:	230a      	movs	r3, #10
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	8819      	ldrh	r1, [r3, #0]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	0023      	movs	r3, r4
 8001ce8:	f000 fbd4 	bl	8002494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d198      	bne.n	8001c28 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 f9ef 	bl	80020e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e01a      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	490b      	ldr	r1, [pc, #44]	@ (8001d4c <HAL_I2C_Master_Transmit+0x250>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2241      	movs	r2, #65	@ 0x41
 8001d26:	2120      	movs	r1, #32
 8001d28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2242      	movs	r2, #66	@ 0x42
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2240      	movs	r2, #64	@ 0x40
 8001d36:	2100      	movs	r1, #0
 8001d38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
  }
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b007      	add	sp, #28
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	80002000 	.word	0x80002000
 8001d4c:	fe00e800 	.word	0xfe00e800

08001d50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	0008      	movs	r0, r1
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	230a      	movs	r3, #10
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	1c02      	adds	r2, r0, #0
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	2308      	movs	r3, #8
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	1c0a      	adds	r2, r1, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2241      	movs	r2, #65	@ 0x41
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d000      	beq.n	8001d7c <HAL_I2C_Master_Receive+0x2c>
 8001d7a:	e0e8      	b.n	8001f4e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_I2C_Master_Receive+0x3a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0e2      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2240      	movs	r2, #64	@ 0x40
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d92:	f7ff fb6f 	bl	8001474 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	0219      	lsls	r1, r3, #8
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2319      	movs	r3, #25
 8001da6:	2201      	movs	r2, #1
 8001da8:	f000 f8fc 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0cd      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2241      	movs	r2, #65	@ 0x41
 8001db8:	2122      	movs	r1, #34	@ 0x22
 8001dba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2242      	movs	r2, #66	@ 0x42
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	18ba      	adds	r2, r7, r2
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2bff      	cmp	r3, #255	@ 0xff
 8001de8:	d911      	bls.n	8001e0e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	22ff      	movs	r2, #255	@ 0xff
 8001dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	045c      	lsls	r4, r3, #17
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	8819      	ldrh	r1, [r3, #0]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	4b55      	ldr	r3, [pc, #340]	@ (8001f58 <HAL_I2C_Master_Receive+0x208>)
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	0023      	movs	r3, r4
 8001e08:	f000 fb44 	bl	8002494 <I2C_TransferConfig>
 8001e0c:	e076      	b.n	8001efc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	2380      	movs	r3, #128	@ 0x80
 8001e20:	049c      	lsls	r4, r3, #18
 8001e22:	230a      	movs	r3, #10
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	8819      	ldrh	r1, [r3, #0]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <HAL_I2C_Master_Receive+0x208>)
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	0023      	movs	r3, r4
 8001e30:	f000 fb30 	bl	8002494 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e34:	e062      	b.n	8001efc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f993 	bl	8002168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e082      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d03a      	beq.n	8001efc <HAL_I2C_Master_Receive+0x1ac>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d136      	bne.n	8001efc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	0013      	movs	r3, r2
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	f000 f882 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e053      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2bff      	cmp	r3, #255	@ 0xff
 8001eb0:	d911      	bls.n	8001ed6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	22ff      	movs	r2, #255	@ 0xff
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	045c      	lsls	r4, r3, #17
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	8819      	ldrh	r1, [r3, #0]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	0023      	movs	r3, r4
 8001ed0:	f000 fae0 	bl	8002494 <I2C_TransferConfig>
 8001ed4:	e012      	b.n	8001efc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	049c      	lsls	r4, r3, #18
 8001eea:	230a      	movs	r3, #10
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	8819      	ldrh	r1, [r3, #0]
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	0023      	movs	r3, r4
 8001ef8:	f000 facc 	bl	8002494 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d197      	bne.n	8001e36 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 f8e7 	bl	80020e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e01a      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	490b      	ldr	r1, [pc, #44]	@ (8001f5c <HAL_I2C_Master_Receive+0x20c>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2241      	movs	r2, #65	@ 0x41
 8001f36:	2120      	movs	r1, #32
 8001f38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2242      	movs	r2, #66	@ 0x42
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2240      	movs	r2, #64	@ 0x40
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
  }
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b007      	add	sp, #28
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	80002400 	.word	0x80002400
 8001f5c:	fe00e800 	.word	0xfe00e800

08001f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d103      	bne.n	8001f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2201      	movs	r2, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d007      	beq.n	8001f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	619a      	str	r2, [r3, #24]
  }
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb4:	e03a      	b.n	800202c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f971 	bl	80022a4 <I2C_IsErrorOccurred>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e040      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	d02d      	beq.n	800202c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd0:	f7ff fa50 	bl	8001474 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d302      	bcc.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d122      	bne.n	800202c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	425a      	negs	r2, r3
 8001ff6:	4153      	adcs	r3, r2
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d113      	bne.n	800202c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002008:	2220      	movs	r2, #32
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2241      	movs	r2, #65	@ 0x41
 8002014:	2120      	movs	r1, #32
 8002016:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2242      	movs	r2, #66	@ 0x42
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e00f      	b.n	800204c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	425a      	negs	r2, r3
 800203c:	4153      	adcs	r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	001a      	movs	r2, r3
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d0b5      	beq.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002060:	e032      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f91b 	bl	80022a4 <I2C_IsErrorOccurred>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e030      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3301      	adds	r3, #1
 800207a:	d025      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207c:	f7ff f9fa 	bl	8001474 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11a      	bne.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d013      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	2220      	movs	r2, #32
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2241      	movs	r2, #65	@ 0x41
 80020b0:	2120      	movs	r1, #32
 80020b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2242      	movs	r2, #66	@ 0x42
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2240      	movs	r2, #64	@ 0x40
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e007      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d1c5      	bne.n	8002062 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ec:	e02f      	b.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f8d5 	bl	80022a4 <I2C_IsErrorOccurred>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e02d      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7ff f9b7 	bl	8001474 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11a      	bne.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2220      	movs	r2, #32
 8002120:	4013      	ands	r3, r2
 8002122:	2b20      	cmp	r3, #32
 8002124:	d013      	beq.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	2220      	movs	r2, #32
 800212c:	431a      	orrs	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2241      	movs	r2, #65	@ 0x41
 8002136:	2120      	movs	r1, #32
 8002138:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2242      	movs	r2, #66	@ 0x42
 800213e:	2100      	movs	r1, #0
 8002140:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2220      	movs	r2, #32
 8002156:	4013      	ands	r3, r2
 8002158:	2b20      	cmp	r3, #32
 800215a:	d1c8      	bne.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800217c:	e07b      	b.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 f88d 	bl	80022a4 <I2C_IsErrorOccurred>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d003      	beq.n	8002196 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800218e:	2317      	movs	r3, #23
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2220      	movs	r2, #32
 800219e:	4013      	ands	r3, r2
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d140      	bne.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80021a4:	2117      	movs	r1, #23
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d13b      	bne.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2204      	movs	r2, #4
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d106      	bne.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2210      	movs	r2, #16
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d123      	bne.n	8002220 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2210      	movs	r2, #16
 80021de:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2204      	movs	r2, #4
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2220      	movs	r2, #32
 80021ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4929      	ldr	r1, [pc, #164]	@ (80022a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80021fa:	400a      	ands	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2241      	movs	r2, #65	@ 0x41
 8002202:	2120      	movs	r1, #32
 8002204:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2242      	movs	r2, #66	@ 0x42
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2240      	movs	r2, #64	@ 0x40
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e002      	b.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002226:	f7ff f925 	bl	8001474 <HAL_GetTick>
 800222a:	0002      	movs	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d11c      	bne.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800223c:	2017      	movs	r0, #23
 800223e:	183b      	adds	r3, r7, r0
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d117      	bne.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	2b04      	cmp	r3, #4
 8002252:	d010      	beq.n	8002276 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002258:	2220      	movs	r2, #32
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2241      	movs	r2, #65	@ 0x41
 8002264:	2120      	movs	r1, #32
 8002266:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2240      	movs	r2, #64	@ 0x40
 800226c:	2100      	movs	r1, #0
 800226e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002270:	183b      	adds	r3, r7, r0
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2204      	movs	r2, #4
 800227e:	4013      	ands	r3, r2
 8002280:	2b04      	cmp	r3, #4
 8002282:	d005      	beq.n	8002290 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002284:	2317      	movs	r3, #23
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800228e:	e776      	b.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002290:	2317      	movs	r3, #23
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	781b      	ldrb	r3, [r3, #0]
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b006      	add	sp, #24
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	fe00e800 	.word	0xfe00e800

080022a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2327      	movs	r3, #39	@ 0x27
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2210      	movs	r2, #16
 80022cc:	4013      	ands	r3, r2
 80022ce:	d100      	bne.n	80022d2 <I2C_IsErrorOccurred+0x2e>
 80022d0:	e079      	b.n	80023c6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2210      	movs	r2, #16
 80022d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022da:	e057      	b.n	800238c <I2C_IsErrorOccurred+0xe8>
 80022dc:	2227      	movs	r2, #39	@ 0x27
 80022de:	18bb      	adds	r3, r7, r2
 80022e0:	18ba      	adds	r2, r7, r2
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	d04f      	beq.n	800238c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7ff f8c2 	bl	8001474 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <I2C_IsErrorOccurred+0x5e>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d144      	bne.n	800238c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	01db      	lsls	r3, r3, #7
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002310:	2013      	movs	r0, #19
 8002312:	183b      	adds	r3, r7, r0
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	2142      	movs	r1, #66	@ 0x42
 8002318:	5c52      	ldrb	r2, [r2, r1]
 800231a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	401a      	ands	r2, r3
 8002328:	2380      	movs	r3, #128	@ 0x80
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	429a      	cmp	r2, r3
 800232e:	d126      	bne.n	800237e <I2C_IsErrorOccurred+0xda>
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	429a      	cmp	r2, r3
 8002338:	d021      	beq.n	800237e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800233a:	183b      	adds	r3, r7, r0
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b20      	cmp	r3, #32
 8002340:	d01d      	beq.n	800237e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	01c9      	lsls	r1, r1, #7
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002354:	f7ff f88e 	bl	8001474 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235c:	e00f      	b.n	800237e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800235e:	f7ff f889 	bl	8001474 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b19      	cmp	r3, #25
 800236a:	d908      	bls.n	800237e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2220      	movs	r2, #32
 8002370:	4313      	orrs	r3, r2
 8002372:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002374:	2327      	movs	r3, #39	@ 0x27
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]

              break;
 800237c:	e006      	b.n	800238c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2220      	movs	r2, #32
 8002386:	4013      	ands	r3, r2
 8002388:	2b20      	cmp	r3, #32
 800238a:	d1e8      	bne.n	800235e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	2b20      	cmp	r3, #32
 8002398:	d004      	beq.n	80023a4 <I2C_IsErrorOccurred+0x100>
 800239a:	2327      	movs	r3, #39	@ 0x27
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d09b      	beq.n	80022dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80023a4:	2327      	movs	r3, #39	@ 0x27
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2220      	movs	r2, #32
 80023b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4313      	orrs	r3, r2
 80023bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023be:	2327      	movs	r3, #39	@ 0x27
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00c      	beq.n	80023f2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	2201      	movs	r2, #1
 80023dc:	4313      	orrs	r3, r2
 80023de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	0052      	lsls	r2, r2, #1
 80023e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ea:	2327      	movs	r3, #39	@ 0x27
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4013      	ands	r3, r2
 80023fa:	d00c      	beq.n	8002416 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	2208      	movs	r2, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2280      	movs	r2, #128	@ 0x80
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800240e:	2327      	movs	r3, #39	@ 0x27
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d00c      	beq.n	800243a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2202      	movs	r2, #2
 8002424:	4313      	orrs	r3, r2
 8002426:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002432:	2327      	movs	r3, #39	@ 0x27
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800243a:	2327      	movs	r3, #39	@ 0x27
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01d      	beq.n	8002480 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff fd8a 	bl	8001f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	490e      	ldr	r1, [pc, #56]	@ (8002490 <I2C_IsErrorOccurred+0x1ec>)
 8002458:	400a      	ands	r2, r1
 800245a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2241      	movs	r2, #65	@ 0x41
 800246c:	2120      	movs	r1, #32
 800246e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2242      	movs	r2, #66	@ 0x42
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2240      	movs	r2, #64	@ 0x40
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002480:	2327      	movs	r3, #39	@ 0x27
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b00a      	add	sp, #40	@ 0x28
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	fe00e800 	.word	0xfe00e800

08002494 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	0008      	movs	r0, r1
 800249e:	0011      	movs	r1, r2
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	240a      	movs	r4, #10
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	1c02      	adds	r2, r0, #0
 80024a8:	801a      	strh	r2, [r3, #0]
 80024aa:	2009      	movs	r0, #9
 80024ac:	183b      	adds	r3, r7, r0
 80024ae:	1c0a      	adds	r2, r1, #0
 80024b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	059b      	lsls	r3, r3, #22
 80024b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024ba:	183b      	adds	r3, r7, r0
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	0419      	lsls	r1, r3, #16
 80024c0:	23ff      	movs	r3, #255	@ 0xff
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	4313      	orrs	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024de:	0d51      	lsrs	r1, r2, #21
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	00d2      	lsls	r2, r2, #3
 80024e4:	400a      	ands	r2, r1
 80024e6:	4907      	ldr	r1, [pc, #28]	@ (8002504 <I2C_TransferConfig+0x70>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	43d2      	mvns	r2, r2
 80024ec:	401a      	ands	r2, r3
 80024ee:	0011      	movs	r1, r2
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b007      	add	sp, #28
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	03ff63ff 	.word	0x03ff63ff

08002508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2241      	movs	r2, #65	@ 0x41
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d138      	bne.n	8002590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e032      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2241      	movs	r2, #65	@ 0x41
 8002538:	2124      	movs	r1, #36	@ 0x24
 800253a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	438a      	bics	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4911      	ldr	r1, [pc, #68]	@ (800259c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2241      	movs	r2, #65	@ 0x41
 8002580:	2120      	movs	r1, #32
 8002582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2240      	movs	r2, #64	@ 0x40
 8002588:	2100      	movs	r1, #0
 800258a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b002      	add	sp, #8
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	ffffefff 	.word	0xffffefff

080025a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2241      	movs	r2, #65	@ 0x41
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	d139      	bne.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2240      	movs	r2, #64	@ 0x40
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e033      	b.n	800262c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	2101      	movs	r1, #1
 80025ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2241      	movs	r2, #65	@ 0x41
 80025d0:	2124      	movs	r1, #36	@ 0x24
 80025d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	430a      	orrs	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2241      	movs	r2, #65	@ 0x41
 800261a:	2120      	movs	r1, #32
 800261c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2240      	movs	r2, #64	@ 0x40
 8002622:	2100      	movs	r1, #0
 8002624:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}
 8002634:	fffff0ff 	.word	0xfffff0ff

08002638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a19      	ldr	r2, [pc, #100]	@ (80026ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d11f      	bne.n	800269c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	0013      	movs	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	189b      	adds	r3, r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4912      	ldr	r1, [pc, #72]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800266a:	0018      	movs	r0, r3
 800266c:	f7fd fd50 	bl	8000110 <__udivsi3>
 8002670:	0003      	movs	r3, r0
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002676:	e008      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3b01      	subs	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e001      	b.n	800268a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e009      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	401a      	ands	r2, r3
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	429a      	cmp	r2, r3
 800269a:	d0ed      	beq.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	40007000 	.word	0x40007000
 80026ac:	fffff9ff 	.word	0xfffff9ff
 80026b0:	20000004 	.word	0x20000004
 80026b4:	000f4240 	.word	0x000f4240

080026b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	23e0      	movs	r3, #224	@ 0xe0
 80026c2:	01db      	lsls	r3, r3, #7
 80026c4:	4013      	ands	r3, r2
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e2fe      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x1e>
 80026ec:	e07c      	b.n	80027e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ee:	4bc3      	ldr	r3, [pc, #780]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	@ 0x38
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f8:	4bc0      	ldr	r3, [pc, #768]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2203      	movs	r2, #3
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d102      	bne.n	800270e <HAL_RCC_OscConfig+0x3e>
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d002      	beq.n	8002714 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d10b      	bne.n	800272c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	4bb9      	ldr	r3, [pc, #740]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	4013      	ands	r3, r2
 800271e:	d062      	beq.n	80027e6 <HAL_RCC_OscConfig+0x116>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d15e      	bne.n	80027e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e2d9      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	025b      	lsls	r3, r3, #9
 8002734:	429a      	cmp	r2, r3
 8002736:	d107      	bne.n	8002748 <HAL_RCC_OscConfig+0x78>
 8002738:	4bb0      	ldr	r3, [pc, #704]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4baf      	ldr	r3, [pc, #700]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	0249      	lsls	r1, r1, #9
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e020      	b.n	800278a <HAL_RCC_OscConfig+0xba>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	23a0      	movs	r3, #160	@ 0xa0
 800274e:	02db      	lsls	r3, r3, #11
 8002750:	429a      	cmp	r2, r3
 8002752:	d10e      	bne.n	8002772 <HAL_RCC_OscConfig+0xa2>
 8002754:	4ba9      	ldr	r3, [pc, #676]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4ba8      	ldr	r3, [pc, #672]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800275a:	2180      	movs	r1, #128	@ 0x80
 800275c:	02c9      	lsls	r1, r1, #11
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	4ba6      	ldr	r3, [pc, #664]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4ba5      	ldr	r3, [pc, #660]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002768:	2180      	movs	r1, #128	@ 0x80
 800276a:	0249      	lsls	r1, r1, #9
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e00b      	b.n	800278a <HAL_RCC_OscConfig+0xba>
 8002772:	4ba2      	ldr	r3, [pc, #648]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4ba1      	ldr	r3, [pc, #644]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002778:	49a1      	ldr	r1, [pc, #644]	@ (8002a00 <HAL_RCC_OscConfig+0x330>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	4b9f      	ldr	r3, [pc, #636]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b9e      	ldr	r3, [pc, #632]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002784:	499f      	ldr	r1, [pc, #636]	@ (8002a04 <HAL_RCC_OscConfig+0x334>)
 8002786:	400a      	ands	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d014      	beq.n	80027bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fe6f 	bl	8001474 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fe6a 	bl	8001474 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e298      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4b93      	ldr	r3, [pc, #588]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	4013      	ands	r3, r2
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xcc>
 80027ba:	e015      	b.n	80027e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fe5a 	bl	8001474 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c6:	f7fe fe55 	bl	8001474 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	@ 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e283      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d8:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	4013      	ands	r3, r2
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0xf6>
 80027e4:	e000      	b.n	80027e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d100      	bne.n	80027f4 <HAL_RCC_OscConfig+0x124>
 80027f2:	e099      	b.n	8002928 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f4:	4b81      	ldr	r3, [pc, #516]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2238      	movs	r2, #56	@ 0x38
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fe:	4b7f      	ldr	r3, [pc, #508]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d102      	bne.n	8002814 <HAL_RCC_OscConfig+0x144>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d002      	beq.n	800281a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d135      	bne.n	8002886 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281a:	4b78      	ldr	r3, [pc, #480]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4013      	ands	r3, r2
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x162>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e256      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002832:	4b72      	ldr	r3, [pc, #456]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a74      	ldr	r2, [pc, #464]	@ (8002a08 <HAL_RCC_OscConfig+0x338>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	021a      	lsls	r2, r3, #8
 8002842:	4b6e      	ldr	r3, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d112      	bne.n	8002874 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800284e:	4b6b      	ldr	r3, [pc, #428]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x33c>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	4b67      	ldr	r3, [pc, #412]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002862:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0adb      	lsrs	r3, r3, #11
 8002868:	2207      	movs	r2, #7
 800286a:	4013      	ands	r3, r2
 800286c:	4a68      	ldr	r2, [pc, #416]	@ (8002a10 <HAL_RCC_OscConfig+0x340>)
 800286e:	40da      	lsrs	r2, r3
 8002870:	4b68      	ldr	r3, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x344>)
 8002872:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_OscConfig+0x348>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0018      	movs	r0, r3
 800287a:	f7fe fd9f 	bl	80013bc <HAL_InitTick>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d051      	beq.n	8002926 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e22c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d030      	beq.n	80028f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5e      	ldr	r2, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x33c>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	4b57      	ldr	r3, [pc, #348]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800289e:	430a      	orrs	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028a2:	4b56      	ldr	r3, [pc, #344]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b55      	ldr	r3, [pc, #340]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028a8:	2180      	movs	r1, #128	@ 0x80
 80028aa:	0049      	lsls	r1, r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fde0 	bl	8001474 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7fe fddb 	bl	8001474 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e209      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028cc:	4b4b      	ldr	r3, [pc, #300]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4013      	ands	r3, r2
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d8:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_RCC_OscConfig+0x338>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e01b      	b.n	8002928 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028f0:	4b42      	ldr	r3, [pc, #264]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80028f6:	4949      	ldr	r1, [pc, #292]	@ (8002a1c <HAL_RCC_OscConfig+0x34c>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fdba 	bl	8001474 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002906:	f7fe fdb5 	bl	8001474 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e1e3      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002918:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4013      	ands	r3, r2
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x236>
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002926:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2208      	movs	r2, #8
 800292e:	4013      	ands	r3, r2
 8002930:	d047      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002932:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2238      	movs	r2, #56	@ 0x38
 8002938:	4013      	ands	r3, r2
 800293a:	2b18      	cmp	r3, #24
 800293c:	d10a      	bne.n	8002954 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002942:	2202      	movs	r2, #2
 8002944:	4013      	ands	r3, r2
 8002946:	d03c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d138      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e1c5      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d019      	beq.n	8002990 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 800295e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002960:	4b26      	ldr	r3, [pc, #152]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002962:	2101      	movs	r1, #1
 8002964:	430a      	orrs	r2, r1
 8002966:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fd84 	bl	8001474 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe fd7f 	bl	8001474 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e1ad      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d0f1      	beq.n	8002972 <HAL_RCC_OscConfig+0x2a2>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002992:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 8002996:	2101      	movs	r1, #1
 8002998:	438a      	bics	r2, r1
 800299a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fd6a 	bl	8001474 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a6:	f7fe fd65 	bl	8001474 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e193      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80029ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d1f1      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2204      	movs	r2, #4
 80029c8:	4013      	ands	r3, r2
 80029ca:	d100      	bne.n	80029ce <HAL_RCC_OscConfig+0x2fe>
 80029cc:	e0c6      	b.n	8002b5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ce:	231f      	movs	r3, #31
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2238      	movs	r2, #56	@ 0x38
 80029dc:	4013      	ands	r3, r2
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d11e      	bne.n	8002a20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_OscConfig+0x32c>)
 80029e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d100      	bne.n	80029ee <HAL_RCC_OscConfig+0x31e>
 80029ec:	e0b6      	b.n	8002b5c <HAL_RCC_OscConfig+0x48c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d000      	beq.n	80029f8 <HAL_RCC_OscConfig+0x328>
 80029f6:	e0b1      	b.n	8002b5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e171      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	fffeffff 	.word	0xfffeffff
 8002a04:	fffbffff 	.word	0xfffbffff
 8002a08:	ffff80ff 	.word	0xffff80ff
 8002a0c:	ffffc7ff 	.word	0xffffc7ff
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	20000004 	.word	0x20000004
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a20:	4bb1      	ldr	r3, [pc, #708]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	055b      	lsls	r3, r3, #21
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_OscConfig+0x360>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_RCC_OscConfig+0x362>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d011      	beq.n	8002a5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4bac      	ldr	r3, [pc, #688]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a3a:	4bab      	ldr	r3, [pc, #684]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0549      	lsls	r1, r1, #21
 8002a40:	430a      	orrs	r2, r1
 8002a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a44:	4ba8      	ldr	r3, [pc, #672]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	055b      	lsls	r3, r3, #21
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a52:	231f      	movs	r3, #31
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5a:	4ba4      	ldr	r3, [pc, #656]	@ (8002cec <HAL_RCC_OscConfig+0x61c>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	d11a      	bne.n	8002a9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a66:	4ba1      	ldr	r3, [pc, #644]	@ (8002cec <HAL_RCC_OscConfig+0x61c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4ba0      	ldr	r3, [pc, #640]	@ (8002cec <HAL_RCC_OscConfig+0x61c>)
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	0049      	lsls	r1, r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fcfe 	bl	8001474 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fcf9 	bl	8001474 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e127      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b96      	ldr	r3, [pc, #600]	@ (8002cec <HAL_RCC_OscConfig+0x61c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3e2>
 8002aa4:	4b90      	ldr	r3, [pc, #576]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002aa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002aaa:	2101      	movs	r1, #1
 8002aac:	430a      	orrs	r2, r1
 8002aae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x41c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x404>
 8002aba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002abe:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ac6:	4b88      	ldr	r3, [pc, #544]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ac8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aca:	4b87      	ldr	r3, [pc, #540]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x41c>
 8002ad4:	4b84      	ldr	r3, [pc, #528]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ad6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad8:	4b83      	ldr	r3, [pc, #524]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae0:	4b81      	ldr	r3, [pc, #516]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ae2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae4:	4b80      	ldr	r3, [pc, #512]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	438a      	bics	r2, r1
 8002aea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe fcbe 	bl	8001474 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afc:	e009      	b.n	8002b12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fcb9 	bl	8001474 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	4a79      	ldr	r2, [pc, #484]	@ (8002cf0 <HAL_RCC_OscConfig+0x620>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0e6      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b12:	4b75      	ldr	r3, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	2202      	movs	r2, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x42e>
 8002b1c:	e013      	b.n	8002b46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fca9 	bl	8001474 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b26:	e009      	b.n	8002b3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fca4 	bl	8001474 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x620>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0d1      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b65      	ldr	r3, [pc, #404]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b54:	4b64      	ldr	r3, [pc, #400]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b56:	4967      	ldr	r1, [pc, #412]	@ (8002cf4 <HAL_RCC_OscConfig+0x624>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <HAL_RCC_OscConfig+0x496>
 8002b64:	e0bb      	b.n	8002cde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b66:	4b60      	ldr	r3, [pc, #384]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2238      	movs	r2, #56	@ 0x38
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d100      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4a4>
 8002b72:	e07b      	b.n	8002c6c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d156      	bne.n	8002c2a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b59      	ldr	r3, [pc, #356]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002b82:	495d      	ldr	r1, [pc, #372]	@ (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc74 	bl	8001474 <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fc6f 	bl	8001474 <HAL_GetTick>
 8002b96:	0002      	movs	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e09d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	049b      	lsls	r3, r3, #18
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	@ (8002cfc <HAL_RCC_OscConfig+0x62c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	0449      	lsls	r1, r1, #17
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	0549      	lsls	r1, r1, #21
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe fc38 	bl	8001474 <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fc33 	bl	8001474 <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e061      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1c:	4b32      	ldr	r3, [pc, #200]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	2380      	movs	r3, #128	@ 0x80
 8002c22:	049b      	lsls	r3, r3, #18
 8002c24:	4013      	ands	r3, r2
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x53a>
 8002c28:	e059      	b.n	8002cde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c30:	4931      	ldr	r1, [pc, #196]	@ (8002cf8 <HAL_RCC_OscConfig+0x628>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fc1d 	bl	8001474 <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe fc18 	bl	8001474 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e046      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c52:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	049b      	lsls	r3, r3, #18
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c64:	4926      	ldr	r1, [pc, #152]	@ (8002d00 <HAL_RCC_OscConfig+0x630>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	e038      	b.n	8002cde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e033      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_RCC_OscConfig+0x618>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2203      	movs	r2, #3
 8002c82:	401a      	ands	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d126      	bne.n	8002cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2270      	movs	r2, #112	@ 0x70
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d11f      	bne.n	8002cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	23fe      	movs	r3, #254	@ 0xfe
 8002c9e:	01db      	lsls	r3, r3, #7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d116      	bne.n	8002cda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	23f8      	movs	r3, #248	@ 0xf8
 8002cb0:	039b      	lsls	r3, r3, #14
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d10e      	bne.n	8002cda <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	23e0      	movs	r3, #224	@ 0xe0
 8002cc0:	051b      	lsls	r3, r3, #20
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	0f5b      	lsrs	r3, r3, #29
 8002cd0:	075a      	lsls	r2, r3, #29
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b008      	add	sp, #32
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	00001388 	.word	0x00001388
 8002cf4:	efffffff 	.word	0xefffffff
 8002cf8:	feffffff 	.word	0xfeffffff
 8002cfc:	11c1808c 	.word	0x11c1808c
 8002d00:	eefefffc 	.word	0xeefefffc

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0e9      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	4013      	ands	r3, r2
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d91e      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b73      	ldr	r3, [pc, #460]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	4b70      	ldr	r3, [pc, #448]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fb9c 	bl	8001474 <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d40:	e009      	b.n	8002d56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d42:	f7fe fb97 	bl	8001474 <HAL_GetTick>
 8002d46:	0002      	movs	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0ca      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d56:	4b67      	ldr	r3, [pc, #412]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2204      	movs	r2, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d006      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d78:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002d7e:	21e0      	movs	r1, #224	@ 0xe0
 8002d80:	01c9      	lsls	r1, r1, #7
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d86:	4b5d      	ldr	r3, [pc, #372]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f00 <HAL_RCC_ClockConfig+0x1fc>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b59      	ldr	r3, [pc, #356]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d057      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d12b      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e097      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	049b      	lsls	r3, r3, #18
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d11f      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e08b      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b47      	ldr	r3, [pc, #284]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4013      	ands	r3, r2
 8002de6:	d113      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e07f      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e074      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	4b3e      	ldr	r3, [pc, #248]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e06d      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e10:	4b3a      	ldr	r3, [pc, #232]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2207      	movs	r2, #7
 8002e16:	4393      	bics	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4b37      	ldr	r3, [pc, #220]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe fb26 	bl	8001474 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2e:	f7fe fb21 	bl	8001474 <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e054      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2238      	movs	r2, #56	@ 0x38
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1ec      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2207      	movs	r2, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d21e      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2207      	movs	r2, #7
 8002e68:	4393      	bics	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e74:	f7fe fafe 	bl	8001474 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e7c:	e009      	b.n	8002e92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7e:	f7fe faf9 	bl	8001474 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e02c      	b.n	8002eec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e92:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2207      	movs	r2, #7
 8002e98:	4013      	ands	r3, r2
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a15      	ldr	r2, [pc, #84]	@ (8002f04 <HAL_RCC_ClockConfig+0x200>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ebe:	f000 f829 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002ec2:	0001      	movs	r1, r0
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <HAL_RCC_ClockConfig+0x1f8>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	220f      	movs	r2, #15
 8002ecc:	401a      	ands	r2, r3
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_RCC_ClockConfig+0x204>)
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	58d3      	ldr	r3, [r2, r3]
 8002ed4:	221f      	movs	r2, #31
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	000a      	movs	r2, r1
 8002eda:	40da      	lsrs	r2, r3
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x208>)
 8002ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_ClockConfig+0x20c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fe fa69 	bl	80013bc <HAL_InitTick>
 8002eea:	0003      	movs	r3, r0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	00001388 	.word	0x00001388
 8002efc:	40021000 	.word	0x40021000
 8002f00:	fffff0ff 	.word	0xfffff0ff
 8002f04:	ffff8fff 	.word	0xffff8fff
 8002f08:	08005e14 	.word	0x08005e14
 8002f0c:	20000004 	.word	0x20000004
 8002f10:	20000008 	.word	0x20000008

08002f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2238      	movs	r2, #56	@ 0x38
 8002f20:	4013      	ands	r3, r2
 8002f22:	d10f      	bne.n	8002f44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f24:	4b39      	ldr	r3, [pc, #228]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0adb      	lsrs	r3, r3, #11
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2201      	movs	r2, #1
 8002f30:	409a      	lsls	r2, r3
 8002f32:	0013      	movs	r3, r2
 8002f34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	4835      	ldr	r0, [pc, #212]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f3a:	f7fd f8e9 	bl	8000110 <__udivsi3>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e05d      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2238      	movs	r2, #56	@ 0x38
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f50:	4b30      	ldr	r3, [pc, #192]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e054      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2238      	movs	r2, #56	@ 0x38
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d138      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2203      	movs	r2, #3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f6c:	4b27      	ldr	r3, [pc, #156]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	2207      	movs	r2, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	3301      	adds	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d10d      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4824      	ldr	r0, [pc, #144]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f84:	f7fd f8c4 	bl	8000110 <__udivsi3>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	227f      	movs	r2, #127	@ 0x7f
 8002f94:	4013      	ands	r3, r2
 8002f96:	434b      	muls	r3, r1
 8002f98:	617b      	str	r3, [r7, #20]
        break;
 8002f9a:	e00d      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	481c      	ldr	r0, [pc, #112]	@ (8003010 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fa0:	f7fd f8b6 	bl	8000110 <__udivsi3>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	4b18      	ldr	r3, [pc, #96]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	227f      	movs	r2, #127	@ 0x7f
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	434b      	muls	r3, r1
 8002fb4:	617b      	str	r3, [r7, #20]
        break;
 8002fb6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fb8:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0f5b      	lsrs	r3, r3, #29
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f7fd f8a1 	bl	8000110 <__udivsi3>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	e015      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2238      	movs	r2, #56	@ 0x38
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d103      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fe0:	2380      	movs	r3, #128	@ 0x80
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fe8:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2238      	movs	r2, #56	@ 0x38
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b18      	cmp	r3, #24
 8002ff2:	d103      	bne.n	8002ffc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ff4:	23fa      	movs	r3, #250	@ 0xfa
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e001      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003000:	693b      	ldr	r3, [r7, #16]
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b006      	add	sp, #24
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b02      	ldr	r3, [pc, #8]	@ (8003028 <HAL_RCC_GetHCLKFreq+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003030:	f7ff fff2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003034:	0004      	movs	r4, r0
 8003036:	f7ff fb3f 	bl	80026b8 <LL_RCC_GetAPB1Prescaler>
 800303a:	0003      	movs	r3, r0
 800303c:	0b1a      	lsrs	r2, r3, #12
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	58d3      	ldr	r3, [r2, r3]
 8003044:	221f      	movs	r2, #31
 8003046:	4013      	ands	r3, r2
 8003048:	40dc      	lsrs	r4, r3
 800304a:	0023      	movs	r3, r4
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bdb0      	pop	{r4, r5, r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	08005e54 	.word	0x08005e54

08003058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003060:	2313      	movs	r3, #19
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003068:	2312      	movs	r3, #18
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	@ 0x80
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	4013      	ands	r3, r2
 800307a:	d100      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800307c:	e0a3      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2011      	movs	r0, #17
 8003080:	183b      	adds	r3, r7, r0
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4bb0      	ldr	r3, [pc, #704]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	055b      	lsls	r3, r3, #21
 800308e:	4013      	ands	r3, r2
 8003090:	d110      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	4bad      	ldr	r3, [pc, #692]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003096:	4bac      	ldr	r3, [pc, #688]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	0549      	lsls	r1, r1, #21
 800309c:	430a      	orrs	r2, r1
 800309e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030a0:	4ba9      	ldr	r3, [pc, #676]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	055b      	lsls	r3, r3, #21
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b4:	4ba5      	ldr	r3, [pc, #660]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4ba4      	ldr	r3, [pc, #656]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	0049      	lsls	r1, r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030c2:	f7fe f9d7 	bl	8001474 <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ca:	e00b      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fe f9d2 	bl	8001474 <HAL_GetTick>
 80030d0:	0002      	movs	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d904      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030da:	2313      	movs	r3, #19
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2203      	movs	r2, #3
 80030e0:	701a      	strb	r2, [r3, #0]
        break;
 80030e2:	e005      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e4:	4b99      	ldr	r3, [pc, #612]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	@ 0x80
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	d0ed      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030f0:	2313      	movs	r3, #19
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d154      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fa:	4b93      	ldr	r3, [pc, #588]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030fe:	23c0      	movs	r3, #192	@ 0xc0
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d019      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d014      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003116:	4b8c      	ldr	r3, [pc, #560]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	4a8d      	ldr	r2, [pc, #564]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800311c:	4013      	ands	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003120:	4b89      	ldr	r3, [pc, #548]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003122:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003124:	4b88      	ldr	r3, [pc, #544]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003126:	2180      	movs	r1, #128	@ 0x80
 8003128:	0249      	lsls	r1, r1, #9
 800312a:	430a      	orrs	r2, r1
 800312c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800312e:	4b86      	ldr	r3, [pc, #536]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003132:	4b85      	ldr	r3, [pc, #532]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003134:	4987      	ldr	r1, [pc, #540]	@ (8003354 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003136:	400a      	ands	r2, r1
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800313a:	4b83      	ldr	r3, [pc, #524]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2201      	movs	r2, #1
 8003144:	4013      	ands	r3, r2
 8003146:	d016      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f994 	bl	8001474 <HAL_GetTick>
 800314c:	0003      	movs	r3, r0
 800314e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003150:	e00c      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f98f 	bl	8001474 <HAL_GetTick>
 8003156:	0002      	movs	r2, r0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	4a7e      	ldr	r2, [pc, #504]	@ (8003358 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d904      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003162:	2313      	movs	r3, #19
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2203      	movs	r2, #3
 8003168:	701a      	strb	r2, [r3, #0]
            break;
 800316a:	e004      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316c:	4b76      	ldr	r3, [pc, #472]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	2202      	movs	r2, #2
 8003172:	4013      	ands	r3, r2
 8003174:	d0ed      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003176:	2313      	movs	r3, #19
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003180:	4b71      	ldr	r3, [pc, #452]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	4a72      	ldr	r2, [pc, #456]	@ (8003350 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800318e:	4b6e      	ldr	r3, [pc, #440]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003190:	430a      	orrs	r2, r1
 8003192:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003194:	e00c      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003196:	2312      	movs	r3, #18
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2213      	movs	r2, #19
 800319c:	18ba      	adds	r2, r7, r2
 800319e:	7812      	ldrb	r2, [r2, #0]
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e005      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	2312      	movs	r3, #18
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2213      	movs	r2, #19
 80031aa:	18ba      	adds	r2, r7, r2
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b0:	2311      	movs	r3, #17
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b63      	ldr	r3, [pc, #396]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031be:	4b62      	ldr	r3, [pc, #392]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031c0:	4966      	ldr	r1, [pc, #408]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	2203      	movs	r2, #3
 80031d6:	4393      	bics	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2202      	movs	r2, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ee:	4b56      	ldr	r3, [pc, #344]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	220c      	movs	r2, #12
 80031f4:	4393      	bics	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b52      	ldr	r3, [pc, #328]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2204      	movs	r2, #4
 8003208:	4013      	ands	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800320c:	4b4e      	ldr	r3, [pc, #312]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800320e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003210:	2230      	movs	r2, #48	@ 0x30
 8003212:	4393      	bics	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b4b      	ldr	r3, [pc, #300]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800321c:	430a      	orrs	r2, r1
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	4013      	ands	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800322a:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	4a4c      	ldr	r2, [pc, #304]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b43      	ldr	r3, [pc, #268]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800323a:	430a      	orrs	r2, r1
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2240      	movs	r2, #64	@ 0x40
 8003244:	4013      	ands	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003248:	4b3f      	ldr	r3, [pc, #252]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	4a45      	ldr	r2, [pc, #276]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800324e:	4013      	ands	r3, r2
 8003250:	0019      	movs	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	4b3c      	ldr	r3, [pc, #240]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003258:	430a      	orrs	r2, r1
 800325a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	01db      	lsls	r3, r3, #7
 8003264:	4013      	ands	r3, r2
 8003266:	d015      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003268:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	0899      	lsrs	r1, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1a      	ldr	r2, [r3, #32]
 8003274:	4b34      	ldr	r3, [pc, #208]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003276:	430a      	orrs	r2, r1
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1a      	ldr	r2, [r3, #32]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	05db      	lsls	r3, r3, #23
 8003282:	429a      	cmp	r2, r3
 8003284:	d106      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003286:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800328c:	2180      	movs	r1, #128	@ 0x80
 800328e:	0249      	lsls	r1, r1, #9
 8003290:	430a      	orrs	r2, r1
 8003292:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d014      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a4:	2203      	movs	r2, #3
 80032a6:	4393      	bics	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b0:	430a      	orrs	r2, r1
 80032b2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032bc:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032c2:	2180      	movs	r1, #128	@ 0x80
 80032c4:	0249      	lsls	r1, r1, #9
 80032c6:	430a      	orrs	r2, r1
 80032c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	4013      	ands	r3, r2
 80032d4:	d014      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	220c      	movs	r2, #12
 80032dc:	4393      	bics	r3, r2
 80032de:	0019      	movs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	4b18      	ldr	r3, [pc, #96]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d106      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032f2:	4b15      	ldr	r3, [pc, #84]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	0249      	lsls	r1, r1, #9
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	045b      	lsls	r3, r3, #17
 8003308:	4013      	ands	r3, r2
 800330a:	d016      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800331c:	430a      	orrs	r2, r1
 800331e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	019b      	lsls	r3, r3, #6
 8003328:	429a      	cmp	r2, r3
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003332:	2180      	movs	r1, #128	@ 0x80
 8003334:	0449      	lsls	r1, r1, #17
 8003336:	430a      	orrs	r2, r1
 8003338:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800333a:	2312      	movs	r3, #18
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
 8003350:	fffffcff 	.word	0xfffffcff
 8003354:	fffeffff 	.word	0xfffeffff
 8003358:	00001388 	.word	0x00001388
 800335c:	efffffff 	.word	0xefffffff
 8003360:	ffffcfff 	.word	0xffffcfff
 8003364:	ffff3fff 	.word	0xffff3fff

08003368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0a8      	b.n	80034cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	2382      	movs	r3, #130	@ 0x82
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	429a      	cmp	r2, r3
 800338c:	d009      	beq.n	80033a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	61da      	str	r2, [r3, #28]
 8003394:	e005      	b.n	80033a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	225d      	movs	r2, #93	@ 0x5d
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	225c      	movs	r2, #92	@ 0x5c
 80033b8:	2100      	movs	r1, #0
 80033ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fd fee6 	bl	8001190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	225d      	movs	r2, #93	@ 0x5d
 80033c8:	2102      	movs	r1, #2
 80033ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2140      	movs	r1, #64	@ 0x40
 80033d8:	438a      	bics	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	23e0      	movs	r3, #224	@ 0xe0
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d902      	bls.n	80033ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e002      	b.n	80033f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	015b      	lsls	r3, r3, #5
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	23f0      	movs	r3, #240	@ 0xf0
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d008      	beq.n	8003412 <HAL_SPI_Init+0xaa>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	23e0      	movs	r3, #224	@ 0xe0
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	429a      	cmp	r2, r3
 800340a:	d002      	beq.n	8003412 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	2382      	movs	r3, #130	@ 0x82
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	401a      	ands	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	2384      	movs	r3, #132	@ 0x84
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	400b      	ands	r3, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2102      	movs	r1, #2
 800342e:	400b      	ands	r3, r1
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2101      	movs	r1, #1
 8003438:	400b      	ands	r3, r1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6999      	ldr	r1, [r3, #24]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	400b      	ands	r3, r1
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2138      	movs	r1, #56	@ 0x38
 800344e:	400b      	ands	r3, r1
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	2180      	movs	r1, #128	@ 0x80
 8003458:	400b      	ands	r3, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	0011      	movs	r1, r2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	2204      	movs	r2, #4
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	2110      	movs	r1, #16
 8003480:	400b      	ands	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003488:	2108      	movs	r1, #8
 800348a:	400b      	ands	r3, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	23f0      	movs	r3, #240	@ 0xf0
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	400b      	ands	r3, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	0011      	movs	r1, r2
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	015b      	lsls	r3, r3, #5
 80034a2:	401a      	ands	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4907      	ldr	r1, [pc, #28]	@ (80034d4 <HAL_SPI_Init+0x16c>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	225d      	movs	r2, #93	@ 0x5d
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b004      	add	sp, #16
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	fffff7ff 	.word	0xfffff7ff

080034d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e046      	b.n	8003578 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2288      	movs	r2, #136	@ 0x88
 80034ee:	589b      	ldr	r3, [r3, r2]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2284      	movs	r2, #132	@ 0x84
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fd fe92 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2288      	movs	r2, #136	@ 0x88
 8003508:	2124      	movs	r1, #36	@ 0x24
 800350a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	438a      	bics	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 fa0e 	bl	8003948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f000 f828 	bl	8003584 <UART_SetConfig>
 8003534:	0003      	movs	r3, r0
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e01c      	b.n	8003578 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	490d      	ldr	r1, [pc, #52]	@ (8003580 <HAL_UART_Init+0xa8>)
 800354a:	400a      	ands	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	212a      	movs	r1, #42	@ 0x2a
 800355a:	438a      	bics	r2, r1
 800355c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f000 fa9d 	bl	8003ab0 <UART_CheckIdleState>
 8003576:	0003      	movs	r3, r0
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}
 8003580:	ffffb7ff 	.word	0xffffb7ff

08003584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800358c:	231b      	movs	r3, #27
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4ab4      	ldr	r2, [pc, #720]	@ (8003884 <UART_SetConfig+0x300>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4aaf      	ldr	r2, [pc, #700]	@ (8003888 <UART_SetConfig+0x304>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4aa6      	ldr	r2, [pc, #664]	@ (800388c <UART_SetConfig+0x308>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	0019      	movs	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	220f      	movs	r2, #15
 8003608:	4393      	bics	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a9c      	ldr	r2, [pc, #624]	@ (8003890 <UART_SetConfig+0x30c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d127      	bne.n	8003672 <UART_SetConfig+0xee>
 8003622:	4b9c      	ldr	r3, [pc, #624]	@ (8003894 <UART_SetConfig+0x310>)
 8003624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003626:	2203      	movs	r2, #3
 8003628:	4013      	ands	r3, r2
 800362a:	2b03      	cmp	r3, #3
 800362c:	d017      	beq.n	800365e <UART_SetConfig+0xda>
 800362e:	d81b      	bhi.n	8003668 <UART_SetConfig+0xe4>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d00a      	beq.n	800364a <UART_SetConfig+0xc6>
 8003634:	d818      	bhi.n	8003668 <UART_SetConfig+0xe4>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <UART_SetConfig+0xbc>
 800363a:	2b01      	cmp	r3, #1
 800363c:	d00a      	beq.n	8003654 <UART_SetConfig+0xd0>
 800363e:	e013      	b.n	8003668 <UART_SetConfig+0xe4>
 8003640:	231a      	movs	r3, #26
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e08f      	b.n	800376a <UART_SetConfig+0x1e6>
 800364a:	231a      	movs	r3, #26
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2202      	movs	r2, #2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e08a      	b.n	800376a <UART_SetConfig+0x1e6>
 8003654:	231a      	movs	r3, #26
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2204      	movs	r2, #4
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e085      	b.n	800376a <UART_SetConfig+0x1e6>
 800365e:	231a      	movs	r3, #26
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2208      	movs	r2, #8
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e080      	b.n	800376a <UART_SetConfig+0x1e6>
 8003668:	231a      	movs	r3, #26
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2210      	movs	r2, #16
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e07b      	b.n	800376a <UART_SetConfig+0x1e6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a88      	ldr	r2, [pc, #544]	@ (8003898 <UART_SetConfig+0x314>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d127      	bne.n	80036cc <UART_SetConfig+0x148>
 800367c:	4b85      	ldr	r3, [pc, #532]	@ (8003894 <UART_SetConfig+0x310>)
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	220c      	movs	r2, #12
 8003682:	4013      	ands	r3, r2
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d017      	beq.n	80036b8 <UART_SetConfig+0x134>
 8003688:	d81b      	bhi.n	80036c2 <UART_SetConfig+0x13e>
 800368a:	2b08      	cmp	r3, #8
 800368c:	d00a      	beq.n	80036a4 <UART_SetConfig+0x120>
 800368e:	d818      	bhi.n	80036c2 <UART_SetConfig+0x13e>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <UART_SetConfig+0x116>
 8003694:	2b04      	cmp	r3, #4
 8003696:	d00a      	beq.n	80036ae <UART_SetConfig+0x12a>
 8003698:	e013      	b.n	80036c2 <UART_SetConfig+0x13e>
 800369a:	231a      	movs	r3, #26
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e062      	b.n	800376a <UART_SetConfig+0x1e6>
 80036a4:	231a      	movs	r3, #26
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2202      	movs	r2, #2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e05d      	b.n	800376a <UART_SetConfig+0x1e6>
 80036ae:	231a      	movs	r3, #26
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e058      	b.n	800376a <UART_SetConfig+0x1e6>
 80036b8:	231a      	movs	r3, #26
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	2208      	movs	r2, #8
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e053      	b.n	800376a <UART_SetConfig+0x1e6>
 80036c2:	231a      	movs	r3, #26
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2210      	movs	r2, #16
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e04e      	b.n	800376a <UART_SetConfig+0x1e6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a72      	ldr	r2, [pc, #456]	@ (800389c <UART_SetConfig+0x318>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d127      	bne.n	8003726 <UART_SetConfig+0x1a2>
 80036d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003894 <UART_SetConfig+0x310>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	2230      	movs	r2, #48	@ 0x30
 80036dc:	4013      	ands	r3, r2
 80036de:	2b30      	cmp	r3, #48	@ 0x30
 80036e0:	d017      	beq.n	8003712 <UART_SetConfig+0x18e>
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0x198>
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d00a      	beq.n	80036fe <UART_SetConfig+0x17a>
 80036e8:	d818      	bhi.n	800371c <UART_SetConfig+0x198>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <UART_SetConfig+0x170>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d00a      	beq.n	8003708 <UART_SetConfig+0x184>
 80036f2:	e013      	b.n	800371c <UART_SetConfig+0x198>
 80036f4:	231a      	movs	r3, #26
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e035      	b.n	800376a <UART_SetConfig+0x1e6>
 80036fe:	231a      	movs	r3, #26
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e030      	b.n	800376a <UART_SetConfig+0x1e6>
 8003708:	231a      	movs	r3, #26
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e02b      	b.n	800376a <UART_SetConfig+0x1e6>
 8003712:	231a      	movs	r3, #26
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2208      	movs	r2, #8
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e026      	b.n	800376a <UART_SetConfig+0x1e6>
 800371c:	231a      	movs	r3, #26
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2210      	movs	r2, #16
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e021      	b.n	800376a <UART_SetConfig+0x1e6>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5d      	ldr	r2, [pc, #372]	@ (80038a0 <UART_SetConfig+0x31c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d104      	bne.n	800373a <UART_SetConfig+0x1b6>
 8003730:	231a      	movs	r3, #26
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
 8003738:	e017      	b.n	800376a <UART_SetConfig+0x1e6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a59      	ldr	r2, [pc, #356]	@ (80038a4 <UART_SetConfig+0x320>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d104      	bne.n	800374e <UART_SetConfig+0x1ca>
 8003744:	231a      	movs	r3, #26
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e00d      	b.n	800376a <UART_SetConfig+0x1e6>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a55      	ldr	r2, [pc, #340]	@ (80038a8 <UART_SetConfig+0x324>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d104      	bne.n	8003762 <UART_SetConfig+0x1de>
 8003758:	231a      	movs	r3, #26
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e003      	b.n	800376a <UART_SetConfig+0x1e6>
 8003762:	231a      	movs	r3, #26
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2210      	movs	r2, #16
 8003768:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	429a      	cmp	r2, r3
 8003774:	d000      	beq.n	8003778 <UART_SetConfig+0x1f4>
 8003776:	e065      	b.n	8003844 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8003778:	231a      	movs	r3, #26
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d015      	beq.n	80037ae <UART_SetConfig+0x22a>
 8003782:	dc18      	bgt.n	80037b6 <UART_SetConfig+0x232>
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00d      	beq.n	80037a4 <UART_SetConfig+0x220>
 8003788:	dc15      	bgt.n	80037b6 <UART_SetConfig+0x232>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x210>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d005      	beq.n	800379e <UART_SetConfig+0x21a>
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7ff fc4a 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8003798:	0003      	movs	r3, r0
 800379a:	617b      	str	r3, [r7, #20]
        break;
 800379c:	e012      	b.n	80037c4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800379e:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <UART_SetConfig+0x328>)
 80037a0:	617b      	str	r3, [r7, #20]
        break;
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a4:	f7ff fbb6 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 80037a8:	0003      	movs	r3, r0
 80037aa:	617b      	str	r3, [r7, #20]
        break;
 80037ac:	e00a      	b.n	80037c4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e006      	b.n	80037c4 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ba:	231b      	movs	r3, #27
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
        break;
 80037c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <UART_SetConfig+0x248>
 80037ca:	e0a6      	b.n	800391a <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d0:	4b37      	ldr	r3, [pc, #220]	@ (80038b0 <UART_SetConfig+0x32c>)
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	5ad3      	ldrh	r3, [r2, r3]
 80037d6:	0019      	movs	r1, r3
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7fc fc99 	bl	8000110 <__udivsi3>
 80037de:	0003      	movs	r3, r0
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	18d2      	adds	r2, r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f7fc fc8d 	bl	8000110 <__udivsi3>
 80037f6:	0003      	movs	r3, r0
 80037f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d91c      	bls.n	800383a <UART_SetConfig+0x2b6>
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	429a      	cmp	r2, r3
 8003808:	d217      	bcs.n	800383a <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	b29a      	uxth	r2, r3
 800380e:	200e      	movs	r0, #14
 8003810:	183b      	adds	r3, r7, r0
 8003812:	210f      	movs	r1, #15
 8003814:	438a      	bics	r2, r1
 8003816:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	b299      	uxth	r1, r3
 8003824:	183b      	adds	r3, r7, r0
 8003826:	183a      	adds	r2, r7, r0
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	183a      	adds	r2, r7, r0
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e06f      	b.n	800391a <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800383a:	231b      	movs	r3, #27
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e06a      	b.n	800391a <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003844:	231a      	movs	r3, #26
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d015      	beq.n	800387a <UART_SetConfig+0x2f6>
 800384e:	dc31      	bgt.n	80038b4 <UART_SetConfig+0x330>
 8003850:	2b04      	cmp	r3, #4
 8003852:	d00d      	beq.n	8003870 <UART_SetConfig+0x2ec>
 8003854:	dc2e      	bgt.n	80038b4 <UART_SetConfig+0x330>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0x2dc>
 800385a:	2b02      	cmp	r3, #2
 800385c:	d005      	beq.n	800386a <UART_SetConfig+0x2e6>
 800385e:	e029      	b.n	80038b4 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7ff fbe4 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8003864:	0003      	movs	r3, r0
 8003866:	617b      	str	r3, [r7, #20]
        break;
 8003868:	e02b      	b.n	80038c2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <UART_SetConfig+0x328>)
 800386c:	617b      	str	r3, [r7, #20]
        break;
 800386e:	e028      	b.n	80038c2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003870:	f7ff fb50 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8003874:	0003      	movs	r3, r0
 8003876:	617b      	str	r3, [r7, #20]
        break;
 8003878:	e023      	b.n	80038c2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	617b      	str	r3, [r7, #20]
        break;
 8003880:	e01f      	b.n	80038c2 <UART_SetConfig+0x33e>
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	cfff69f3 	.word	0xcfff69f3
 8003888:	ffffcfff 	.word	0xffffcfff
 800388c:	11fff4ff 	.word	0x11fff4ff
 8003890:	40013800 	.word	0x40013800
 8003894:	40021000 	.word	0x40021000
 8003898:	40004400 	.word	0x40004400
 800389c:	40004800 	.word	0x40004800
 80038a0:	40004c00 	.word	0x40004c00
 80038a4:	40005000 	.word	0x40005000
 80038a8:	40013c00 	.word	0x40013c00
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	08005e74 	.word	0x08005e74
      default:
        pclk = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038b8:	231b      	movs	r3, #27
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
        break;
 80038c0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d028      	beq.n	800391a <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <UART_SetConfig+0x3c0>)
 80038ce:	0052      	lsls	r2, r2, #1
 80038d0:	5ad3      	ldrh	r3, [r2, r3]
 80038d2:	0019      	movs	r1, r3
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fc fc1b 	bl	8000110 <__udivsi3>
 80038da:	0003      	movs	r3, r0
 80038dc:	001a      	movs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	18d2      	adds	r2, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0019      	movs	r1, r3
 80038ec:	0010      	movs	r0, r2
 80038ee:	f7fc fc0f 	bl	8000110 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d90a      	bls.n	8003912 <UART_SetConfig+0x38e>
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	025b      	lsls	r3, r3, #9
 8003902:	429a      	cmp	r2, r3
 8003904:	d205      	bcs.n	8003912 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e003      	b.n	800391a <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8003912:	231b      	movs	r3, #27
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	226a      	movs	r2, #106	@ 0x6a
 800391e:	2101      	movs	r1, #1
 8003920:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2268      	movs	r2, #104	@ 0x68
 8003926:	2101      	movs	r1, #1
 8003928:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003936:	231b      	movs	r3, #27
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b008      	add	sp, #32
 8003942:	bd80      	pop	{r7, pc}
 8003944:	08005e74 	.word	0x08005e74

08003948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	2208      	movs	r2, #8
 8003956:	4013      	ands	r3, r2
 8003958:	d00b      	beq.n	8003972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a4a      	ldr	r2, [pc, #296]	@ (8003a8c <UART_AdvFeatureConfig+0x144>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	d00b      	beq.n	8003994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a43      	ldr	r2, [pc, #268]	@ (8003a90 <UART_AdvFeatureConfig+0x148>)
 8003984:	4013      	ands	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d00b      	beq.n	80039b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003a94 <UART_AdvFeatureConfig+0x14c>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	2204      	movs	r2, #4
 80039bc:	4013      	ands	r3, r2
 80039be:	d00b      	beq.n	80039d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a34      	ldr	r2, [pc, #208]	@ (8003a98 <UART_AdvFeatureConfig+0x150>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a9c <UART_AdvFeatureConfig+0x154>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	2220      	movs	r2, #32
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	4a25      	ldr	r2, [pc, #148]	@ (8003aa0 <UART_AdvFeatureConfig+0x158>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	0019      	movs	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	2240      	movs	r2, #64	@ 0x40
 8003a22:	4013      	ands	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <UART_AdvFeatureConfig+0x15c>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	035b      	lsls	r3, r3, #13
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10b      	bne.n	8003a62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <UART_AdvFeatureConfig+0x160>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a66:	2280      	movs	r2, #128	@ 0x80
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a0e      	ldr	r2, [pc, #56]	@ (8003aac <UART_AdvFeatureConfig+0x164>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	ffff7fff 	.word	0xffff7fff
 8003a90:	fffdffff 	.word	0xfffdffff
 8003a94:	fffeffff 	.word	0xfffeffff
 8003a98:	fffbffff 	.word	0xfffbffff
 8003a9c:	ffffefff 	.word	0xffffefff
 8003aa0:	ffffdfff 	.word	0xffffdfff
 8003aa4:	ffefffff 	.word	0xffefffff
 8003aa8:	ff9fffff 	.word	0xff9fffff
 8003aac:	fff7ffff 	.word	0xfff7ffff

08003ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b092      	sub	sp, #72	@ 0x48
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2290      	movs	r2, #144	@ 0x90
 8003abc:	2100      	movs	r1, #0
 8003abe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ac0:	f7fd fcd8 	bl	8001474 <HAL_GetTick>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2208      	movs	r2, #8
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d12d      	bne.n	8003b32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	0391      	lsls	r1, r2, #14
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4a47      	ldr	r2, [pc, #284]	@ (8003bfc <UART_CheckIdleState+0x14c>)
 8003ae0:	9200      	str	r2, [sp, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f000 f88e 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d022      	beq.n	8003b32 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aec:	f3ef 8310 	mrs	r3, PRIMASK
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003af6:	2301      	movs	r3, #1
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	f383 8810 	msr	PRIMASK, r3
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	438a      	bics	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b18:	f383 8810 	msr	PRIMASK, r3
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2288      	movs	r2, #136	@ 0x88
 8003b22:	2120      	movs	r1, #32
 8003b24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2284      	movs	r2, #132	@ 0x84
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e060      	b.n	8003bf4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d146      	bne.n	8003bce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b42:	2280      	movs	r2, #128	@ 0x80
 8003b44:	03d1      	lsls	r1, r2, #15
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <UART_CheckIdleState+0x14c>)
 8003b4a:	9200      	str	r2, [sp, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f000 f859 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d03b      	beq.n	8003bce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b56:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b60:	2301      	movs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4922      	ldr	r1, [pc, #136]	@ (8003c00 <UART_CheckIdleState+0x150>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f383 8810 	msr	PRIMASK, r3
}
 8003b86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b88:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b92:	2301      	movs	r3, #1
 8003b94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	438a      	bics	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	228c      	movs	r2, #140	@ 0x8c
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2284      	movs	r2, #132	@ 0x84
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e012      	b.n	8003bf4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2288      	movs	r2, #136	@ 0x88
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	228c      	movs	r2, #140	@ 0x8c
 8003bda:	2120      	movs	r1, #32
 8003bdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2284      	movs	r2, #132	@ 0x84
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b010      	add	sp, #64	@ 0x40
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	01ffffff 	.word	0x01ffffff
 8003c00:	fffffedf 	.word	0xfffffedf

08003c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	1dfb      	adds	r3, r7, #7
 8003c12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c14:	e051      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	d04e      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fd fc2a 	bl	8001474 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e051      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d03b      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b80      	cmp	r3, #128	@ 0x80
 8003c46:	d038      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b40      	cmp	r3, #64	@ 0x40
 8003c4c:	d035      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d111      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2208      	movs	r2, #8
 8003c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 f83c 	bl	8003ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2290      	movs	r2, #144	@ 0x90
 8003c70:	2108      	movs	r1, #8
 8003c72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2284      	movs	r2, #132	@ 0x84
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e02c      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	2380      	movs	r3, #128	@ 0x80
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d112      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2280      	movs	r2, #128	@ 0x80
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f81f 	bl	8003ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2290      	movs	r2, #144	@ 0x90
 8003caa:	2120      	movs	r1, #32
 8003cac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2284      	movs	r2, #132	@ 0x84
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	425a      	negs	r2, r3
 8003cca:	4153      	adcs	r3, r2
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	001a      	movs	r2, r3
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d09e      	beq.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	@ 0x38
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cf2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4926      	ldr	r1, [pc, #152]	@ (8003da8 <UART_EndRxTransfer+0xc4>)
 8003d0e:	400a      	ands	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d22:	623b      	str	r3, [r7, #32]
  return(result);
 8003d24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d28:	2301      	movs	r3, #1
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	491b      	ldr	r1, [pc, #108]	@ (8003dac <UART_EndRxTransfer+0xc8>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d118      	bne.n	8003d8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d58:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d62:	2301      	movs	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f383 8810 	msr	PRIMASK, r3
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2110      	movs	r1, #16
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f383 8810 	msr	PRIMASK, r3
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	228c      	movs	r2, #140	@ 0x8c
 8003d8e:	2120      	movs	r1, #32
 8003d90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b00e      	add	sp, #56	@ 0x38
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	fffffedf 	.word	0xfffffedf
 8003dac:	effffffe 	.word	0xeffffffe

08003db0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2284      	movs	r2, #132	@ 0x84
 8003dbc:	5c9b      	ldrb	r3, [r3, r2]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e027      	b.n	8003e16 <HAL_UARTEx_DisableFifoMode+0x66>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2284      	movs	r2, #132	@ 0x84
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2288      	movs	r2, #136	@ 0x88
 8003dd2:	2124      	movs	r1, #36	@ 0x24
 8003dd4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	438a      	bics	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2288      	movs	r2, #136	@ 0x88
 8003e08:	2120      	movs	r1, #32
 8003e0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	@ 0x84
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	dfffffff 	.word	0xdfffffff

08003e24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2284      	movs	r2, #132	@ 0x84
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e02e      	b.n	8003e9a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2284      	movs	r2, #132	@ 0x84
 8003e40:	2101      	movs	r1, #1
 8003e42:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2288      	movs	r2, #136	@ 0x88
 8003e48:	2124      	movs	r1, #36	@ 0x24
 8003e4a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	438a      	bics	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	08d9      	lsrs	r1, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f854 	bl	8003f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2288      	movs	r2, #136	@ 0x88
 8003e8c:	2120      	movs	r1, #32
 8003e8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2284      	movs	r2, #132	@ 0x84
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2284      	movs	r2, #132	@ 0x84
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e02f      	b.n	8003f1c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2284      	movs	r2, #132	@ 0x84
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2288      	movs	r2, #136	@ 0x88
 8003ec8:	2124      	movs	r1, #36	@ 0x24
 8003eca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4a0e      	ldr	r2, [pc, #56]	@ (8003f24 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 f813 	bl	8003f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2288      	movs	r2, #136	@ 0x88
 8003f0e:	2120      	movs	r1, #32
 8003f10:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2284      	movs	r2, #132	@ 0x84
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	f1ffffff 	.word	0xf1ffffff

08003f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	226a      	movs	r2, #106	@ 0x6a
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2268      	movs	r2, #104	@ 0x68
 8003f44:	2101      	movs	r1, #1
 8003f46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f48:	e043      	b.n	8003fd2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f4a:	260f      	movs	r6, #15
 8003f4c:	19bb      	adds	r3, r7, r6
 8003f4e:	2208      	movs	r2, #8
 8003f50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f52:	200e      	movs	r0, #14
 8003f54:	183b      	adds	r3, r7, r0
 8003f56:	2208      	movs	r2, #8
 8003f58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	0e5b      	lsrs	r3, r3, #25
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	240d      	movs	r4, #13
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	2107      	movs	r1, #7
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	0f5b      	lsrs	r3, r3, #29
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	250c      	movs	r5, #12
 8003f7a:	197b      	adds	r3, r7, r5
 8003f7c:	2107      	movs	r1, #7
 8003f7e:	400a      	ands	r2, r1
 8003f80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f82:	183b      	adds	r3, r7, r0
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	197a      	adds	r2, r7, r5
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	4914      	ldr	r1, [pc, #80]	@ (8003fdc <UARTEx_SetNbDataToProcess+0xb4>)
 8003f8c:	5c8a      	ldrb	r2, [r1, r2]
 8003f8e:	435a      	muls	r2, r3
 8003f90:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f92:	197b      	adds	r3, r7, r5
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4a12      	ldr	r2, [pc, #72]	@ (8003fe0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	f7fc f942 	bl	8000224 <__divsi3>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	226a      	movs	r2, #106	@ 0x6a
 8003fa8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003faa:	19bb      	adds	r3, r7, r6
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	193a      	adds	r2, r7, r4
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	490a      	ldr	r1, [pc, #40]	@ (8003fdc <UARTEx_SetNbDataToProcess+0xb4>)
 8003fb4:	5c8a      	ldrb	r2, [r1, r2]
 8003fb6:	435a      	muls	r2, r3
 8003fb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4a08      	ldr	r2, [pc, #32]	@ (8003fe0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	f7fc f92e 	bl	8000224 <__divsi3>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	b299      	uxth	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2268      	movs	r2, #104	@ 0x68
 8003fd0:	5299      	strh	r1, [r3, r2]
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b005      	add	sp, #20
 8003fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	08005e8c 	.word	0x08005e8c
 8003fe0:	08005e94 	.word	0x08005e94

08003fe4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003fea:	4b25      	ldr	r3, [pc, #148]	@ (8004080 <_DoInit+0x9c>)
 8003fec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	22a8      	movs	r2, #168	@ 0xa8
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fd6e 	bl	8004ad6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2203      	movs	r2, #3
 8004004:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <_DoInit+0xa0>)
 800400a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4a1e      	ldr	r2, [pc, #120]	@ (8004088 <_DoInit+0xa4>)
 8004010:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2280      	movs	r2, #128	@ 0x80
 8004016:	00d2      	lsls	r2, r2, #3
 8004018:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2200      	movs	r2, #0
 800401e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <_DoInit+0xa0>)
 8004030:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	4a15      	ldr	r2, [pc, #84]	@ (800408c <_DoInit+0xa8>)
 8004036:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2210      	movs	r2, #16
 800403c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004050:	2300      	movs	r3, #0
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e00c      	b.n	8004070 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	220f      	movs	r2, #15
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	4a0c      	ldr	r2, [pc, #48]	@ (8004090 <_DoInit+0xac>)
 800405e:	5cd1      	ldrb	r1, [r2, r3]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	18d3      	adds	r3, r2, r3
 8004066:	1c0a      	adds	r2, r1, #0
 8004068:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3301      	adds	r3, #1
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d9ef      	bls.n	8004056 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	46c0      	nop			@ (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000188 	.word	0x20000188
 8004084:	08005400 	.word	0x08005400
 8004088:	20000230 	.word	0x20000230
 800408c:	20000630 	.word	0x20000630
 8004090:	08005e9c 	.word	0x08005e9c

08004094 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	@ 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80040a0:	2300      	movs	r3, #0
 80040a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	617b      	str	r3, [r7, #20]
    if (RdOff > WrOff) {
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d905      	bls.n	80040c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c2:	e007      	b.n	80040d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	1acb      	subs	r3, r1, r3
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	4293      	cmp	r3, r2
 80040e0:	d900      	bls.n	80040e4 <_WriteBlocking+0x50>
 80040e2:	0013      	movs	r3, r2
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80040e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d900      	bls.n	80040f0 <_WriteBlocking+0x5c>
 80040ee:	0013      	movs	r3, r2
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	18d3      	adds	r3, r2, r3
 80040fa:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    NumBytesWritten += NumBytesToWrite;
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	623b      	str	r3, [r7, #32]
    NumBytes        -= NumBytesToWrite;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	61fb      	str	r3, [r7, #28]
    while (NumBytesToWrite--) {
 8004114:	e007      	b.n	8004126 <_WriteBlocking+0x92>
      *pDst++ = *pBuffer++;
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	1c53      	adds	r3, r2, #1
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	61b9      	str	r1, [r7, #24]
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
    while (NumBytesToWrite--) {
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	627a      	str	r2, [r7, #36]	@ 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f2      	bne.n	8004116 <_WriteBlocking+0x82>
    NumBytesWritten += NumBytesToWrite;
    pBuffer         += NumBytesToWrite;
    NumBytes        -= NumBytesToWrite;
    WrOff           += NumBytesToWrite;
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d101      	bne.n	800413e <_WriteBlocking+0xaa>
      WrOff = 0u;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1af      	bne.n	80040aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 800414a:	6a3b      	ldr	r3, [r7, #32]
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	b00a      	add	sp, #40	@ 0x28
 8004152:	bd80      	pop	{r7, pc}

08004154 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	617b      	str	r3, [r7, #20]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	613b      	str	r3, [r7, #16]
  if (Rem > NumBytes) {
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d91a      	bls.n	80041ae <_WriteNoCheck+0x5a>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	18d3      	adds	r3, r2, r3
 8004180:	61bb      	str	r3, [r7, #24]
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
    WrOff += NumBytes;
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    while (NumBytes--) {
 800418a:	e007      	b.n	800419c <_WriteNoCheck+0x48>
      *pDst++ = *pData++;
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	1c53      	adds	r3, r2, #1
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	61b9      	str	r1, [r7, #24]
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	701a      	strb	r2, [r3, #0]
    while (NumBytes--) {
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f2      	bne.n	800418c <_WriteNoCheck+0x38>
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80041ac:	e02e      	b.n	800420c <_WriteNoCheck+0xb8>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = Rem;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 80041bc:	e007      	b.n	80041ce <_WriteNoCheck+0x7a>
      *pDst++ = *pData++;
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	1c53      	adds	r3, r2, #1
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	61b9      	str	r1, [r7, #24]
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	61fa      	str	r2, [r7, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f2      	bne.n	80041be <_WriteNoCheck+0x6a>
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
    NumBytesAtOnce = NumBytes - Rem;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	61fb      	str	r3, [r7, #28]
    while (NumBytesAtOnce--) {
 80041e6:	e007      	b.n	80041f8 <_WriteNoCheck+0xa4>
      *pDst++ = *pData++;
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	1c53      	adds	r3, r2, #1
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	61b9      	str	r1, [r7, #24]
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
    while (NumBytesAtOnce--) {
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	61fa      	str	r2, [r7, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f2      	bne.n	80041e8 <_WriteNoCheck+0x94>
    pRing->WrOff = NumBytes - Rem;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	60da      	str	r2, [r3, #12]
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b008      	add	sp, #32
 8004212:	bd80      	pop	{r7, pc}

08004214 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d808      	bhi.n	8004242 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	18d3      	adds	r3, r2, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e004      	b.n	800424c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800424c:	697b      	ldr	r3, [r7, #20]
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b006      	add	sp, #24
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	0013      	movs	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	189b      	adds	r3, r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <SEGGER_RTT_WriteNoLock+0xac>)
 8004276:	189b      	adds	r3, r3, r2
 8004278:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d02e      	beq.n	80042e0 <SEGGER_RTT_WriteNoLock+0x88>
 8004282:	d836      	bhi.n	80042f2 <SEGGER_RTT_WriteNoLock+0x9a>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <SEGGER_RTT_WriteNoLock+0x36>
 8004288:	2b01      	cmp	r3, #1
 800428a:	d016      	beq.n	80042ba <SEGGER_RTT_WriteNoLock+0x62>
 800428c:	e031      	b.n	80042f2 <SEGGER_RTT_WriteNoLock+0x9a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff ffbf 	bl	8004214 <_GetAvailWriteSpace>
 8004296:	0003      	movs	r3, r0
 8004298:	613b      	str	r3, [r7, #16]
    if (Avail < NumBytes) {
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d202      	bcs.n	80042a8 <SEGGER_RTT_WriteNoLock+0x50>
      Status = 0u;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042a6:	e027      	b.n	80042f8 <SEGGER_RTT_WriteNoLock+0xa0>
      Status = NumBytes;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff4e 	bl	8004154 <_WriteNoCheck>
    break;
 80042b8:	e01e      	b.n	80042f8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff ffa9 	bl	8004214 <_GetAvailWriteSpace>
 80042c2:	0003      	movs	r3, r0
 80042c4:	613b      	str	r3, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d900      	bls.n	80042d0 <SEGGER_RTT_WriteNoLock+0x78>
 80042ce:	0013      	movs	r3, r2
 80042d0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	69b9      	ldr	r1, [r7, #24]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff ff3b 	bl	8004154 <_WriteNoCheck>
    break;
 80042de:	e00b      	b.n	80042f8 <SEGGER_RTT_WriteNoLock+0xa0>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff fed4 	bl	8004094 <_WriteBlocking>
 80042ec:	0003      	movs	r3, r0
 80042ee:	61fb      	str	r3, [r7, #28]
    break;
 80042f0:	e002      	b.n	80042f8 <SEGGER_RTT_WriteNoLock+0xa0>
  default:
    Status = 0u;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    break;
 80042f6:	46c0      	nop			@ (mov r8, r8)
  }
  //
  // Finish up.
  //
  return Status;
 80042f8:	69fb      	ldr	r3, [r7, #28]
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b008      	add	sp, #32
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	20000188 	.word	0x20000188

08004308 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <SEGGER_RTT_Write+0x4c>)
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b53      	cmp	r3, #83	@ 0x53
 8004320:	d001      	beq.n	8004326 <SEGGER_RTT_Write+0x1e>
 8004322:	f7ff fe5f 	bl	8003fe4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	2101      	movs	r1, #1
 800432c:	f381 8810 	msr	PRIMASK, r1
 8004330:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff ff8d 	bl	8004258 <SEGGER_RTT_WriteNoLock>
 800433e:	0003      	movs	r3, r0
 8004340:	617b      	str	r3, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f383 8810 	msr	PRIMASK, r3
  return Status;
 8004348:	697b      	ldr	r3, [r7, #20]
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b008      	add	sp, #32
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	20000188 	.word	0x20000188

08004358 <SEGGER_RTT_WriteString>:
*  Notes
*    (1) Data is stored according to buffer flags.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	0018      	movs	r0, r3
 8004366:	f7fb fecb 	bl	8000100 <strlen>
 800436a:	0003      	movs	r3, r0
 800436c:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff ffc7 	bl	8004308 <SEGGER_RTT_Write>
 800437a:	0003      	movs	r3, r0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b004      	add	sp, #16
 8004382:	bd80      	pop	{r7, pc}

08004384 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  _DoInit();
 8004388:	f7ff fe2c 	bl	8003fe4 <_DoInit>
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	000a      	movs	r2, r1
 800439c:	1cfb      	adds	r3, r7, #3
 800439e:	701a      	strb	r2, [r3, #0]
  unsigned Cnt;

  Cnt = p->Cnt;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d80f      	bhi.n	80043d2 <_StoreChar+0x40>
    *(p->pBuffer + Cnt) = c;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	1cfa      	adds	r2, r7, #3
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d115      	bne.n	800440a <_StoreChar+0x78>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6918      	ldr	r0, [r3, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	001a      	movs	r2, r3
 80043ec:	f7ff ff8c 	bl	8004308 <SEGGER_RTT_Write>
 80043f0:	0002      	movs	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d004      	beq.n	8004404 <_StoreChar+0x72>
      p->ReturnValue = -1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	4252      	negs	r2, r2
 8004400:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8004402:	e002      	b.n	800440a <_StoreChar+0x78>
      p->Cnt = 0u;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	@ 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004426:	2301      	movs	r3, #1
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800442e:	e008      	b.n	8004442 <_PrintUnsigned+0x2e>
    Number = (Number / Base);
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	6a38      	ldr	r0, [r7, #32]
 8004434:	f7fb fe6c 	bl	8000110 <__udivsi3>
 8004438:	0003      	movs	r3, r0
 800443a:	623b      	str	r3, [r7, #32]
    Width++;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d2f2      	bcs.n	8004430 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	429a      	cmp	r2, r3
 8004450:	d901      	bls.n	8004456 <_PrintUnsigned+0x42>
    Width = NumDigits;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	d12b      	bne.n	80044b6 <_PrintUnsigned+0xa2>
    if (FieldWidth != 0u) {
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	2b00      	cmp	r3, #0
 8004462:	d028      	beq.n	80044b6 <_PrintUnsigned+0xa2>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	d007      	beq.n	800447c <_PrintUnsigned+0x68>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <_PrintUnsigned+0x68>
        c = '0';
 8004472:	231b      	movs	r3, #27
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2230      	movs	r2, #48	@ 0x30
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	e003      	b.n	8004484 <_PrintUnsigned+0x70>
      } else {
        c = ' ';
 800447c:	231b      	movs	r3, #27
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2220      	movs	r2, #32
 8004482:	701a      	strb	r2, [r3, #0]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004484:	e00e      	b.n	80044a4 <_PrintUnsigned+0x90>
        FieldWidth--;
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	3b01      	subs	r3, #1
 800448a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800448c:	231b      	movs	r3, #27
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff ff7b 	bl	8004392 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db07      	blt.n	80044b4 <_PrintUnsigned+0xa0>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <_PrintUnsigned+0xa2>
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d3e9      	bcc.n	8004486 <_PrintUnsigned+0x72>
 80044b2:	e000      	b.n	80044b6 <_PrintUnsigned+0xa2>
          break;
 80044b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db57      	blt.n	800456e <_PrintUnsigned+0x15a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d903      	bls.n	80044cc <_PrintUnsigned+0xb8>
        NumDigits--;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	e00a      	b.n	80044e2 <_PrintUnsigned+0xce>
      } else {
        Div = v / Digit;
 80044cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ce:	68b8      	ldr	r0, [r7, #8]
 80044d0:	f7fb fe1e 	bl	8000110 <__udivsi3>
 80044d4:	0003      	movs	r3, r0
 80044d6:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d200      	bcs.n	80044e2 <_PrintUnsigned+0xce>
          break;
 80044e0:	e004      	b.n	80044ec <_PrintUnsigned+0xd8>
        }
      }
      Digit *= Base;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4353      	muls	r3, r2
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044ea:	e7e8      	b.n	80044be <_PrintUnsigned+0xaa>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80044ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ee:	68b8      	ldr	r0, [r7, #8]
 80044f0:	f7fb fe0e 	bl	8000110 <__udivsi3>
 80044f4:	0003      	movs	r3, r0
 80044f6:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	4353      	muls	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004504:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <_PrintUnsigned+0x164>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	18d3      	adds	r3, r2, r3
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff ff3e 	bl	8004392 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db09      	blt.n	8004532 <_PrintUnsigned+0x11e>
        break;
      }
      Digit /= Base;
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004522:	f7fb fdf5 	bl	8000110 <__udivsi3>
 8004526:	0003      	movs	r3, r0
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1dd      	bne.n	80044ec <_PrintUnsigned+0xd8>
 8004530:	e000      	b.n	8004534 <_PrintUnsigned+0x120>
        break;
 8004532:	46c0      	nop			@ (mov r8, r8)
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004536:	2201      	movs	r2, #1
 8004538:	4013      	ands	r3, r2
 800453a:	d018      	beq.n	800456e <_PrintUnsigned+0x15a>
      if (FieldWidth != 0u) {
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	2b00      	cmp	r3, #0
 8004540:	d015      	beq.n	800456e <_PrintUnsigned+0x15a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004542:	e00b      	b.n	800455c <_PrintUnsigned+0x148>
          FieldWidth--;
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	3b01      	subs	r3, #1
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2120      	movs	r1, #32
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff ff1f 	bl	8004392 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db07      	blt.n	800456c <_PrintUnsigned+0x158>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <_PrintUnsigned+0x15a>
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	429a      	cmp	r2, r3
 8004568:	d3ec      	bcc.n	8004544 <_PrintUnsigned+0x130>
          }
        }
      }
    }
  }
}
 800456a:	e000      	b.n	800456e <_PrintUnsigned+0x15a>
            break;
 800456c:	46c0      	nop			@ (mov r8, r8)
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b00a      	add	sp, #40	@ 0x28
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	08005f34 	.word	0x08005f34

0800457c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b089      	sub	sp, #36	@ 0x24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	17da      	asrs	r2, r3, #31
 800458e:	189b      	adds	r3, r3, r2
 8004590:	4053      	eors	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004598:	e009      	b.n	80045ae <_PrintInt+0x32>
    Number = (Number / (int)Base);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0019      	movs	r1, r3
 800459e:	6938      	ldr	r0, [r7, #16]
 80045a0:	f7fb fe40 	bl	8000224 <__divsi3>
 80045a4:	0003      	movs	r3, r0
 80045a6:	613b      	str	r3, [r7, #16]
    Width++;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	daf1      	bge.n	800459a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d901      	bls.n	80045c2 <_PrintInt+0x46>
    Width = NumDigits;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <_PrintInt+0x60>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	db03      	blt.n	80045d6 <_PrintInt+0x5a>
 80045ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d0:	2204      	movs	r2, #4
 80045d2:	4013      	ands	r3, r2
 80045d4:	d002      	beq.n	80045dc <_PrintInt+0x60>
    FieldWidth--;
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80045dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045de:	2202      	movs	r2, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d002      	beq.n	80045ea <_PrintInt+0x6e>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01c      	beq.n	8004624 <_PrintInt+0xa8>
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d118      	bne.n	8004624 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045f8:	e00b      	b.n	8004612 <_PrintInt+0x96>
        FieldWidth--;
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        _StoreChar(pBufferDesc, ' ');
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2120      	movs	r1, #32
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fec4 	bl	8004392 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db07      	blt.n	8004622 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <_PrintInt+0xa8>
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	429a      	cmp	r2, r3
 800461e:	d3ec      	bcc.n	80045fa <_PrintInt+0x7e>
 8004620:	e000      	b.n	8004624 <_PrintInt+0xa8>
          break;
 8004622:	46c0      	nop			@ (mov r8, r8)
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db4b      	blt.n	80046c4 <_PrintInt+0x148>
    if (v < 0) {
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da08      	bge.n	8004644 <_PrintInt+0xc8>
      v = -v;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	425b      	negs	r3, r3
 8004636:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	212d      	movs	r1, #45	@ 0x2d
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff fea8 	bl	8004392 <_StoreChar>
 8004642:	e008      	b.n	8004656 <_PrintInt+0xda>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	2204      	movs	r2, #4
 8004648:	4013      	ands	r3, r2
 800464a:	d004      	beq.n	8004656 <_PrintInt+0xda>
      _StoreChar(pBufferDesc, '+');
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	212b      	movs	r1, #43	@ 0x2b
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff fe9e 	bl	8004392 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	db32      	blt.n	80046c4 <_PrintInt+0x148>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	2202      	movs	r2, #2
 8004662:	4013      	ands	r3, r2
 8004664:	d01f      	beq.n	80046a6 <_PrintInt+0x12a>
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d11b      	bne.n	80046a6 <_PrintInt+0x12a>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d118      	bne.n	80046a6 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800467a:	e00b      	b.n	8004694 <_PrintInt+0x118>
            FieldWidth--;
 800467c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
            _StoreChar(pBufferDesc, '0');
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2130      	movs	r1, #48	@ 0x30
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff fe83 	bl	8004392 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	db07      	blt.n	80046a4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <_PrintInt+0x12a>
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	429a      	cmp	r2, r3
 80046a0:	d3ec      	bcc.n	800467c <_PrintInt+0x100>
 80046a2:	e000      	b.n	80046a6 <_PrintInt+0x12a>
              break;
 80046a4:	46c0      	nop			@ (mov r8, r8)
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	db0a      	blt.n	80046c4 <_PrintInt+0x148>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	683c      	ldr	r4, [r7, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	0023      	movs	r3, r4
 80046c0:	f7ff fea8 	bl	8004414 <_PrintUnsigned>
      }
    }
  }
}
 80046c4:	46c0      	nop			@ (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b007      	add	sp, #28
 80046ca:	bd90      	pop	{r4, r7, pc}

080046cc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b0a5      	sub	sp, #148	@ 0x94
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80046d8:	2154      	movs	r1, #84	@ 0x54
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	2214      	movs	r2, #20
 80046de:	18ba      	adds	r2, r7, r2
 80046e0:	601a      	str	r2, [r3, #0]
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2240      	movs	r2, #64	@ 0x40
 80046e6:	605a      	str	r2, [r3, #4]
  BufferDesc.Cnt            = 0u;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]
  BufferDesc.RTTBufferIndex = BufferIndex;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  BufferDesc.ReturnValue    = 0;
 80046f4:	187b      	adds	r3, r7, r1
 80046f6:	2200      	movs	r2, #0
 80046f8:	60da      	str	r2, [r3, #12]

  do {
    c = *sFormat;
 80046fa:	2187      	movs	r1, #135	@ 0x87
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	701a      	strb	r2, [r3, #0]
    sFormat++;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3301      	adds	r3, #1
 8004708:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 800470a:	187b      	adds	r3, r7, r1
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d100      	bne.n	8004714 <SEGGER_RTT_vprintf+0x48>
 8004712:	e1a2      	b.n	8004a5a <SEGGER_RTT_vprintf+0x38e>
      break;
    }
    if (c == '%') {
 8004714:	187b      	adds	r3, r7, r1
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b25      	cmp	r3, #37	@ 0x25
 800471a:	d000      	beq.n	800471e <SEGGER_RTT_vprintf+0x52>
 800471c:	e18d      	b.n	8004a3a <SEGGER_RTT_vprintf+0x36e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800471e:	2300      	movs	r3, #0
 8004720:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	2280      	movs	r2, #128	@ 0x80
 8004726:	18ba      	adds	r2, r7, r2
 8004728:	6013      	str	r3, [r2, #0]
      do {
        c = *sFormat;
 800472a:	2187      	movs	r1, #135	@ 0x87
 800472c:	187b      	adds	r3, r7, r1
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	701a      	strb	r2, [r3, #0]
        switch (c) {
 8004734:	187b      	adds	r3, r7, r1
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b30      	cmp	r3, #48	@ 0x30
 800473a:	d010      	beq.n	800475e <SEGGER_RTT_vprintf+0x92>
 800473c:	dc27      	bgt.n	800478e <SEGGER_RTT_vprintf+0xc2>
 800473e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004740:	d005      	beq.n	800474e <SEGGER_RTT_vprintf+0x82>
 8004742:	dc24      	bgt.n	800478e <SEGGER_RTT_vprintf+0xc2>
 8004744:	2b23      	cmp	r3, #35	@ 0x23
 8004746:	d01a      	beq.n	800477e <SEGGER_RTT_vprintf+0xb2>
 8004748:	2b2b      	cmp	r3, #43	@ 0x2b
 800474a:	d010      	beq.n	800476e <SEGGER_RTT_vprintf+0xa2>
 800474c:	e01f      	b.n	800478e <SEGGER_RTT_vprintf+0xc2>
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800474e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004750:	2201      	movs	r2, #1
 8004752:	4313      	orrs	r3, r2
 8004754:	677b      	str	r3, [r7, #116]	@ 0x74
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3301      	adds	r3, #1
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	e01c      	b.n	8004798 <SEGGER_RTT_vprintf+0xcc>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800475e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004760:	2202      	movs	r2, #2
 8004762:	4313      	orrs	r3, r2
 8004764:	677b      	str	r3, [r7, #116]	@ 0x74
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3301      	adds	r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	e014      	b.n	8004798 <SEGGER_RTT_vprintf+0xcc>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800476e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004770:	2204      	movs	r2, #4
 8004772:	4313      	orrs	r3, r2
 8004774:	677b      	str	r3, [r7, #116]	@ 0x74
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3301      	adds	r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	e00c      	b.n	8004798 <SEGGER_RTT_vprintf+0xcc>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800477e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004780:	2208      	movs	r2, #8
 8004782:	4313      	orrs	r3, r2
 8004784:	677b      	str	r3, [r7, #116]	@ 0x74
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3301      	adds	r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	e004      	b.n	8004798 <SEGGER_RTT_vprintf+0xcc>
        default:  v = 0; break;
 800478e:	2300      	movs	r3, #0
 8004790:	2280      	movs	r2, #128	@ 0x80
 8004792:	18ba      	adds	r2, r7, r2
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	46c0      	nop			@ (mov r8, r8)
        }
      } while (v);
 8004798:	2380      	movs	r3, #128	@ 0x80
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1c3      	bne.n	800472a <SEGGER_RTT_vprintf+0x5e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80047a2:	2300      	movs	r3, #0
 80047a4:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 80047a6:	2187      	movs	r1, #135	@ 0x87
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	701a      	strb	r2, [r3, #0]
        if ((c < '0') || (c > '9')) {
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80047b6:	d912      	bls.n	80047de <SEGGER_RTT_vprintf+0x112>
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b39      	cmp	r3, #57	@ 0x39
 80047be:	d80e      	bhi.n	80047de <SEGGER_RTT_vprintf+0x112>
          break;
        }
        sFormat++;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3301      	adds	r3, #1
 80047c4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80047c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80047c8:	0013      	movs	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	189b      	adds	r3, r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	001a      	movs	r2, r3
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	18d3      	adds	r3, r2, r3
 80047d8:	3b30      	subs	r3, #48	@ 0x30
 80047da:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 80047dc:	e7e3      	b.n	80047a6 <SEGGER_RTT_vprintf+0xda>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 80047de:	217f      	movs	r1, #127	@ 0x7f
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
      Precision = 0u;
 80047e6:	2300      	movs	r3, #0
 80047e8:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 80047ea:	2087      	movs	r0, #135	@ 0x87
 80047ec:	183b      	adds	r3, r7, r0
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
      if (c == '.') {
 80047f4:	183b      	adds	r3, r7, r0
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047fa:	d134      	bne.n	8004866 <SEGGER_RTT_vprintf+0x19a>
        sFormat++;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3301      	adds	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b2a      	cmp	r3, #42	@ 0x2a
 8004808:	d10d      	bne.n	8004826 <SEGGER_RTT_vprintf+0x15a>
          sFormat++;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	3301      	adds	r3, #1
 800480e:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8004810:	187b      	adds	r3, r7, r1
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
          Precision = va_arg(*pParamList, int);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1d19      	adds	r1, r3, #4
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6011      	str	r1, [r2, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004824:	e01f      	b.n	8004866 <SEGGER_RTT_vprintf+0x19a>
        } else {
          do {
            c = *sFormat;
 8004826:	2187      	movs	r1, #135	@ 0x87
 8004828:	187b      	adds	r3, r7, r1
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	701a      	strb	r2, [r3, #0]
            if ((c < '0') || (c > '9')) {
 8004830:	187b      	adds	r3, r7, r1
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b2f      	cmp	r3, #47	@ 0x2f
 8004836:	d916      	bls.n	8004866 <SEGGER_RTT_vprintf+0x19a>
 8004838:	187b      	adds	r3, r7, r1
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b39      	cmp	r3, #57	@ 0x39
 800483e:	d812      	bhi.n	8004866 <SEGGER_RTT_vprintf+0x19a>
              break;
            }
            PrecisionSet = 1;
 8004840:	237f      	movs	r3, #127	@ 0x7f
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
            sFormat++;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3301      	adds	r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 800484e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004850:	0013      	movs	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	189b      	adds	r3, r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	001a      	movs	r2, r3
 800485a:	187b      	adds	r3, r7, r1
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	18d3      	adds	r3, r2, r3
 8004860:	3b30      	subs	r3, #48	@ 0x30
 8004862:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8004864:	e7df      	b.n	8004826 <SEGGER_RTT_vprintf+0x15a>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004866:	2387      	movs	r3, #135	@ 0x87
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	701a      	strb	r2, [r3, #0]
      do {
        if ((c == 'l') || (c == 'h')) {
 8004870:	2287      	movs	r2, #135	@ 0x87
 8004872:	18bb      	adds	r3, r7, r2
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b6c      	cmp	r3, #108	@ 0x6c
 8004878:	d003      	beq.n	8004882 <SEGGER_RTT_vprintf+0x1b6>
 800487a:	18bb      	adds	r3, r7, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b68      	cmp	r3, #104	@ 0x68
 8004880:	d108      	bne.n	8004894 <SEGGER_RTT_vprintf+0x1c8>
          sFormat++;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3301      	adds	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004888:	2387      	movs	r3, #135	@ 0x87
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	701a      	strb	r2, [r3, #0]
        if ((c == 'l') || (c == 'h')) {
 8004892:	e7ed      	b.n	8004870 <SEGGER_RTT_vprintf+0x1a4>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004894:	2387      	movs	r3, #135	@ 0x87
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b25      	cmp	r3, #37	@ 0x25
 800489c:	d100      	bne.n	80048a0 <SEGGER_RTT_vprintf+0x1d4>
 800489e:	e0c0      	b.n	8004a22 <SEGGER_RTT_vprintf+0x356>
 80048a0:	da00      	bge.n	80048a4 <SEGGER_RTT_vprintf+0x1d8>
 80048a2:	e0c5      	b.n	8004a30 <SEGGER_RTT_vprintf+0x364>
 80048a4:	2b78      	cmp	r3, #120	@ 0x78
 80048a6:	dd00      	ble.n	80048aa <SEGGER_RTT_vprintf+0x1de>
 80048a8:	e0c2      	b.n	8004a30 <SEGGER_RTT_vprintf+0x364>
 80048aa:	2b58      	cmp	r3, #88	@ 0x58
 80048ac:	da00      	bge.n	80048b0 <SEGGER_RTT_vprintf+0x1e4>
 80048ae:	e0bf      	b.n	8004a30 <SEGGER_RTT_vprintf+0x364>
 80048b0:	3b58      	subs	r3, #88	@ 0x58
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d900      	bls.n	80048b8 <SEGGER_RTT_vprintf+0x1ec>
 80048b6:	e0bb      	b.n	8004a30 <SEGGER_RTT_vprintf+0x364>
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	4b78      	ldr	r3, [pc, #480]	@ (8004a9c <SEGGER_RTT_vprintf+0x3d0>)
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	469f      	mov	pc, r3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	1d19      	adds	r1, r3, #4
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6011      	str	r1, [r2, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	18b9      	adds	r1, r7, r2
 80048d2:	600b      	str	r3, [r1, #0]
        c0 = (char)v;
 80048d4:	216b      	movs	r1, #107	@ 0x6b
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	18ba      	adds	r2, r7, r2
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
        _StoreChar(&BufferDesc, c0);
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	2354      	movs	r3, #84	@ 0x54
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	0011      	movs	r1, r2
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7ff fd52 	bl	8004392 <_StoreChar>
        break;
 80048ee:	e0a0      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1d19      	adds	r1, r3, #4
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2180      	movs	r1, #128	@ 0x80
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	6013      	str	r3, [r2, #0]
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8004902:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004904:	187b      	adds	r3, r7, r1
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	2354      	movs	r3, #84	@ 0x54
 800490a:	18f8      	adds	r0, r7, r3
 800490c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	0013      	movs	r3, r2
 8004916:	220a      	movs	r2, #10
 8004918:	f7ff fe30 	bl	800457c <_PrintInt>
        break;
 800491c:	e089      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      case 'u':
        v = va_arg(*pParamList, int);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6011      	str	r1, [r2, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2280      	movs	r2, #128	@ 0x80
 800492c:	18b9      	adds	r1, r7, r2
 800492e:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8004930:	18bb      	adds	r3, r7, r2
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004936:	2354      	movs	r3, #84	@ 0x54
 8004938:	18f8      	adds	r0, r7, r3
 800493a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	0013      	movs	r3, r2
 8004944:	220a      	movs	r2, #10
 8004946:	f7ff fd65 	bl	8004414 <_PrintUnsigned>
        break;
 800494a:	e072      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1d19      	adds	r1, r3, #4
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6011      	str	r1, [r2, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	18b9      	adds	r1, r7, r2
 800495c:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 800495e:	18bb      	adds	r3, r7, r2
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004964:	2354      	movs	r3, #84	@ 0x54
 8004966:	18f8      	adds	r0, r7, r3
 8004968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	0013      	movs	r3, r2
 8004972:	2210      	movs	r2, #16
 8004974:	f7ff fd4e 	bl	8004414 <_PrintUnsigned>
        break;
 8004978:	e05b      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	1d19      	adds	r1, r3, #4
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6011      	str	r1, [r2, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8004988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <SEGGER_RTT_vprintf+0x2ce>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 800498e:	4b44      	ldr	r3, [pc, #272]	@ (8004aa0 <SEGGER_RTT_vprintf+0x3d4>)
 8004990:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8004992:	237f      	movs	r3, #127	@ 0x7f
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2200      	movs	r2, #0
 8004998:	701a      	strb	r2, [r3, #0]
          }
          do {
            c = *s;
 800499a:	2187      	movs	r1, #135	@ 0x87
 800499c:	187b      	adds	r3, r7, r1
 800499e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	701a      	strb	r2, [r3, #0]
            s++;
 80049a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a6:	3301      	adds	r3, #1
 80049a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <SEGGER_RTT_vprintf+0x322>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 80049b2:	237f      	movs	r3, #127	@ 0x7f
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <SEGGER_RTT_vprintf+0x2f6>
 80049bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d017      	beq.n	80049f2 <SEGGER_RTT_vprintf+0x326>
              break;
            }
            _StoreChar(&BufferDesc, c);
 80049c2:	2387      	movs	r3, #135	@ 0x87
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	2454      	movs	r4, #84	@ 0x54
 80049ca:	193b      	adds	r3, r7, r4
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff fcdf 	bl	8004392 <_StoreChar>
            Precision--;
 80049d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d6:	3b01      	subs	r3, #1
 80049d8:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	217f      	movs	r1, #127	@ 0x7f
 80049e0:	187a      	adds	r2, r7, r1
 80049e2:	1879      	adds	r1, r7, r1
 80049e4:	7809      	ldrb	r1, [r1, #0]
 80049e6:	7011      	strb	r1, [r2, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dad6      	bge.n	800499a <SEGGER_RTT_vprintf+0x2ce>
        }
        break;
 80049ec:	e021      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
              break;
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	e01f      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
              break;
 80049f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80049f4:	e01d      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      case 'p':
        v = va_arg(*pParamList, int);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	1d19      	adds	r1, r3, #4
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6011      	str	r1, [r2, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	18b9      	adds	r1, r7, r2
 8004a06:	600b      	str	r3, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8004a08:	18bb      	adds	r3, r7, r2
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	2354      	movs	r3, #84	@ 0x54
 8004a0e:	18f8      	adds	r0, r7, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	2308      	movs	r3, #8
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	2308      	movs	r3, #8
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	f7ff fcfa 	bl	8004414 <_PrintUnsigned>
        break;
 8004a20:	e007      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a22:	2354      	movs	r3, #84	@ 0x54
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2125      	movs	r1, #37	@ 0x25
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff fcb2 	bl	8004392 <_StoreChar>
        break;
 8004a2e:	e000      	b.n	8004a32 <SEGGER_RTT_vprintf+0x366>
      default:
        break;
 8004a30:	46c0      	nop			@ (mov r8, r8)
      }
      sFormat++;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	e008      	b.n	8004a4c <SEGGER_RTT_vprintf+0x380>
    } else {
      _StoreChar(&BufferDesc, c);
 8004a3a:	2387      	movs	r3, #135	@ 0x87
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	2354      	movs	r3, #84	@ 0x54
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7ff fca3 	bl	8004392 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8004a4c:	2354      	movs	r3, #84	@ 0x54
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	db00      	blt.n	8004a58 <SEGGER_RTT_vprintf+0x38c>
 8004a56:	e650      	b.n	80046fa <SEGGER_RTT_vprintf+0x2e>
 8004a58:	e000      	b.n	8004a5c <SEGGER_RTT_vprintf+0x390>
      break;
 8004a5a:	46c0      	nop			@ (mov r8, r8)

  if (BufferDesc.ReturnValue > 0) {
 8004a5c:	2254      	movs	r2, #84	@ 0x54
 8004a5e:	18bb      	adds	r3, r7, r2
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	dd13      	ble.n	8004a8e <SEGGER_RTT_vprintf+0x3c2>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8004a66:	18bb      	adds	r3, r7, r2
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <SEGGER_RTT_vprintf+0x3b2>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8004a6e:	18bb      	adds	r3, r7, r2
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	2314      	movs	r3, #20
 8004a74:	18f9      	adds	r1, r7, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7ff fc45 	bl	8004308 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8004a7e:	2154      	movs	r1, #84	@ 0x54
 8004a80:	187b      	adds	r3, r7, r1
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	18d2      	adds	r2, r2, r3
 8004a8a:	187b      	adds	r3, r7, r1
 8004a8c:	60da      	str	r2, [r3, #12]
  }
  return BufferDesc.ReturnValue;
 8004a8e:	2354      	movs	r3, #84	@ 0x54
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	68db      	ldr	r3, [r3, #12]
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b023      	add	sp, #140	@ 0x8c
 8004a9a:	bd90      	pop	{r4, r7, pc}
 8004a9c:	08005eb0 	.word	0x08005eb0
 8004aa0:	0800540c 	.word	0x0800540c

08004aa4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8004aa4:	b40e      	push	{r1, r2, r3}
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8004aae:	2320      	movs	r3, #32
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	18fa      	adds	r2, r7, r3
 8004ab8:	69f9      	ldr	r1, [r7, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff fe05 	bl	80046cc <SEGGER_RTT_vprintf>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	60fb      	str	r3, [r7, #12]
  va_end(ParamList);
  return r;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b005      	add	sp, #20
 8004ace:	bc80      	pop	{r7}
 8004ad0:	bc08      	pop	{r3}
 8004ad2:	b003      	add	sp, #12
 8004ad4:	4718      	bx	r3

08004ad6 <memset>:
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	1882      	adds	r2, r0, r2
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <memset+0xa>
 8004ade:	4770      	bx	lr
 8004ae0:	7019      	strb	r1, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	e7f9      	b.n	8004ada <memset+0x4>
	...

08004ae8 <__libc_init_array>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	2600      	movs	r6, #0
 8004aec:	4c0c      	ldr	r4, [pc, #48]	@ (8004b20 <__libc_init_array+0x38>)
 8004aee:	4d0d      	ldr	r5, [pc, #52]	@ (8004b24 <__libc_init_array+0x3c>)
 8004af0:	1b64      	subs	r4, r4, r5
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	42a6      	cmp	r6, r4
 8004af6:	d109      	bne.n	8004b0c <__libc_init_array+0x24>
 8004af8:	2600      	movs	r6, #0
 8004afa:	f000 f819 	bl	8004b30 <_init>
 8004afe:	4c0a      	ldr	r4, [pc, #40]	@ (8004b28 <__libc_init_array+0x40>)
 8004b00:	4d0a      	ldr	r5, [pc, #40]	@ (8004b2c <__libc_init_array+0x44>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	42a6      	cmp	r6, r4
 8004b08:	d105      	bne.n	8004b16 <__libc_init_array+0x2e>
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	00b3      	lsls	r3, r6, #2
 8004b0e:	58eb      	ldr	r3, [r5, r3]
 8004b10:	4798      	blx	r3
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7ee      	b.n	8004af4 <__libc_init_array+0xc>
 8004b16:	00b3      	lsls	r3, r6, #2
 8004b18:	58eb      	ldr	r3, [r5, r3]
 8004b1a:	4798      	blx	r3
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7f2      	b.n	8004b06 <__libc_init_array+0x1e>
 8004b20:	08005f44 	.word	0x08005f44
 8004b24:	08005f44 	.word	0x08005f44
 8004b28:	08005f48 	.word	0x08005f48
 8004b2c:	08005f44 	.word	0x08005f44

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	46c0      	nop			@ (mov r8, r8)
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
